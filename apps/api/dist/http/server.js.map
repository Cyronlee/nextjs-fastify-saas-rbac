{"version":3,"sources":["../../src/http/server.ts","../../../../node_modules/.pnpm/@t3-oss+env-core@0.11.1_typescript@5.6.3_zod@3.23.8/node_modules/@t3-oss/env-core/dist/index.js","../../../../node_modules/.pnpm/@t3-oss+env-nextjs@0.11.1_typescript@5.6.3_zod@3.23.8/node_modules/@t3-oss/env-nextjs/dist/index.js","../../../../packages/env/index.ts","../../src/http/error-handler.ts","../../src/errors/messages.ts","../../src/http/routes/_errors/bad-request-error.ts","../../src/http/routes/_errors/unauthorized-error.ts","../../src/http/middlewares/auth.ts","../../src/lib/prisma.ts","../../src/http/routes/account/cancel-email-change.ts","../../src/http/routes/account/check-email-change.ts","../../src/schemas/tokens-schema.ts","../../src/http/routes/account/confirm-email-change.ts","../../src/lib/cloudflare-r2.ts","../../src/utils/get-uploaded-avatar-names.ts","../../src/http/routes/account/delete-account.ts","../../src/http/routes/account/get-profile.ts","../../src/schemas/account-providers-schema.ts","../../src/http/routes/account/leave-organization.ts","../../src/http/routes/account/providers/connect-github.ts","../../src/http/routes/account/providers/connect-google.ts","../../src/http/routes/account/remove-provider.ts","../../src/http/routes/account/update-account.ts","../../src/lib/mail.ts","../../src/http/emails/template/change-account-email.template.ts","../../src/http/emails/change-account-email.ts","../../src/http/routes/account/update-password.ts","../../src/schemas/validate-strong-password-schema.ts","../../src/http/routes/auth/authenticate-with-github.ts","../../src/http/routes/auth/authenticate-with-google.ts","../../src/http/routes/auth/authenticate-with-password.ts","../../src/http/routes/auth/create-account.ts","../../src/http/emails/template/verify-account-email.template.ts","../../src/http/emails/verify-account-email.ts","../../src/http/routes/auth/request-password-recover.ts","../../src/http/emails/template/password-recover-email.template.ts","../../src/http/emails/password-recover-email.ts","../../src/http/routes/auth/resend-email-validation-code.ts","../../src/http/routes/auth/reset-password.ts","../../src/http/routes/auth/verify-email-and-authenticate.ts","../../src/http/routes/billing/get-organization-billing.ts","../../../../node_modules/.pnpm/@ucast+core@1.10.2/node_modules/@ucast/core/src/Condition.ts","../../../../node_modules/.pnpm/@ucast+core@1.10.2/node_modules/@ucast/core/src/utils.ts","../../../../node_modules/.pnpm/@ucast+core@1.10.2/node_modules/@ucast/core/src/builder.ts","../../../../node_modules/.pnpm/@ucast+core@1.10.2/node_modules/@ucast/core/src/parsers/defaultInstructionParsers.ts","../../../../node_modules/.pnpm/@ucast+core@1.10.2/node_modules/@ucast/core/src/parsers/ObjectQueryParser.ts","../../../../node_modules/.pnpm/@ucast+core@1.10.2/node_modules/@ucast/core/src/interpreter.ts","../../../../node_modules/.pnpm/@ucast+core@1.10.2/node_modules/@ucast/core/src/translator.ts","../../../../node_modules/.pnpm/@ucast+core@1.10.2/node_modules/@ucast/core/src/index.ts","../../../../node_modules/.pnpm/@ucast+mongo@2.4.3/node_modules/@ucast/mongo/src/instructions.ts","../../../../node_modules/.pnpm/@ucast+mongo@2.4.3/node_modules/@ucast/mongo/src/MongoQueryParser.ts","../../../../node_modules/.pnpm/@ucast+mongo@2.4.3/node_modules/@ucast/mongo/src/index.ts","../../../../node_modules/.pnpm/@ucast+js@3.0.4/node_modules/@ucast/js/src/utils.ts","../../../../node_modules/.pnpm/@ucast+js@3.0.4/node_modules/@ucast/js/src/interpreter.ts","../../../../node_modules/.pnpm/@ucast+js@3.0.4/node_modules/@ucast/js/src/interpreters.ts","../../../../node_modules/.pnpm/@ucast+js@3.0.4/node_modules/@ucast/js/src/defaults.ts","../../../../node_modules/.pnpm/@ucast+mongo2js@1.3.4/node_modules/@ucast/mongo2js/src/factory.ts","../../../../node_modules/.pnpm/@casl+ability@6.7.2/node_modules/@casl/ability/src/utils.ts","../../../../node_modules/.pnpm/@casl+ability@6.7.2/node_modules/@casl/ability/src/Rule.ts","../../../../node_modules/.pnpm/@casl+ability@6.7.2/node_modules/@casl/ability/src/structures/LinkedItem.ts","../../../../node_modules/.pnpm/@casl+ability@6.7.2/node_modules/@casl/ability/src/RuleIndex.ts","../../../../node_modules/.pnpm/@casl+ability@6.7.2/node_modules/@casl/ability/src/PureAbility.ts","../../../../node_modules/.pnpm/@casl+ability@6.7.2/node_modules/@casl/ability/src/matchers/conditions.ts","../../../../node_modules/.pnpm/@casl+ability@6.7.2/node_modules/@casl/ability/src/matchers/field.ts","../../../../node_modules/.pnpm/@casl+ability@6.7.2/node_modules/@casl/ability/src/Ability.ts","../../../../node_modules/.pnpm/@casl+ability@6.7.2/node_modules/@casl/ability/src/AbilityBuilder.ts","../../../../node_modules/.pnpm/@casl+ability@6.7.2/node_modules/@casl/ability/src/ForbiddenError.ts","../../../../packages/auth/src/index.ts","../../../../packages/auth/src/messages/error.ts","../../../../packages/auth/src/permissions.ts","../../../../packages/auth/src/subjects/billing.ts","../../../../packages/auth/src/subjects/invite.ts","../../../../packages/auth/src/subjects/organization.ts","../../../../packages/auth/src/models/organization.ts","../../../../packages/auth/src/subjects/project.ts","../../../../packages/auth/src/models/project.ts","../../../../packages/auth/src/subjects/user.ts","../../../../packages/auth/src/models/user.ts","../../../../packages/auth/src/roles.ts","../../src/utils/get-user-permissions.ts","../../src/http/routes/invites/accept-invite.ts","../../src/http/routes/invites/create-invite.ts","../../src/http/emails/template/create-invite-email.template.ts","../../src/http/emails/create-invite-email-email.ts","../../src/http/routes/invites/get-invite.ts","../../src/http/routes/invites/get-invites.ts","../../src/http/routes/invites/get-pending-invites.ts","../../src/http/routes/invites/reject-invite.ts","../../src/http/routes/invites/revoke-invite.ts","../../src/http/routes/members/get-members.ts","../../src/http/routes/members/remove-member.ts","../../src/http/routes/members/update-member.ts","../../src/http/routes/organization/authorize-domain.ts","../../src/http/routes/organization/create-organization.ts","../../src/utils/generate-slug.ts","../../src/http/routes/organization/get-membership.ts","../../src/http/routes/organization/get-organization.ts","../../src/http/routes/organization/get-organizations.ts","../../src/http/routes/organization/remove-domain.ts","../../src/http/routes/organization/shutdown-organization.ts","../../src/http/routes/organization/transfer-organization.ts","../../src/http/emails/template/transfer-organization-ownership-email.template.ts","../../src/http/emails/transfer-organization-ownership-email.ts","../../src/http/routes/organization/update-organization.ts","../../src/http/routes/projects/create-project.ts","../../src/http/routes/projects/delete-project.ts","../../src/http/routes/projects/get-project.ts","../../src/http/routes/projects/get-projects.ts","../../src/http/routes/projects/update-project.ts","../../src/http/routes/upload-avatar.ts","../../src/utils/generate-avatar.ts","../../src/utils/generate-filename.ts"],"sourcesContent":["import fastifyCors from '@fastify/cors'\nimport fastifyJwt from '@fastify/jwt'\nimport fastifySwagger from '@fastify/swagger'\nimport fastifySwaggerUi from '@fastify/swagger-ui'\nimport { env } from '@saas/env'\nimport { fastify } from 'fastify'\nimport {\n\tjsonSchemaTransform,\n\tserializerCompiler,\n\tvalidatorCompiler,\n\tZodTypeProvider,\n} from 'fastify-type-provider-zod'\n\nimport { errorHandler } from './error-handler'\nimport { deleteEmailChangeToken } from './routes/account/cancel-email-change'\nimport { checkEmailChange } from './routes/account/check-email-change'\nimport { confirmEmailChangeToken } from './routes/account/confirm-email-change'\nimport { deleteAccount } from './routes/account/delete-account'\nimport { getProfile } from './routes/account/get-profile'\nimport { leaveOrganization } from './routes/account/leave-organization'\nimport { connectGitHub } from './routes/account/providers/connect-github'\nimport { connectGoogle } from './routes/account/providers/connect-google'\nimport { removeAccountProvider } from './routes/account/remove-provider'\nimport { updateAccount } from './routes/account/update-account'\nimport { updatePassword } from './routes/account/update-password'\nimport { authenticateWithGitHub } from './routes/auth/authenticate-with-github'\nimport { authenticateWithGoogle } from './routes/auth/authenticate-with-google'\nimport { authenticateWithPassword } from './routes/auth/authenticate-with-password'\nimport { createAccount } from './routes/auth/create-account'\nimport { requestPasswordRecover } from './routes/auth/request-password-recover'\nimport { resendEmailValidationCode } from './routes/auth/resend-email-validation-code'\nimport { resetPassword } from './routes/auth/reset-password'\nimport { verifyEmailAndAuthenticate } from './routes/auth/verify-email-and-authenticate'\nimport { getOrganizationBilling } from './routes/billing/get-organization-billing'\nimport { acceptInvite } from './routes/invites/accept-invite'\nimport { createInvite } from './routes/invites/create-invite'\nimport { getInvite } from './routes/invites/get-invite'\nimport { getInvites } from './routes/invites/get-invites'\nimport { getPendingInvites } from './routes/invites/get-pending-invites'\nimport { rejectInvite } from './routes/invites/reject-invite'\nimport { revokeInvite } from './routes/invites/revoke-invite'\nimport { getMembers } from './routes/members/get-members'\nimport { removeMember } from './routes/members/remove-member'\nimport { updateMember } from './routes/members/update-member'\nimport { authorizeDomain } from './routes/organization/authorize-domain'\nimport { creteOrganization } from './routes/organization/create-organization'\nimport { getMemebership } from './routes/organization/get-membership'\nimport { getOrganization } from './routes/organization/get-organization'\nimport { getOrganizations } from './routes/organization/get-organizations'\nimport { removeDomain } from './routes/organization/remove-domain'\nimport { shutdownOrganization } from './routes/organization/shutdown-organization'\nimport { transferOrganization } from './routes/organization/transfer-organization'\nimport { updateOrganization } from './routes/organization/update-organization'\nimport { createProject } from './routes/projects/create-project'\nimport { deleteProject } from './routes/projects/delete-project'\nimport { getProject } from './routes/projects/get-project'\nimport { getProjects } from './routes/projects/get-projects'\nimport { updateProject } from './routes/projects/update-project'\nimport { uploadAvatar } from './routes/upload-avatar'\n\nconst app = fastify().withTypeProvider<ZodTypeProvider>()\n\napp.setSerializerCompiler(serializerCompiler)\napp.setValidatorCompiler(validatorCompiler)\napp.setErrorHandler(errorHandler)\n\napp.register(fastifySwagger, {\n\topenapi: {\n\t\tinfo: {\n\t\t\ttitle: 'Next.js Fastify Saas RBAC',\n\t\t\tdescription: 'Full-stack SaaS app with multi-tenant and RBAC.',\n\t\t\tversion: '1.0.0',\n\t\t},\n\t\tcomponents: {\n\t\t\tsecuritySchemes: {\n\t\t\t\tbearerAuth: {\n\t\t\t\t\ttype: 'http',\n\t\t\t\t\tscheme: 'bearer',\n\t\t\t\t\tbearerFormat: 'JWT',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\ttransform: jsonSchemaTransform,\n})\n\napp.register(fastifySwaggerUi, {\n\troutePrefix: '/docs',\n})\n\napp.register(fastifyCors)\n\napp.register(fastifyJwt, {\n\tsecret: {\n\t\tpublic: Buffer.from(env.JWT_PUBLIC_KEY, 'base64'),\n\t\tprivate: Buffer.from(env.JWT_SECRET_KEY, 'base64'),\n\t},\n\tsign: {\n\t\talgorithm: 'RS256',\n\t},\n})\n\napp.register(createAccount)\napp.register(authenticateWithPassword)\napp.register(authenticateWithGitHub)\napp.register(authenticateWithGoogle)\napp.register(requestPasswordRecover)\napp.register(resetPassword)\napp.register(verifyEmailAndAuthenticate)\napp.register(resendEmailValidationCode)\n\napp.register(getProfile)\napp.register(updateAccount)\napp.register(updatePassword)\napp.register(removeAccountProvider)\napp.register(leaveOrganization)\napp.register(deleteAccount)\napp.register(checkEmailChange)\napp.register(deleteEmailChangeToken)\napp.register(confirmEmailChangeToken)\n\napp.register(connectGitHub)\napp.register(connectGoogle)\n\napp.register(creteOrganization)\napp.register(getMemebership)\napp.register(getOrganizations)\napp.register(getOrganization)\napp.register(updateOrganization)\napp.register(shutdownOrganization)\napp.register(transferOrganization)\napp.register(authorizeDomain)\napp.register(removeDomain)\n\napp.register(getMembers)\napp.register(updateMember)\napp.register(removeMember)\n\napp.register(createInvite)\napp.register(getInvites)\napp.register(getInvite)\napp.register(acceptInvite)\napp.register(rejectInvite)\napp.register(revokeInvite)\napp.register(getPendingInvites)\n\napp.register(getOrganizationBilling)\n\napp.register(createProject)\napp.register(deleteProject)\napp.register(getProject)\napp.register(getProjects)\napp.register(updateProject)\n\napp.register(uploadAvatar)\n\napp\n\t.listen({\n\t\tport: env.PORT,\n\t\thost: '0.0.0.0',\n\t})\n\t.then(() => console.log('✅ HTTP server is running.'))\n","import { object } from 'zod';\n\nfunction createEnv(opts) {\n    const runtimeEnv = opts.runtimeEnvStrict ?? opts.runtimeEnv ?? process.env;\n    const emptyStringAsUndefined = opts.emptyStringAsUndefined ?? false;\n    if (emptyStringAsUndefined) {\n        for (const [key, value] of Object.entries(runtimeEnv)){\n            if (value === \"\") {\n                delete runtimeEnv[key];\n            }\n        }\n    }\n    const skip = !!opts.skipValidation;\n    // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n    if (skip) return runtimeEnv;\n    const _client = typeof opts.client === \"object\" ? opts.client : {};\n    const _server = typeof opts.server === \"object\" ? opts.server : {};\n    const _shared = typeof opts.shared === \"object\" ? opts.shared : {};\n    const client = object(_client);\n    const server = object(_server);\n    const shared = object(_shared);\n    const isServer = opts.isServer ?? (typeof window === \"undefined\" || \"Deno\" in window);\n    const allClient = client.merge(shared);\n    const allServer = server.merge(shared).merge(client);\n    const parsed = isServer ? allServer.safeParse(runtimeEnv) // on server we can validate all env vars\n     : allClient.safeParse(runtimeEnv); // on client we can only validate the ones that are exposed\n    const onValidationError = opts.onValidationError ?? ((error)=>{\n        console.error(\"❌ Invalid environment variables:\", error.flatten().fieldErrors);\n        throw new Error(\"Invalid environment variables\");\n    });\n    const onInvalidAccess = opts.onInvalidAccess ?? ((_variable)=>{\n        throw new Error(\"❌ Attempted to access a server-side environment variable on the client\");\n    });\n    if (parsed.success === false) {\n        return onValidationError(parsed.error);\n    }\n    const isServerAccess = (prop)=>{\n        if (!opts.clientPrefix) return true;\n        return !prop.startsWith(opts.clientPrefix) && !(prop in shared.shape);\n    };\n    const isValidServerAccess = (prop)=>{\n        return isServer || !isServerAccess(prop);\n    };\n    const ignoreProp = (prop)=>{\n        return prop === \"__esModule\" || prop === \"$$typeof\";\n    };\n    const extendedObj = (opts.extends ?? []).reduce((acc, curr)=>{\n        return Object.assign(acc, curr);\n    }, {});\n    const fullObj = Object.assign(parsed.data, extendedObj);\n    const env = new Proxy(fullObj, {\n        get (target, prop) {\n            if (typeof prop !== \"string\") return undefined;\n            if (ignoreProp(prop)) return undefined;\n            if (!isValidServerAccess(prop)) return onInvalidAccess(prop);\n            return Reflect.get(target, prop);\n        }\n    });\n    // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n    return env;\n}\n\nexport { createEnv };\n","import { createEnv as createEnv$1 } from '@t3-oss/env-core';\n\nconst CLIENT_PREFIX = \"NEXT_PUBLIC_\";\nfunction createEnv(opts) {\n    const client = typeof opts.client === \"object\" ? opts.client : {};\n    const server = typeof opts.server === \"object\" ? opts.server : {};\n    const shared = opts.shared;\n    const runtimeEnv = opts.runtimeEnv ? opts.runtimeEnv : {\n        ...process.env,\n        ...opts.experimental__runtimeEnv\n    };\n    return createEnv$1({\n        ...opts,\n        shared,\n        client,\n        server,\n        clientPrefix: CLIENT_PREFIX,\n        runtimeEnv\n    });\n}\n\nexport { createEnv };\n","/* eslint-disable prettier/prettier */\nimport { createEnv } from '@t3-oss/env-nextjs'\nimport { z } from 'zod'\n\nexport const env = createEnv({\n\tserver: {\n\t\tDATABASE_URL: z.string(),\n\t\tPORT: z.coerce.number().default(3333),\n\n\t\tJWT_SECRET_KEY: z.string(),\n\t\tJWT_PUBLIC_KEY: z.string(),\n\n\t\tGITHUB_OAUTH_CLIENT_ID: z.string(),\n\t\tGITHUB_OAUTH_CLIENT_SECRET: z.string(),\n\t\tGITHUB_OAUTH_CLIENT_REDIRECT_URI: z.string().url(),\n\t\tGITHUB_OAUTH_CLIENT_SCOPE: z.string().default('user'),\n\n\t\tGOOGLE_OAUTH_CLIENT_ID: z.string(),\n\t\tGOOGLE_OAUTH_CLIENT_SECRET: z.string(),\n\t\tGOOGLE_OAUTH_CLIENT_REDIRECT_URI: z.string().url(),\n\t\tGOOGLE_OAUTH_CLIENT_RESPONSE_TYPE: z.string().default('code'),\n\t\tGOOGLE_OAUTH_CLIENT_SCOPE: z.string().default('https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile'),\n\n\t\tMAIL_SMTP_HOST: z.string().default('smtp.gmail.com'),\n\t\tMAIL_SMTP_PORT: z.coerce.number().default(465),\n\t\tMAIL_SMTP_EMAIL: z.string(),\n\t\tMAIL_SMTP_PASSWORD: z.string(),\n\n\t\tCLOUDFLARE_ACCOUNT_ID: z.string(),\n\t\tCLOUDFLARE_ENDPOINT: z.string(),\n\t\tCLOUDFLARE_BUCKET: z.string(),\n\t\tCLOUDFLARE_REGION: z.string().default('auto'),\n\t\tCLOUDFLARE_ACCESS_KEY: z.string(),\n\t\tCLOUDFLARE_SECRET_KEY: z.string(),\n\t},\n\n\tclient: {},\n\n\tshared: {\n\t\tNEXT_PUBLIC_URL: z.string().url(),\n\t\tNEXT_PUBLIC_API_URL: z.string().url(),\n\t\tNEXT_PUBLIC_CLOUDFLARE_URL: z.string(),\n\t},\n\n\truntimeEnv: {\n\t\tDATABASE_URL: process.env.DATABASE_URL,\n\t\tPORT: process.env.PORT,\n\t\tNEXT_PUBLIC_URL: process.env.NEXT_PUBLIC_URL,\n\t\tNEXT_PUBLIC_API_URL: process.env.NEXT_PUBLIC_API_URL,\n\t\tJWT_SECRET_KEY: process.env.JWT_SECRET_KEY,\n\t\tJWT_PUBLIC_KEY: process.env.JWT_PUBLIC_KEY,\n\t\tGITHUB_OAUTH_CLIENT_ID: process.env.GITHUB_OAUTH_CLIENT_ID,\n\t\tGITHUB_OAUTH_CLIENT_SECRET: process.env.GITHUB_OAUTH_CLIENT_SECRET,\n\t\tGITHUB_OAUTH_CLIENT_REDIRECT_URI: process.env.GITHUB_OAUTH_CLIENT_REDIRECT_URI,\n\t\tGITHUB_OAUTH_CLIENT_SCOPE: process.env.GITHUB_OAUTH_CLIENT_SCOPE,\n\t\tGOOGLE_OAUTH_CLIENT_ID: process.env.GOOGLE_OAUTH_CLIENT_ID,\n\t\tGOOGLE_OAUTH_CLIENT_SECRET: process.env.GOOGLE_OAUTH_CLIENT_SECRET,\n\t\tGOOGLE_OAUTH_CLIENT_REDIRECT_URI: process.env.GOOGLE_OAUTH_CLIENT_REDIRECT_URI,\n\t\tGOOGLE_OAUTH_CLIENT_RESPONSE_TYPE: process.env.GOOGLE_OAUTH_CLIENT_RESPONSE_TYPE,\n\t\tGOOGLE_OAUTH_CLIENT_SCOPE: process.env.GOOGLE_OAUTH_CLIENT_SCOPE,\n\t\tMAIL_SMTP_HOST: process.env.MAIL_SMTP_HOST,\n\t\tMAIL_SMTP_PORT: process.env.MAIL_SMTP_PORT,\n\t\tMAIL_SMTP_EMAIL: process.env.MAIL_SMTP_EMAIL,\n\t\tMAIL_SMTP_PASSWORD: process.env.MAIL_SMTP_PASSWORD,\n\t\tCLOUDFLARE_ACCOUNT_ID: process.env.CLOUDFLARE_ACCOUNT_ID,\n\t\tCLOUDFLARE_ENDPOINT: process.env.CLOUDFLARE_ENDPOINT,\n\t\tCLOUDFLARE_BUCKET: process.env.CLOUDFLARE_BUCKET,\n\t\tCLOUDFLARE_REGION: process.env.CLOUDFLARE_REGION,\n\t\tCLOUDFLARE_ACCESS_KEY: process.env.CLOUDFLARE_ACCESS_KEY,\n\t\tCLOUDFLARE_SECRET_KEY: process.env.CLOUDFLARE_SECRET_KEY,\n\t\tNEXT_PUBLIC_CLOUDFLARE_URL: process.env.NEXT_PUBLIC_CLOUDFLARE_URL,\n\t},\n\temptyStringAsUndefined: true,\n})\n","import { FastifyInstance } from 'fastify'\nimport { hasZodFastifySchemaValidationErrors } from 'fastify-type-provider-zod'\n\nimport { errors } from '@/errors/messages'\n\nimport { BadRequestError } from './routes/_errors/bad-request-error'\nimport { UnauthorizedError } from './routes/_errors/unauthorized-error'\n\ntype FastifyErrorHandler = FastifyInstance['errorHandler']\n\nexport const errorHandler: FastifyErrorHandler = (error, _, reply) => {\n\tif (hasZodFastifySchemaValidationErrors(error)) {\n\t\treturn reply.status(400).send({\n\t\t\tmessage: errors.api.VALIDATION_ERROR,\n\t\t\terrors: error.validation,\n\t\t})\n\t}\n\n\tif (error instanceof BadRequestError) {\n\t\treturn reply.status(400).send({\n\t\t\tmessage: error.message,\n\t\t})\n\t}\n\n\tif (error instanceof UnauthorizedError) {\n\t\treturn reply.status(401).send({\n\t\t\tmessage: error.message,\n\t\t})\n\t}\n\n\tconsole.error(error)\n\t// send error to some observability plattform`\n\n\treturn reply.status(500).send({\n\t\tmessage: errors.api.SERVER_ERROR,\n\t})\n}\n","/* eslint-disable prettier/prettier */\nexport const errors = {\n\tapi: {\n\t\tVALIDATION_ERROR: 'Validation error',\n\t\tSERVER_ERROR: 'Internal server error',\n\t},\n\tservices: {\n\t\tSEND_EMAIL: 'An error occurred while trying to send the e-mail',\n\t\tGITHUB_ALREADY_CONNECTED: 'You already have a GitHub account connected',\n\t\tGITHUB_ALREADY_CONNECTED_SOMEONE_ELSE: 'This Github account is already connected with another account',\n\t\tGOOGLE_ALREADY_CONNECTED: 'You already have a Google account connected',\n\t\tGOOGLE_ALREADY_CONNECTED_SOMEONE_ELSE: 'This Google account is already connected with another account',\n\t},\n\tuser: {\n\t\tALREADY_EXISTS: 'An user with same e-mail already exists',\n\t\tNOT_FOUND: 'User not found',\n\t\tACCOUNT_NOT_FOUND: 'Account not found',\n\t\tEMAIL_VALIDATION_NOT_FOUND: 'E-mail change validation not found',\n\t\tEMAIL_VALIDATION_EXPIRED: 'E-mail change validation does not exists or already expired',\n\t\tEMAIL_VALIDATION_INVALID: 'Invalid validation code'\n\t},\n\tauth: {\n\t\tNOT_PASSWORD_FOUND: 'User does not have a password, use social sign-in',\n\t\tINVALID_CREDENTIALS: 'Invalid credentials',\n\t\tINVALID_TOKEN: 'Invalid authentication token',\n\t\tINVALID_EMAIL_TOKEN: 'The token provied is not valid. Note: The code is valid for 5 minutes',\n\t\tINVALID_PASSWORD_TOKEN: 'Unable to reset password. Ensure your recovery code is valid and try again. Note: The code is valid for 5 minutes',\n\t\tLAST_METHOD_AVAILABLE: 'This service is the only access method available. Set a password or connect with another provider first',\n\t\tGITHUB_EMAIL_NOT_FOUND: 'Your GitHub account does not have an e-mail to authenticate',\n\t\tPASSWORD_NUMBER: 'Enter one number.',\n\t\tPASSWORD_UPPER: 'Enter one upper case letter.',\n\t\tPASSWORD_LOWER: 'Enter one lower case letter.',\n\t\tPASSWORD_SPECIAL: 'Enter one special character.',\n\t\tPASSWORD_LENGTH: 'Enter at least 6 characters.',\n\t},\n\torganizations: {\n\t\tentity: {\n\t\t\tNOT_FOUND: 'Organization not found',\n\t\t\tNOT_MEMBER: 'The user is not a member of this organization',\n\t\t\tALREADY_EXISTS: 'There is another organization using the same name. Choose a different one',\n\t\t\tCANNOT_SHUTDOWN: 'You are not allowed to shutdown this organization',\n\t\t\tCANNOT_TRANSFER: 'You are not allowed to transfer ownership of this organization',\n\t\t\tCANNOT_UPDATE: 'You are not allowed to update this organization',\n\t\t\tCANNOT_LEAVE: 'You are the owner of this organization, to leave it you must transfer the ownership first',\n\t\t},\n\t\tbilling: {\n\t\t\tCANNOT_LIST: 'You are not allowed to get billing details from this organization',\n\t\t},\n\t\tdomain: {\n\t\t\tALREADY_EXISTS: 'Another organization with same domain already exists',\n\t\t\tCHECK_DNS: 'Error checking DNS information',\n\t\t\tTXT_NOT_FOUND: 'A valid TXT record was not found in the DNS records',\n\t\t\tTXT_INVALID: 'A valid TXT record was found, but does not match in the DNS records. Check your DNS values.',\n\t\t},\n\t\tmembers: {\n\t\t\tCANNOT_ACCESS: 'You are not a member of this organization',\n\t\t\tCANNOT_LIST: 'You are not allowed to list organization members',\n\t\t\tCANNOT_DELETE: 'You are not allowed to remove this organization member',\n\t\t\tCANNOT_UPDATE: 'You are not allowed to update this organization member',\n\t\t},\n\t\tinvites: {\n\t\t\tNOT_FOUND: 'Invite not found or expired',\n\t\t\tNOT_ALLOWED: 'This invite belongs to another user',\n\t\t\tAUTOJOIN_DOMAIN: 'Users with {domain} domain will join your organization automatically on sign in',\n\t\t\tALREADY_EXISTS: 'Another invite with same e-mail already exists',\n\t\t\tALREADY_MEMBER: 'A member with this e-mail already belongs to your organization',\n\t\t\tCANNOT_SEND: 'You are not allowed to create a new invite',\n\t\t\tCANNOT_LIST: 'You are not allowed to get organization invites',\n\t\t\tCANNOT_REVOKE: 'You are not allowed to revoke an invite',\n\t\t},\n\t},\n\tprojects: {\n\t\tNOT_FOUND: 'Project not found',\n\t\tALREADY_EXISTS: 'There is another project in this organization using the same project name. Choose a different one',\n\t\tCANNOT_LIST: 'You are not allowed to list projects',\n\t\tCANNOT_GET: 'You are not allowed to get a project',\n\t\tCANNOT_CREATE: 'You are not allowed to create a new project',\n\t\tCANNOT_UPDATE: 'You are not allowed to update this project',\n\t\tCANNOT_DELETE: 'You are not allowed to remove this project',\n\t},\n\tfiles: {\n\t\tNOT_FOUND: 'Select a file to update',\n\t\tMAX_SIZE: 'Your avatar must have less than 2mb',\n\t\tPROCESSING: 'An unexpected error occurred while processing your file', \n\t\tFORMAT: 'The file selected is not a valid image',\n\t\tUPLOAD: 'An unexpected error occurred during file upload',\n\t\tDELETE: 'An unexpected error occurred during file removal',\n\t}\n}\n","export class BadRequestError extends Error {}\n","export class UnauthorizedError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message ?? 'Unauthorized.')\n\t}\n}\n","import { FastifyInstance } from 'fastify'\nimport fastifyPlugin from 'fastify-plugin'\n\nimport { errors } from '@/errors/messages'\nimport { prisma } from '@/lib/prisma'\n\nimport { UnauthorizedError } from '../routes/_errors/unauthorized-error'\n\nexport const auth = fastifyPlugin(async (app: FastifyInstance) => {\n\tapp.addHook('preHandler', async (request) => {\n\t\trequest.getCurrentUserId = async () => {\n\t\t\ttry {\n\t\t\t\tconst { sub } = await request.jwtVerify<{ sub: string }>()\n\n\t\t\t\treturn sub\n\t\t\t} catch (error) {\n\t\t\t\tthrow new UnauthorizedError(errors.auth.INVALID_TOKEN)\n\t\t\t}\n\t\t}\n\n\t\trequest.getCurrentUserMembership = async (slug: string) => {\n\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\tconst member = await prisma.member.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\tuserId,\n\t\t\t\t\torganization: {\n\t\t\t\t\t\tslug,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tinclude: {\n\t\t\t\t\torganization: true,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tif (!member) {\n\t\t\t\tthrow new UnauthorizedError(errors.organizations.members.CANNOT_ACCESS)\n\t\t\t}\n\n\t\t\tconst { organization, ...membership } = member\n\n\t\t\treturn {\n\t\t\t\torganization,\n\t\t\t\tmembership,\n\t\t\t}\n\t\t}\n\t})\n})\n","import { PrismaClient } from '@prisma/client'\n\nexport const prisma = new PrismaClient()\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function deleteEmailChangeToken(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.delete(\n\t\t\t'/users/email',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Account'],\n\t\t\t\t\tsummary: 'Delete an open validation change to user e-mail.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst token = await prisma.token.deleteMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tuserId,\n\t\t\t\t\t\ttype: 'EMAIL_CHANGE_VALIDATION',\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!token) {\n\t\t\t\t\tthrow new BadRequestError(errors.user.EMAIL_VALIDATION_EXPIRED)\n\t\t\t\t}\n\n\t\t\t\treturn reply.status(204).send({\n\t\t\t\t\ttoken,\n\t\t\t\t})\n\t\t\t},\n\t\t)\n}\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { z } from 'zod'\n\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { tokensSchema } from '@/schemas/tokens-schema'\n\nexport async function checkEmailChange(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.get(\n\t\t\t'/users/email',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Account'],\n\t\t\t\t\tsummary:\n\t\t\t\t\t\t'Check if there is an open validation change to user e-mail.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t200: z.object({\n\t\t\t\t\t\t\ttoken: z\n\t\t\t\t\t\t\t\t.object({\n\t\t\t\t\t\t\t\t\tuserId: z.string().uuid(),\n\t\t\t\t\t\t\t\t\ttype: tokensSchema,\n\t\t\t\t\t\t\t\t\tpayload: z.string().email().nullable(),\n\t\t\t\t\t\t\t\t\tcreatedAt: z.date(),\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.nullable(),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst token = await prisma.token.findFirst({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tuserId,\n\t\t\t\t\t\ttype: 'EMAIL_CHANGE_VALIDATION',\n\t\t\t\t\t},\n\t\t\t\t\tselect: {\n\t\t\t\t\t\ttype: true,\n\t\t\t\t\t\tcreatedAt: true,\n\t\t\t\t\t\tpayload: true,\n\t\t\t\t\t\tuserId: true,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treturn reply.status(200).send({\n\t\t\t\t\ttoken,\n\t\t\t\t})\n\t\t\t},\n\t\t)\n}\n","import z from 'zod'\n\nexport const tokensSchema = z.enum([\n\t'PASSWORD_RECOVER',\n\t'EMAIL_VALIDATION',\n\t'EMAIL_CHANGE_VALIDATION',\n])\n","import dayjs from 'dayjs'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function confirmEmailChangeToken(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.patch(\n\t\t\t'/users/email',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Account'],\n\t\t\t\t\tsummary: 'Confirm user e-mail change.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tbody: z.object({\n\t\t\t\t\t\tcode: z.string().uuid(),\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst token = await prisma.token.findFirst({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tuserId,\n\t\t\t\t\t\ttype: 'EMAIL_CHANGE_VALIDATION',\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!token) {\n\t\t\t\t\tthrow new BadRequestError(errors.user.EMAIL_VALIDATION_EXPIRED)\n\t\t\t\t}\n\n\t\t\t\tconst { code } = request.body\n\n\t\t\t\tif (code !== token.id) {\n\t\t\t\t\tthrow new BadRequestError(errors.user.EMAIL_VALIDATION_INVALID)\n\t\t\t\t}\n\n\t\t\t\tconst tokenWasCreatedAt = dayjs(token.createdAt)\n\t\t\t\tconst wasTokenCreatedWithin5Minutes =\n\t\t\t\t\tdayjs().diff(tokenWasCreatedAt, 'minutes') <= 5\n\n\t\t\t\tif (!wasTokenCreatedWithin5Minutes) {\n\t\t\t\t\tawait prisma.token.delete({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\tid: token.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\n\t\t\t\t\tthrow new BadRequestError(errors.user.EMAIL_VALIDATION_EXPIRED)\n\t\t\t\t}\n\n\t\t\t\tawait prisma.$transaction([\n\t\t\t\t\tprisma.user.update({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\tid: userId,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\temail: token.payload!,\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t\tprisma.token.delete({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\tid: token.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t])\n\n\t\t\t\treturn reply.status(204).send()\n\t\t\t},\n\t\t)\n}\n","import {\n\tDeleteObjectCommand,\n\tDeleteObjectsCommand,\n\tPutObjectCommand,\n\tS3Client,\n} from '@aws-sdk/client-s3'\nimport { env } from '@saas/env'\n\nexport const R2 = new S3Client({\n\tendpoint: env.CLOUDFLARE_ENDPOINT,\n\tregion: env.CLOUDFLARE_REGION,\n\tcredentials: {\n\t\taccessKeyId: env.CLOUDFLARE_ACCESS_KEY,\n\t\tsecretAccessKey: env.CLOUDFLARE_SECRET_KEY,\n\t},\n})\n\nexport async function putObjectR2(\n\tfileName: string,\n\tcontentType: string,\n\tfileBuffer: Buffer,\n) {\n\tawait R2.send(\n\t\tnew PutObjectCommand({\n\t\t\tBucket: env.CLOUDFLARE_BUCKET,\n\t\t\tKey: fileName,\n\t\t\tContentType: contentType,\n\t\t\tBody: fileBuffer,\n\t\t}),\n\t)\n}\n\nexport async function deleteObjectR2(fileName: string) {\n\tawait R2.send(\n\t\tnew DeleteObjectCommand({\n\t\t\tBucket: env.CLOUDFLARE_BUCKET,\n\t\t\tKey: fileName,\n\t\t}),\n\t)\n}\n\nexport async function deleteMultipleObjectsR2(filenames: string[]) {\n\tif (filenames.length) {\n\t\tawait R2.send(\n\t\t\tnew DeleteObjectsCommand({\n\t\t\t\tBucket: env.CLOUDFLARE_BUCKET,\n\t\t\t\tDelete: {\n\t\t\t\t\tObjects: filenames.map((fileName) => {\n\t\t\t\t\t\treturn { Key: fileName }\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t}),\n\t\t)\n\t}\n}\n","export function getUploadedAvatarNames(avatars: string[]) {\n\tconst validAvatars = avatars\n\t\t.filter((avatar) => avatar.startsWith('{AWS}/'))\n\t\t.map((avatar) => {\n\t\t\treturn avatar.replace('{AWS}/', '')\n\t\t})\n\n\treturn validAvatars\n}\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\n\nimport { auth } from '@/http/middlewares/auth'\nimport { deleteMultipleObjectsR2 } from '@/lib/cloudflare-r2'\nimport { prisma } from '@/lib/prisma'\nimport { getUploadedAvatarNames } from '@/utils/get-uploaded-avatar-names'\n\nexport async function deleteAccount(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.delete(\n\t\t\t'/users',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Account'],\n\t\t\t\t\tsummary: 'Delete account.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst user = await prisma.user.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: userId,\n\t\t\t\t\t},\n\t\t\t\t\tinclude: {\n\t\t\t\t\t\townsOrganizations: {\n\t\t\t\t\t\t\tinclude: {\n\t\t\t\t\t\t\t\tprojects: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\t// filter uploaded avatars\n\t\t\t\tconst avatars: string[] = []\n\n\t\t\t\tif (user?.avatarUrl) {\n\t\t\t\t\tavatars.push(user.avatarUrl)\n\t\t\t\t}\n\n\t\t\t\tif (user?.ownsOrganizations.length) {\n\t\t\t\t\tuser.ownsOrganizations\n\t\t\t\t\t\t.filter((organization) => !!organization.avatarUrl)\n\t\t\t\t\t\t.map((organization) => {\n\t\t\t\t\t\t\tavatars.push(organization.avatarUrl!)\n\n\t\t\t\t\t\t\torganization.projects\n\t\t\t\t\t\t\t\t.filter((project) => !!project.avatarUrl)\n\t\t\t\t\t\t\t\t.map((project) => avatars.push(project.avatarUrl!))\n\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tconst uploadedAvatars = getUploadedAvatarNames(avatars)\n\n\t\t\t\t// delete user related avatars\n\t\t\t\tawait prisma.avatar.deleteMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\tin: uploadedAvatars,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\t// delete user related avatars files\n\t\t\t\tawait deleteMultipleObjectsR2(uploadedAvatars)\n\n\t\t\t\t// delete user\n\t\t\t\tawait prisma.user.delete({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: userId,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treply.status(200).send()\n\t\t\t},\n\t\t)\n}\n","import dayjs from 'dayjs'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { z } from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { accountProvidersSchema } from '@/schemas/account-providers-schema'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function getProfile(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.get(\n\t\t\t'/profile',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Account'],\n\t\t\t\t\tsummary: 'Get authenticated user profile.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t200: z.object({\n\t\t\t\t\t\t\tuser: z.object({\n\t\t\t\t\t\t\t\tid: z.string().uuid(),\n\t\t\t\t\t\t\t\tname: z.string().nullable(),\n\t\t\t\t\t\t\t\temail: z.string().email(),\n\t\t\t\t\t\t\t\tavatarUrl: z.string().nullable(),\n\t\t\t\t\t\t\t\tpasswordHash: z.boolean(),\n\t\t\t\t\t\t\t\taccounts: z.array(\n\t\t\t\t\t\t\t\t\tz.object({\n\t\t\t\t\t\t\t\t\t\tid: z.string().uuid(),\n\t\t\t\t\t\t\t\t\t\tprovider: accountProvidersSchema,\n\t\t\t\t\t\t\t\t\t\tcreatedAt: z.date(),\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst user = await prisma.user.findUnique({\n\t\t\t\t\twhere: { id: userId },\n\t\t\t\t\tselect: {\n\t\t\t\t\t\tid: true,\n\t\t\t\t\t\tname: true,\n\t\t\t\t\t\temail: true,\n\t\t\t\t\t\tavatarUrl: true,\n\t\t\t\t\t\tpasswordHash: true,\n\t\t\t\t\t\taccounts: {\n\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\tid: true,\n\t\t\t\t\t\t\t\tprovider: true,\n\t\t\t\t\t\t\t\tcreatedAt: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!user) {\n\t\t\t\t\tthrow new BadRequestError(errors.user.NOT_FOUND)\n\t\t\t\t}\n\n\t\t\t\tconst hasAnEmailChangePending = await prisma.token.findFirst({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tuserId: user.id,\n\t\t\t\t\t\ttype: 'EMAIL_CHANGE_VALIDATION',\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (hasAnEmailChangePending) {\n\t\t\t\t\tconst tokenWasCreatedAt = dayjs(hasAnEmailChangePending.createdAt)\n\t\t\t\t\tconst wasTokenCreatedWithin5Minutes =\n\t\t\t\t\t\tdayjs().diff(tokenWasCreatedAt, 'minutes') <= 5\n\n\t\t\t\t\tif (!wasTokenCreatedWithin5Minutes) {\n\t\t\t\t\t\tawait prisma.token.delete({\n\t\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\t\tid: hasAnEmailChangePending.id,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn reply.status(200).send({\n\t\t\t\t\tuser: {\n\t\t\t\t\t\t...user,\n\t\t\t\t\t\tpasswordHash: !!user.passwordHash,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t},\n\t\t)\n}\n","import z from 'zod'\n\nexport const accountProvidersSchema = z.enum(['GITHUB', 'GOOGLE'])\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function leaveOrganization(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.delete(\n\t\t\t'/users/organizations/:organization',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Account'],\n\t\t\t\t\tsummary: 'Leave a organization.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\torganization: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t200: z.null(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { organization: organizationSlug } = request.params\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst { organization, membership } =\n\t\t\t\t\tawait request.getCurrentUserMembership(organizationSlug)\n\n\t\t\t\tif (userId === organization.ownerId) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.entity.CANNOT_LEAVE)\n\t\t\t\t}\n\n\t\t\t\tawait prisma.member.delete({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: membership.id,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treturn reply.status(200).send()\n\t\t\t},\n\t\t)\n}\n","/* eslint-disable prettier/prettier */\nimport { env } from '@saas/env'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { z } from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\n\nimport { BadRequestError } from '../../_errors/bad-request-error'\n\n\nexport async function connectGitHub(app: FastifyInstance) {\n\tapp.withTypeProvider<ZodTypeProvider>().register(auth).post(\n\t\t'/users/accounts/github',\n\t\t{\n\t\t\tschema: {\n\t\t\t\ttags: ['Auth'],\n\t\t\t\tsummary: 'Authenticate with GitHub and connect to current account.',\n\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\tbody: z.object({\n\t\t\t\t\tcode: z.string(),\n\t\t\t\t}),\n\t\t\t},\n\t\t},\n\t\tasync (request, reply) => {\n\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\tconst { code } = request.body\n\n\t\t\t/**\n\t\t\t* Authorize\n\t\t\t*/\n\t\t\tconst githubOAuthURL = new URL('https://github.com/login/oauth/access_token')\n\n\t\t\tgithubOAuthURL.searchParams.set('client_id', env.GITHUB_OAUTH_CLIENT_ID)\n\t\t\tgithubOAuthURL.searchParams.set('client_secret', env.GITHUB_OAUTH_CLIENT_SECRET)\n\t\t\tgithubOAuthURL.searchParams.set('redirect_uri', env.GITHUB_OAUTH_CLIENT_REDIRECT_URI)\n\t\t\tgithubOAuthURL.searchParams.set('code', code)\n\n\t\t\tconst githubAccessTokenResponse = await fetch(githubOAuthURL, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAccept: 'application/json',\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tconst githubAccessTokenData = await githubAccessTokenResponse.json()\n\n\t\t\tconst { access_token: GitHubAccessToken } = z\n\t\t\t\t.object({\n\t\t\t\t\taccess_token: z.string(),\n\t\t\t\t\ttoken_type: z.literal('bearer'),\n\t\t\t\t\tscope: z.string(),\n\t\t\t\t})\n\t\t\t\t.parse(githubAccessTokenData)\n\t\t\t\n\t\t\t/**\n\t\t\t* Fetch\n\t\t\t*/\n\t\t\tconst githubUserResponse = await fetch('https://api.github.com/user', {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${GitHubAccessToken}`,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tconst githubUserData = await githubUserResponse.json()\n\n\t\t\tconst { id: githubId } = z\n\t\t\t\t.object({\n\t\t\t\t\tid: z.coerce.number().int().transform(String),\n\t\t\t\t})\n\t\t\t\t.parse(githubUserData)\n\t\t\t\n\n\t\t\t/**\n\t\t\t* Actions\n\t\t\t*/\n\t\t\tconst providerAlreadyInUseByUser = await prisma.account.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\tprovider_userId: {\n\t\t\t\t\t\tprovider: 'GITHUB',\n\t\t\t\t\t\tuserId\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tif (providerAlreadyInUseByUser) {\n\t\t\t\tthrow new BadRequestError(errors.services.GITHUB_ALREADY_CONNECTED)\n\t\t\t}\n\n\t\t\tconst accountAlreadyInUseBySomeoneElse = await prisma.account.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\tprovider_providerAccountId: {\n\t\t\t\t\t\tprovider: 'GITHUB',\n\t\t\t\t\t\tproviderAccountId: githubId\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tif (accountAlreadyInUseBySomeoneElse) {\n\t\t\t\tthrow new BadRequestError(errors.services.GITHUB_ALREADY_CONNECTED_SOMEONE_ELSE)\n\t\t\t}\n\n\t\t\tawait prisma.account.create({\n\t\t\t\tdata: {\n\t\t\t\t\tprovider: 'GITHUB',\n\t\t\t\t\tproviderAccountId: githubId,\n\t\t\t\t\tuserId,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\treturn reply.status(201).send()\n\t\t},\n\t)\n}\n","/* eslint-disable prettier/prettier */\nimport { env } from '@saas/env'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { z } from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\n\nimport { BadRequestError } from '../../_errors/bad-request-error'\n\n\nexport async function connectGoogle(app: FastifyInstance) {\n\tapp.withTypeProvider<ZodTypeProvider>().register(auth).post(\n\t\t'/users/accounts/google',\n\t\t{\n\t\t\tschema: {\n\t\t\t\ttags: ['Auth'],\n\t\t\t\tsummary: 'Authenticate with Google and connect to current account.',\n\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\tbody: z.object({\n\t\t\t\t\tcode: z.string(),\n\t\t\t\t}),\n\t\t\t},\n\t\t},\n\t\tasync (request, reply) => {\n\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\tconst { code } = request.body\n\n\t\t\t/**\n\t\t\t* Authorize\n\t\t\t*/\n\t\t\tconst googleOAuthURL = new URL('token', 'https://oauth2.googleapis.com')\n\n\t\t\tgoogleOAuthURL.searchParams.set('code', code)\n\t\t\tgoogleOAuthURL.searchParams.set('client_id', env.GOOGLE_OAUTH_CLIENT_ID)\n\t\t\tgoogleOAuthURL.searchParams.set('client_secret', env.GOOGLE_OAUTH_CLIENT_SECRET)\n\t\t\tgoogleOAuthURL.searchParams.set('redirect_uri', env.GOOGLE_OAUTH_CLIENT_REDIRECT_URI)\n\t\t\tgoogleOAuthURL.searchParams.set('grant_type', 'authorization_code') \n\n\t\t\tconst googleAccessTokenResponse = await fetch(googleOAuthURL, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAccept: 'application/json',\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tconst googleAccessTokenData = await googleAccessTokenResponse.json()\n\n\t\t\tconst { access_token: GoogleAccessToken } = z\n\t\t\t\t.object({\n\t\t\t\t\taccess_token: z.string(),\n\t\t\t\t\texpires_in: z.coerce.number().int(),\n\t\t\t\t\trefresh_token: z.string(),\n\t\t\t\t\tscope: z.string(),\n\t\t\t\t\ttoken_type: z.literal('Bearer'),\n\t\t\t\t\tid_token: z.string(),\n\t\t\t\t})\n\t\t\t\t.parse(googleAccessTokenData)\n\t\t\t\n\t\t\t/**\n\t\t\t* Fetch\n\t\t\t*/\n\t\t\tconst googleUserInfoURL = new URL('oauth2/v3/userinfo', 'https://www.googleapis.com')\n\t\t\tgoogleUserInfoURL.searchParams.set('access_token', GoogleAccessToken)\n\t\t\t\n\t\t\tconst githubUserResponse = await fetch(googleUserInfoURL, {\n\t\t\t\tmethod: 'GET',\n\t\t\t})\n\n\t\t\tconst githubUserData = await githubUserResponse.json()\n\n\t\t\tconst {\n\t\t\t\tsub: googleId,\n\t\t\t} = z\n\t\t\t\t.object({\n\t\t\t\t\tsub: z.string(),\n\t\t\t\t\tname: z.string(),\n\t\t\t\t\tgiven_name: z.string(),\n\t\t\t\t\tpicture: z.string(),\n\t\t\t\t\temail: z.string().email(),\n\t\t\t\t\temail_verified: z.boolean(),\n\t\t\t\t})\n\t\t\t\t.parse(githubUserData)\n\t\t\t\n\n\t\t\t/**\n\t\t\t * Actions\n\t\t\t */\n\t\t\tconst providerAlreadyInUseByUser = await prisma.account.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\tprovider_userId: {\n\t\t\t\t\t\tprovider: 'GOOGLE',\n\t\t\t\t\t\tuserId\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tif (providerAlreadyInUseByUser) {\n\t\t\t\tthrow new BadRequestError(errors.services.GOOGLE_ALREADY_CONNECTED)\n\t\t\t}\n\n\t\t\tconst accountAlreadyInUseBySomeoneElse = await prisma.account.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\tprovider_providerAccountId: {\n\t\t\t\t\t\tprovider: 'GOOGLE',\n\t\t\t\t\t\tproviderAccountId: googleId\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tif (accountAlreadyInUseBySomeoneElse) {\n\t\t\t\tthrow new BadRequestError(errors.services.GOOGLE_ALREADY_CONNECTED_SOMEONE_ELSE)\n\t\t\t}\n\n\t\t\tawait prisma.account.create({\n\t\t\t\tdata: {\n\t\t\t\t\tprovider: 'GOOGLE',\n\t\t\t\t\tproviderAccountId: googleId,\n\t\t\t\t\tuserId,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\treturn reply.status(201).send()\n\t\t},\n\t)\n}\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { z } from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { accountProvidersSchema } from '@/schemas/account-providers-schema'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function removeAccountProvider(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.delete(\n\t\t\t'/users/providers/:provider',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Account'],\n\t\t\t\t\tsummary: 'Delete a authentication provider from your account.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tprovider: accountProvidersSchema,\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\t\t\t\tconst { provider } = request.params\n\n\t\t\t\tconst userWithoutPassword = await prisma.user.findFirst({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: userId,\n\t\t\t\t\t\tpasswordHash: null,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tconst countAccountsAvailable = await prisma.account.count({\n\t\t\t\t\twhere: { userId },\n\t\t\t\t})\n\n\t\t\t\tif (userWithoutPassword && countAccountsAvailable < 2) {\n\t\t\t\t\tthrow new BadRequestError(errors.auth.LAST_METHOD_AVAILABLE)\n\t\t\t\t}\n\n\t\t\t\tconst accountExists = await prisma.account.findFirst({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tuserId,\n\t\t\t\t\t\tprovider,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!accountExists) {\n\t\t\t\t\tthrow new BadRequestError(errors.user.ACCOUNT_NOT_FOUND)\n\t\t\t\t}\n\n\t\t\t\tawait prisma.account.delete({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: accountExists.id,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treply.status(200).send()\n\t\t\t},\n\t\t)\n}\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { z } from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { changeAccountEmail } from '@/http/emails/change-account-email'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function updateAccount(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.put(\n\t\t\t'/users',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Account'],\n\t\t\t\t\tsummary: 'Update account informations.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tbody: z.object({\n\t\t\t\t\t\tname: z.string(),\n\t\t\t\t\t\temail: z.string().email(),\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\t\t\t\tconst { email: newEmail, name } = request.body\n\n\t\t\t\tconst userWithSameEmail = await prisma.user.findFirst({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\temail: newEmail,\n\t\t\t\t\t\tid: {\n\t\t\t\t\t\t\tnot: userId,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (userWithSameEmail) {\n\t\t\t\t\tthrow new BadRequestError(errors.user.ALREADY_EXISTS)\n\t\t\t\t}\n\n\t\t\t\tconst currentUser = await prisma.user.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: userId,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!currentUser) {\n\t\t\t\t\tthrow new BadRequestError(errors.user.NOT_FOUND)\n\t\t\t\t}\n\n\t\t\t\tconst hasAnEmailChangePending = await prisma.token.findFirst({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tuserId,\n\t\t\t\t\t\ttype: 'EMAIL_CHANGE_VALIDATION',\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tconst { email: currentEmail } = currentUser\n\n\t\t\t\tif (currentEmail !== newEmail && !hasAnEmailChangePending) {\n\t\t\t\t\tconst { id: verificationCode } = await prisma.token.create({\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tuserId,\n\t\t\t\t\t\t\ttype: 'EMAIL_CHANGE_VALIDATION',\n\t\t\t\t\t\t\tpayload: newEmail,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait changeAccountEmail({\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\toldEmail: currentEmail,\n\t\t\t\t\t\t\tnewEmail,\n\t\t\t\t\t\t\tcode: verificationCode,\n\t\t\t\t\t\t})\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tthrow new BadRequestError(errors.services.SEND_EMAIL)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait prisma.user.update({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: userId,\n\t\t\t\t\t},\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tname,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treply.status(204).send()\n\t\t\t},\n\t\t)\n}\n","import { env } from '@saas/env'\nimport nodemailer from 'nodemailer'\n\nexport const emailService = nodemailer.createTransport({\n\thost: env.MAIL_SMTP_HOST,\n\tport: env.MAIL_SMTP_PORT,\n\tsecure: true,\n\tauth: {\n\t\tuser: env.MAIL_SMTP_EMAIL,\n\t\tpass: env.MAIL_SMTP_PASSWORD,\n\t},\n})\n","interface VerifyAccountEmailTemplateParams {\n\tname: string | null\n\toldEmail: string\n\tnewEmail: string\n\tcode: string\n\tlink: string\n}\n\nexport function changeAccountEmailTemplate({\n\tname,\n\toldEmail,\n\tnewEmail,\n\tcode,\n\tlink,\n}: VerifyAccountEmailTemplateParams) {\n\treturn `\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tHi, ${name ? name.split(' ').at(0) + '!' : ''}\n\t\t</p>\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tWe received a request to verify your new e-mail address on our platform.\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tYou are about to change your e-mail from ${oldEmail} to ${newEmail}. \n\t\t</p>\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tTo proceed, please use the unique validation code below:\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t<strong>Validation Code:</strong>\n\t\t</p>\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t${code}\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t<i>Note: The code is valid for 5 minutes.</i>\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t<strong>Here’s what to do next:</strong>\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t1. Copy the validation code provided above.\n\t\t</p>\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t2. Click the link to proceed with validation:\n\t\t\t<a href=\"${link}\" style=\"text-decoration:underline;color:currentColor;\">Complete E-mail Verification</a>\n\t\t</p>\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t3. Paste the code when prompted on the verification page.\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tIf you did not request this, you can safely ignore this email.\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tThanks.\n\t\t</p>\n\t`\n}\n","import { env } from '@saas/env'\nimport Mail from 'nodemailer/lib/mailer'\n\nimport { emailService } from '@/lib/mail'\n\nimport { changeAccountEmailTemplate } from './template/change-account-email.template'\n\ninterface ChangeAccountEmailParams {\n\tname: string | null\n\toldEmail: string\n\tnewEmail: string\n\tcode: string\n}\n\nexport async function changeAccountEmail({\n\tname,\n\toldEmail,\n\tnewEmail,\n\tcode,\n}: ChangeAccountEmailParams) {\n\tconst htmlTemplate = changeAccountEmailTemplate({\n\t\tname,\n\t\tcode,\n\t\toldEmail,\n\t\tnewEmail,\n\t\tlink: `${env.NEXT_PUBLIC_URL}/account/settings`,\n\t})\n\n\tconst emailOptions: Mail.Options = {\n\t\tfrom: env.MAIL_SMTP_EMAIL,\n\t\tto: newEmail,\n\t\tsubject: 'Your New Account E-mail Verification Code',\n\t\thtml: htmlTemplate,\n\t}\n\n\tawait emailService.sendMail(emailOptions)\n}\n","import { compare, hash } from 'bcryptjs'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { z } from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { validateStrongPasswordSchema } from '@/schemas/validate-strong-password-schema'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function updatePassword(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.patch(\n\t\t\t'/users/passwords',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Account'],\n\t\t\t\t\tsummary: 'Update or create account password.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tbody: z\n\t\t\t\t\t\t.object({\n\t\t\t\t\t\t\tcurrentPassword: z.string().nullish(),\n\t\t\t\t\t\t\tpassword: z.string(),\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.superRefine(validateStrongPasswordSchema),\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\t\t\t\tconst { currentPassword, password: newPassword } = request.body\n\n\t\t\t\tconst user = await prisma.user.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: userId,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!user) {\n\t\t\t\t\tthrow new BadRequestError(errors.auth.INVALID_CREDENTIALS)\n\t\t\t\t}\n\n\t\t\t\tif (user.passwordHash) {\n\t\t\t\t\tif (!currentPassword) {\n\t\t\t\t\t\tthrow new BadRequestError(errors.auth.INVALID_CREDENTIALS)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst isPasswordValid = await compare(\n\t\t\t\t\t\tcurrentPassword,\n\t\t\t\t\t\tuser.passwordHash,\n\t\t\t\t\t)\n\n\t\t\t\t\tif (!isPasswordValid) {\n\t\t\t\t\t\tthrow new BadRequestError(errors.auth.INVALID_CREDENTIALS)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst hashedPassword = await hash(newPassword, 8)\n\n\t\t\t\tawait prisma.user.update({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: user.id,\n\t\t\t\t\t},\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tpasswordHash: hashedPassword,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treply.status(204).send()\n\t\t\t},\n\t\t)\n}\n","import { z } from 'zod'\n\nimport { errors as messages } from '@/errors/messages'\n\nexport const validateStrongPasswordSchema = (\n\t{ password }: Record<'password', string>,\n\tcheckPassComplexity: z.RefinementCtx,\n) => {\n\tif (!password.length) {\n\t\tcheckPassComplexity.addIssue({\n\t\t\tcode: 'custom',\n\t\t\tpath: ['password'],\n\t\t\tmessage: JSON.stringify({\n\t\t\t\tminLength: {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: messages.auth.PASSWORD_LENGTH,\n\t\t\t\t},\n\t\t\t}),\n\t\t})\n\t}\n\n\tconst hasUppercase = (ch: string) => /[A-Z]/.test(ch)\n\tconst hasLowercase = (ch: string) => /[a-z]/.test(ch)\n\t// eslint-disable-next-line prettier/prettier\n\tconst hasSpecial = (ch: string) => /[`!@#$%^&*()_\\-+=[\\]{};':\"\\\\|,.<>/?~ ]/.test(ch)\n\n\tlet countUppercase = 0\n\tlet countLowercase = 0\n\tlet countNumbers = 0\n\tlet countSpecial = 0\n\n\tfor (let i = 0; i < password.length; i++) {\n\t\tconst ch = password.charAt(i)\n\t\tif (!isNaN(+ch)) countNumbers++\n\t\telse if (hasUppercase(ch)) countUppercase++\n\t\telse if (hasLowercase(ch)) countLowercase++\n\t\telse if (hasSpecial(ch)) countSpecial++\n\t}\n\n\tlet errors = {\n\t\ttotalNumber: {\n\t\t\tvalid: true,\n\t\t\tmessage: messages.auth.PASSWORD_NUMBER,\n\t\t},\n\t\tupperCase: {\n\t\t\tvalid: true,\n\t\t\tmessage: messages.auth.PASSWORD_UPPER,\n\t\t},\n\t\tlowerCase: {\n\t\t\tvalid: true,\n\t\t\tmessage: messages.auth.PASSWORD_LOWER,\n\t\t},\n\t\tspecialCh: {\n\t\t\tvalid: true,\n\t\t\tmessage: messages.auth.PASSWORD_SPECIAL,\n\t\t},\n\t\tminLength: {\n\t\t\tvalid: true,\n\t\t\tmessage: messages.auth.PASSWORD_LENGTH,\n\t\t},\n\t}\n\n\tif (countNumbers < 1) {\n\t\terrors = {\n\t\t\t...errors,\n\t\t\ttotalNumber: { ...errors.totalNumber, valid: false },\n\t\t}\n\t}\n\n\tif (countUppercase < 1) {\n\t\terrors = {\n\t\t\t...errors,\n\t\t\tupperCase: {\n\t\t\t\t...errors.upperCase,\n\t\t\t\tvalid: false,\n\t\t\t},\n\t\t}\n\t}\n\n\tif (countLowercase < 1) {\n\t\terrors = {\n\t\t\t...errors,\n\t\t\tlowerCase: {\n\t\t\t\t...errors.lowerCase,\n\t\t\t\tvalid: false,\n\t\t\t},\n\t\t}\n\t}\n\n\tif (countSpecial < 1) {\n\t\terrors = {\n\t\t\t...errors,\n\t\t\tspecialCh: {\n\t\t\t\t...errors.specialCh,\n\t\t\t\tvalid: false,\n\t\t\t},\n\t\t}\n\t}\n\n\tif (password.length < 6) {\n\t\terrors = {\n\t\t\t...errors,\n\t\t\tminLength: {\n\t\t\t\t...errors.minLength,\n\t\t\t\tvalid: false,\n\t\t\t},\n\t\t}\n\t}\n\n\tif (\n\t\tcountNumbers < 1 ||\n\t\tcountUppercase < 1 ||\n\t\tcountLowercase < 1 ||\n\t\tcountSpecial < 1 ||\n\t\tpassword.length < 6\n\t) {\n\t\tcheckPassComplexity.addIssue({\n\t\t\tcode: 'custom',\n\t\t\tpath: ['password'],\n\t\t\tmessage: JSON.stringify(errors),\n\t\t})\n\t}\n}\n","/* eslint-disable prettier/prettier */\nimport { env } from '@saas/env'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { z } from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { prisma } from '@/lib/prisma'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function authenticateWithGitHub(app: FastifyInstance) {\n\tapp.withTypeProvider<ZodTypeProvider>().post(\n\t\t'/sessions/github',\n\t\t{\n\t\t\tschema: {\n\t\t\t\ttags: ['Auth'],\n\t\t\t\tsummary: 'Authenticate with GitHub.',\n\t\t\t\tbody: z.object({\n\t\t\t\t\tcode: z.string(),\n\t\t\t\t}),\n\t\t\t\tresponse: {\n\t\t\t\t\t201: z.object({\n\t\t\t\t\t\ttoken: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tasync (request, reply) => {\n\t\t\tconst { code } = request.body\n\n\t\t\t/**\n\t\t\t * Authorize\n\t\t\t */\n\t\t\tconst githubOAuthURL = new URL('https://github.com/login/oauth/access_token')\n\n\t\t\tgithubOAuthURL.searchParams.set('client_id', env.GITHUB_OAUTH_CLIENT_ID)\n\t\t\tgithubOAuthURL.searchParams.set('client_secret', env.GITHUB_OAUTH_CLIENT_SECRET)\n\t\t\tgithubOAuthURL.searchParams.set('redirect_uri', env.GITHUB_OAUTH_CLIENT_REDIRECT_URI)\n\t\t\tgithubOAuthURL.searchParams.set('code', code)\n\n\t\t\tconst githubAccessTokenResponse = await fetch(githubOAuthURL, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAccept: 'application/json',\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tconst githubAccessTokenData = await githubAccessTokenResponse.json()\n\n\t\t\tconst { access_token: GitHubAccessToken } = z\n\t\t\t\t.object({\n\t\t\t\t\taccess_token: z.string(),\n\t\t\t\t\ttoken_type: z.literal('bearer'),\n\t\t\t\t\tscope: z.string(),\n\t\t\t\t})\n\t\t\t\t.parse(githubAccessTokenData)\n\t\t\t\n\t\t\t/**\n\t\t\t* Fetch\n\t\t\t*/\n\t\t\tconst githubUserResponse = await fetch('https://api.github.com/user', {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${GitHubAccessToken}`,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tconst githubUserData = await githubUserResponse.json()\n\n\t\t\tconst {\n\t\t\t\tid: githubId,\n\t\t\t\tname,\n\t\t\t\temail,\n\t\t\t\tavatar_url: avatarUrl,\n\t\t\t} = z\n\t\t\t\t.object({\n\t\t\t\t\tid: z.coerce.number().int().transform(String),\n\t\t\t\t\tavatar_url: z.string().url(),\n\t\t\t\t\tname: z.string().nullable(),\n\t\t\t\t\temail: z.string().email().nullable(),\n\t\t\t\t})\n\t\t\t\t.parse(githubUserData)\n\n\t\t\t/**\n\t\t\t * Actions\n\t\t\t */\n\t\t\tif (email === null) {\n\t\t\t\tthrow new BadRequestError(errors.auth.GITHUB_EMAIL_NOT_FOUND)\n\t\t\t}\n\n\t\t\tlet token: string\n\n\t\t\tlet account = await prisma.account.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\tprovider_providerAccountId: {\n\t\t\t\t\t\tprovider: 'GITHUB',\n\t\t\t\t\t\tproviderAccountId: githubId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\t/**\n\t\t\t * If account already connected, sign-in\n\t\t\t */\n\t\t\tif (account) {\n\t\t\t\ttoken = await reply.jwtSign(\n\t\t\t\t\t{\n\t\t\t\t\t\tsub: account.userId,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\texpiresIn: '7d',\n\t\t\t\t\t},\n\t\t\t\t)\n\n\t\t\t\treturn reply.status(201).send({ token })\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * If account not connected, sign-in\n\t\t\t */\n\t\t\tlet user = await prisma.user.findUnique({\n\t\t\t\twhere: { email },\n\t\t\t})\n\n\t\t\tif (!user) {\n\t\t\t\tuser = await prisma.user.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\temail,\n\t\t\t\t\t\temailValidatedAt: new Date(),\n\t\t\t\t\t\tavatarUrl,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\n\t\t\taccount = await prisma.account.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\tprovider_userId: {\n\t\t\t\t\t\tprovider: 'GITHUB',\n\t\t\t\t\t\tuserId: user.id,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tif (!account) {\n\t\t\t\taccount = await prisma.account.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tprovider: 'GITHUB',\n\t\t\t\t\t\tproviderAccountId: githubId,\n\t\t\t\t\t\tuserId: user.id,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\n\t\t\ttoken = await reply.jwtSign(\n\t\t\t\t{\n\t\t\t\t\tsub: user.id,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\texpiresIn: '7d',\n\t\t\t\t},\n\t\t\t)\n\n\t\t\treturn reply.status(201).send({ token })\n\t\t},\n\t)\n}\n","/* eslint-disable prettier/prettier */\nimport { env } from '@saas/env'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { z } from 'zod'\n\nimport { prisma } from '@/lib/prisma'\n\n\nexport async function authenticateWithGoogle(app: FastifyInstance) {\n\tapp.withTypeProvider<ZodTypeProvider>().post(\n\t\t'/sessions/google',\n\t\t{\n\t\t\tschema: {\n\t\t\t\ttags: ['Auth'],\n\t\t\t\tsummary: 'Authenticate with Google.',\n\t\t\t\tbody: z.object({\n\t\t\t\t\tcode: z.string(),\n\t\t\t\t}),\n\t\t\t\tresponse: {\n\t\t\t\t\t201: z.object({\n\t\t\t\t\t\ttoken: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tasync (request, reply) => {\n\t\t\tconst { code } = request.body\n\n\t\t\t/**\n\t\t\t * Authorize\n\t\t\t */\n\t\t\tconst googleOAuthURL = new URL('token', 'https://oauth2.googleapis.com')\n\n\t\t\tgoogleOAuthURL.searchParams.set('code', code)\n\t\t\tgoogleOAuthURL.searchParams.set('client_id', env.GOOGLE_OAUTH_CLIENT_ID)\n\t\t\tgoogleOAuthURL.searchParams.set('client_secret', env.GOOGLE_OAUTH_CLIENT_SECRET)\n\t\t\tgoogleOAuthURL.searchParams.set('redirect_uri', env.GOOGLE_OAUTH_CLIENT_REDIRECT_URI)\n\t\t\tgoogleOAuthURL.searchParams.set('grant_type', 'authorization_code') \n\n\t\t\tconst googleAccessTokenResponse = await fetch(googleOAuthURL, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAccept: 'application/json',\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tconst googleAccessTokenData = await googleAccessTokenResponse.json()\n\n\t\t\tconst { access_token: GoogleAccessToken } = z\n\t\t\t\t.object({\n\t\t\t\t\taccess_token: z.string(),\n\t\t\t\t\texpires_in: z.coerce.number().int(),\n\t\t\t\t\trefresh_token: z.string(),\n\t\t\t\t\tscope: z.string(),\n\t\t\t\t\ttoken_type: z.literal('Bearer'),\n\t\t\t\t\tid_token: z.string(),\n\t\t\t\t})\n\t\t\t\t.parse(googleAccessTokenData)\n\t\t\t\n\t\t\t/**\n\t\t\t * Fetch\n\t\t\t */\n\t\t\tconst googleUserInfoURL = new URL('oauth2/v3/userinfo', 'https://www.googleapis.com')\n\t\t\tgoogleUserInfoURL.searchParams.set('access_token', GoogleAccessToken)\n\t\t\t\n\t\t\tconst githubUserResponse = await fetch(googleUserInfoURL, {\n\t\t\t\tmethod: 'GET',\n\t\t\t})\n\n\t\t\tconst githubUserData = await githubUserResponse.json()\n\n\t\t\tconst {\n\t\t\t\tsub: googleId,\n\t\t\t\tname,\n\t\t\t\temail,\n\t\t\t\tpicture: avatarUrl,\n\t\t\t} = z\n\t\t\t\t.object({\n\t\t\t\t\tsub: z.string(),\n\t\t\t\t\tname: z.string(),\n\t\t\t\t\tgiven_name: z.string(),\n\t\t\t\t\tpicture: z.string(),\n\t\t\t\t\temail: z.string().email(),\n\t\t\t\t\temail_verified: z.boolean(),\n\t\t\t\t})\n\t\t\t\t.parse(githubUserData)\n\n\t\t\t/**\n\t\t\t * Actions\n\t\t\t */\n\t\t\tlet token: string\n\n\t\t\tlet account = await prisma.account.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\tprovider_providerAccountId: {\n\t\t\t\t\t\tprovider: 'GOOGLE',\n\t\t\t\t\t\tproviderAccountId: googleId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\t/**\n\t\t\t * If account already connected, sign-in\n\t\t\t */\n\t\t\tif (account) {\n\t\t\t\ttoken = await reply.jwtSign(\n\t\t\t\t\t{\n\t\t\t\t\t\tsub: account.userId,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\texpiresIn: '7d',\n\t\t\t\t\t},\n\t\t\t\t)\n\n\t\t\t\treturn reply.status(201).send({ token })\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * If account not connected, sign-in\n\t\t\t */\n\t\t\tlet user = await prisma.user.findUnique({\n\t\t\t\twhere: { email },\n\t\t\t})\n\n\t\t\tif (!user) {\n\t\t\t\tuser = await prisma.user.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\temail,\n\t\t\t\t\t\temailValidatedAt: new Date(),\n\t\t\t\t\t\tavatarUrl,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\n\t\t\taccount = await prisma.account.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\tprovider_userId: {\n\t\t\t\t\t\tprovider: 'GOOGLE',\n\t\t\t\t\t\tuserId: user.id,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tif (!account) {\n\t\t\t\taccount = await prisma.account.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tprovider: 'GOOGLE',\n\t\t\t\t\t\tproviderAccountId: googleId,\n\t\t\t\t\t\tuserId: user.id,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\n\t\t\ttoken = await reply.jwtSign(\n\t\t\t\t{\n\t\t\t\t\tsub: user.id,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\texpiresIn: '7d',\n\t\t\t\t},\n\t\t\t)\n\n\t\t\treturn reply.status(201).send({ token })\n\t\t},\n\t)\n}\n","import { compare } from 'bcryptjs'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { z } from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { prisma } from '@/lib/prisma'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function authenticateWithPassword(app: FastifyInstance) {\n\tapp.withTypeProvider<ZodTypeProvider>().post(\n\t\t'/sessions/password',\n\t\t{\n\t\t\tschema: {\n\t\t\t\ttags: ['Auth'],\n\t\t\t\tsummary: 'Authenticate with e-mail and password.',\n\t\t\t\tbody: z.object({\n\t\t\t\t\temail: z.string().email(),\n\t\t\t\t\tpassword: z.string(),\n\t\t\t\t}),\n\t\t\t\tresponse: {\n\t\t\t\t\t201: z.object({\n\t\t\t\t\t\ttoken: z.string(),\n\t\t\t\t\t\temailValidatedAt: z.date().nullable(),\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tasync (request, reply) => {\n\t\t\tconst { email, password } = request.body\n\n\t\t\tconst userFromEmail = await prisma.user.findUnique({\n\t\t\t\twhere: { email },\n\t\t\t})\n\n\t\t\tif (!userFromEmail) {\n\t\t\t\tthrow new BadRequestError(errors.auth.INVALID_CREDENTIALS)\n\t\t\t}\n\n\t\t\tif (userFromEmail.passwordHash === null) {\n\t\t\t\tthrow new BadRequestError(errors.auth.NOT_PASSWORD_FOUND)\n\t\t\t}\n\n\t\t\tconst isPasswordValid = await compare(\n\t\t\t\tpassword,\n\t\t\t\tuserFromEmail.passwordHash,\n\t\t\t)\n\n\t\t\tif (!isPasswordValid) {\n\t\t\t\tthrow new BadRequestError(errors.auth.INVALID_CREDENTIALS)\n\t\t\t}\n\n\t\t\tconst token = await reply.jwtSign(\n\t\t\t\t{\n\t\t\t\t\tsub: userFromEmail.id,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\texpiresIn: '7d',\n\t\t\t\t},\n\t\t\t)\n\n\t\t\treturn reply.status(201).send({\n\t\t\t\ttoken,\n\t\t\t\temailValidatedAt: userFromEmail.emailValidatedAt,\n\t\t\t})\n\t\t},\n\t)\n}\n","import { hash } from 'bcryptjs'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { z } from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { verifyAccountEmail } from '@/http/emails/verify-account-email'\nimport { prisma } from '@/lib/prisma'\nimport { validateStrongPasswordSchema } from '@/schemas/validate-strong-password-schema'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function createAccount(app: FastifyInstance) {\n\tapp.withTypeProvider<ZodTypeProvider>().post(\n\t\t'/users',\n\t\t{\n\t\t\tschema: {\n\t\t\t\ttags: ['Auth'],\n\t\t\t\tsummary: 'Create a new account.',\n\t\t\t\tbody: z\n\t\t\t\t\t.object({\n\t\t\t\t\t\tname: z.string(),\n\t\t\t\t\t\temail: z.string().email(),\n\t\t\t\t\t\tpassword: z.string(),\n\t\t\t\t\t})\n\t\t\t\t\t.superRefine(validateStrongPasswordSchema),\n\t\t\t},\n\t\t},\n\t\tasync (request, reply) => {\n\t\t\tconst { email, name, password } = request.body\n\n\t\t\tconst userWithSameEmail = await prisma.user.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\temail,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tif (userWithSameEmail) {\n\t\t\t\tthrow new BadRequestError(errors.user.ALREADY_EXISTS)\n\t\t\t}\n\n\t\t\tconst autoJoinOrganization = await prisma.organization.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\tdomain: email.split('@').at(1),\n\t\t\t\t\tshouldAttachUsersByDomain: true,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tconst hashedPassword = await hash(password, 8)\n\n\t\t\tconst { id: userId } = await prisma.user.create({\n\t\t\t\tdata: {\n\t\t\t\t\tname,\n\t\t\t\t\temail,\n\t\t\t\t\tpasswordHash: hashedPassword,\n\t\t\t\t\tmemberOn: autoJoinOrganization\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tcreate: {\n\t\t\t\t\t\t\t\t\torganizationId: autoJoinOrganization.id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: undefined,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tconst { id: verificationCode } = await prisma.token.create({\n\t\t\t\tdata: {\n\t\t\t\t\tuserId,\n\t\t\t\t\ttype: 'EMAIL_VALIDATION',\n\t\t\t\t},\n\t\t\t})\n\n\t\t\ttry {\n\t\t\t\tawait verifyAccountEmail({\n\t\t\t\t\tname,\n\t\t\t\t\temail,\n\t\t\t\t\tcode: verificationCode,\n\t\t\t\t})\n\t\t\t} catch {\n\t\t\t\tthrow new BadRequestError(errors.services.SEND_EMAIL)\n\t\t\t}\n\n\t\t\treply.status(201).send()\n\t\t},\n\t)\n}\n","interface VerifyAccountEmailTemplateParams {\n\tname: string | null\n\tcode: string\n\tlink: string\n}\n\nexport function verifyAccountEmailTemplate({\n\tname,\n\tcode,\n\tlink,\n}: VerifyAccountEmailTemplateParams) {\n\treturn `\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tHi, ${name ? name.split(' ').at(0) + '!' : ''}\n\t\t</p>\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tWe received a request to verify your e-mail address on our platform. To proceed, please use the unique validation code below:\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t<strong>Validation Code:</strong>\n\t\t</p>\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t${code}\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t<i>Note: The code is valid for 5 minutes.</i>\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t<strong>Here’s what to do next:</strong>\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t1. Copy the validation code provided above.\n\t\t</p>\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t2. Click the link to proceed with validation:\n\t\t\t<a href=\"${link}\" style=\"text-decoration:underline;color:currentColor;\">Complete E-mail Verification</a>\n\t\t</p>\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t3. Paste the code when prompted on the verification page.\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tIf you did not request this, you can safely ignore this email.\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tThanks.\n\t\t</p>\n\t`\n}\n","import { env } from '@saas/env'\nimport Mail from 'nodemailer/lib/mailer'\n\nimport { emailService } from '@/lib/mail'\n\nimport { verifyAccountEmailTemplate } from './template/verify-account-email.template'\n\ninterface VerifyAccountEmailParams {\n\tname: string | null\n\temail: string\n\tcode: string\n}\n\nexport async function verifyAccountEmail({\n\tname,\n\temail,\n\tcode,\n}: VerifyAccountEmailParams) {\n\tconst htmlTemplate = verifyAccountEmailTemplate({\n\t\tname,\n\t\tcode,\n\t\tlink: `${env.NEXT_PUBLIC_URL}/auth/verify-email?email=${email}&code=${code}`,\n\t})\n\n\tconst emailOptions: Mail.Options = {\n\t\tfrom: env.MAIL_SMTP_EMAIL,\n\t\tto: email,\n\t\tsubject: 'Your Account E-mail Verification Code',\n\t\thtml: htmlTemplate,\n\t}\n\n\tawait emailService.sendMail(emailOptions)\n}\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { z } from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { passwordRecoverEmail } from '@/http/emails/password-recover-email'\nimport { prisma } from '@/lib/prisma'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function requestPasswordRecover(app: FastifyInstance) {\n\tapp.withTypeProvider<ZodTypeProvider>().post(\n\t\t'/password/recover',\n\t\t{\n\t\t\tschema: {\n\t\t\t\ttags: ['Auth'],\n\t\t\t\tsummary: 'Request password recover.',\n\t\t\t\tbody: z.object({\n\t\t\t\t\temail: z.string().email(),\n\t\t\t\t}),\n\t\t\t\tresponse: {\n\t\t\t\t\t201: z.null(),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tasync (request, reply) => {\n\t\t\tconst { email } = request.body\n\n\t\t\tconst userWithEmail = await prisma.user.findUnique({\n\t\t\t\twhere: { email },\n\t\t\t})\n\n\t\t\tif (!userWithEmail) {\n\t\t\t\treturn reply.status(201).send()\n\t\t\t}\n\n\t\t\tconst { id: code } = await prisma.token.create({\n\t\t\t\tdata: {\n\t\t\t\t\ttype: 'PASSWORD_RECOVER',\n\t\t\t\t\tuserId: userWithEmail.id,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\ttry {\n\t\t\t\tawait passwordRecoverEmail({\n\t\t\t\t\tname: userWithEmail.name,\n\t\t\t\t\temail,\n\t\t\t\t\tcode,\n\t\t\t\t})\n\t\t\t} catch {\n\t\t\t\tthrow new BadRequestError(errors.services.SEND_EMAIL)\n\t\t\t}\n\n\t\t\treturn reply.status(201).send()\n\t\t},\n\t)\n}\n","interface PasswordRecoverEmailTemplateParams {\n\tname: string | null\n\tcode: string\n\tlink: string\n}\n\nexport function passwordRecoverEmailTemplate({\n\tname,\n\tcode,\n\tlink,\n}: PasswordRecoverEmailTemplateParams) {\n\treturn `\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tHi, ${name ? name.split(' ').at(0) + '!' : ''}\n\t\t</p>\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tWe received a request to reset your password. To proceed, please use the unique recovery code below:\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t<strong>Recovery Code:</strong>\n\t\t</p>\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t${code}\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t<i>Note: The code is valid for 5 minutes.</i>\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t<strong>Here’s what to do next:</strong>\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t1. Copy the recovery code provided above.\n\t\t</p>\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t2. Click the link to proceed with resetting your password:\n\t\t\t<a href=\"${link}\" style=\"text-decoration:underline;color:currentColor;\">Reset Password Link</a>\n\t\t</p>\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t3. Paste the code when prompted on the password reset page.\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tIf you did not request this, you can safely ignore this email.\n\t\t</p>\n\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tThanks.\n\t\t</p>\n\t`\n}\n","import { env } from '@saas/env'\nimport Mail from 'nodemailer/lib/mailer'\n\nimport { emailService } from '@/lib/mail'\n\nimport { passwordRecoverEmailTemplate } from './template/password-recover-email.template'\n\ninterface PasswordRecoverEmailParams {\n\tname: string | null\n\temail: string\n\tcode: string\n}\n\nexport async function passwordRecoverEmail({\n\tname,\n\temail,\n\tcode,\n}: PasswordRecoverEmailParams) {\n\tconst htmlTemplate = passwordRecoverEmailTemplate({\n\t\tname,\n\t\tcode,\n\t\tlink: `${env.NEXT_PUBLIC_URL}/auth/recover-password?email=${email}&code=${code}`,\n\t})\n\n\tconst emailOptions: Mail.Options = {\n\t\tfrom: env.MAIL_SMTP_EMAIL,\n\t\tto: email,\n\t\tsubject: 'Your Password Recovery Code',\n\t\thtml: htmlTemplate,\n\t}\n\n\tawait emailService.sendMail(emailOptions)\n}\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { z } from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { verifyAccountEmail } from '@/http/emails/verify-account-email'\nimport { prisma } from '@/lib/prisma'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function resendEmailValidationCode(app: FastifyInstance) {\n\tapp.withTypeProvider<ZodTypeProvider>().post(\n\t\t'/users/resend-email-validation-code',\n\t\t{\n\t\t\tschema: {\n\t\t\t\ttags: ['Auth'],\n\t\t\t\tsummary: 'Resend a validation code by e-mail.',\n\t\t\t\tbody: z.object({\n\t\t\t\t\temail: z.string().email(),\n\t\t\t\t}),\n\t\t\t\tresponse: {\n\t\t\t\t\t200: z.null(),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tasync (request, reply) => {\n\t\t\tconst { email } = request.body\n\n\t\t\tconst userFromEmail = await prisma.user.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\temail,\n\t\t\t\t\temailValidatedAt: {\n\t\t\t\t\t\tequals: null,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tif (!userFromEmail) {\n\t\t\t\tthrow new BadRequestError(errors.auth.INVALID_CREDENTIALS)\n\t\t\t}\n\n\t\t\tconst { id: validationCode } = await prisma.token.create({\n\t\t\t\tdata: {\n\t\t\t\t\ttype: 'EMAIL_VALIDATION',\n\t\t\t\t\tuserId: userFromEmail.id,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\ttry {\n\t\t\t\tawait verifyAccountEmail({\n\t\t\t\t\tname: userFromEmail.name,\n\t\t\t\t\temail,\n\t\t\t\t\tcode: validationCode,\n\t\t\t\t})\n\t\t\t} catch {\n\t\t\t\tthrow new BadRequestError(errors.services.SEND_EMAIL)\n\t\t\t}\n\n\t\t\treturn reply.status(200).send()\n\t\t},\n\t)\n}\n","import { hash } from 'bcryptjs'\nimport dayjs from 'dayjs'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { z } from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { prisma } from '@/lib/prisma'\nimport { validateStrongPasswordSchema } from '@/schemas/validate-strong-password-schema'\n\nimport { UnauthorizedError } from '../_errors/unauthorized-error'\n\nexport async function resetPassword(app: FastifyInstance) {\n\tapp.withTypeProvider<ZodTypeProvider>().post(\n\t\t'/password/reset',\n\t\t{\n\t\t\tschema: {\n\t\t\t\ttags: ['Auth'],\n\t\t\t\tsummary: 'Reset user password.',\n\t\t\t\tbody: z\n\t\t\t\t\t.object({\n\t\t\t\t\t\tcode: z.string().uuid(),\n\t\t\t\t\t\temail: z.string().email(),\n\t\t\t\t\t\tpassword: z.string(),\n\t\t\t\t\t})\n\t\t\t\t\t.superRefine(validateStrongPasswordSchema),\n\t\t\t\tresponse: {\n\t\t\t\t\t204: z.null(),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tasync (request, reply) => {\n\t\t\tconst { code, password, email } = request.body\n\n\t\t\tconst emailFromRequest = await prisma.user.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\temail,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tif (!emailFromRequest) {\n\t\t\t\tthrow new UnauthorizedError(errors.auth.INVALID_PASSWORD_TOKEN)\n\t\t\t}\n\n\t\t\tconst tokenFromCode = await prisma.token.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\tid: code,\n\t\t\t\t\ttype: 'PASSWORD_RECOVER',\n\t\t\t\t\tuserId: emailFromRequest.id,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tif (!tokenFromCode) {\n\t\t\t\tthrow new UnauthorizedError(errors.auth.INVALID_PASSWORD_TOKEN)\n\t\t\t}\n\n\t\t\tconst tokenWasCreatedAt = dayjs(tokenFromCode.createdAt)\n\t\t\tconst wasTokenCreatedWithin5Minutes =\n\t\t\t\tdayjs().diff(tokenWasCreatedAt, 'minutes') <= 5\n\n\t\t\tif (!wasTokenCreatedWithin5Minutes) {\n\t\t\t\tawait prisma.token.delete({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: tokenFromCode.id,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tthrow new UnauthorizedError(errors.auth.INVALID_PASSWORD_TOKEN)\n\t\t\t}\n\n\t\t\tconst hashedPassword = await hash(password, 8)\n\n\t\t\tawait prisma.$transaction([\n\t\t\t\tprisma.user.update({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: tokenFromCode.userId,\n\t\t\t\t\t},\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tpasswordHash: hashedPassword,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\tprisma.token.deleteMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tuserId: emailFromRequest.id,\n\t\t\t\t\t\ttype: 'PASSWORD_RECOVER',\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t])\n\n\t\t\treturn reply.status(204).send()\n\t\t},\n\t)\n}\n","import { compare } from 'bcryptjs'\nimport dayjs from 'dayjs'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { z } from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { prisma } from '@/lib/prisma'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function verifyEmailAndAuthenticate(app: FastifyInstance) {\n\tapp.withTypeProvider<ZodTypeProvider>().post(\n\t\t'/users/verify-email',\n\t\t{\n\t\t\tschema: {\n\t\t\t\ttags: ['Auth'],\n\t\t\t\tsummary: 'Verify an e-mail by validation code and then sign in.',\n\t\t\t\tbody: z.object({\n\t\t\t\t\temail: z.string().email(),\n\t\t\t\t\tpassword: z.string(),\n\t\t\t\t\tcode: z.string().uuid(),\n\t\t\t\t}),\n\t\t\t\tresponse: {\n\t\t\t\t\t201: z.object({\n\t\t\t\t\t\ttoken: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tasync (request, reply) => {\n\t\t\tconst { email, password, code } = request.body\n\n\t\t\tconst userFromEmail = await prisma.user.findUnique({\n\t\t\t\twhere: { email },\n\t\t\t})\n\n\t\t\tif (!userFromEmail) {\n\t\t\t\tthrow new BadRequestError(errors.auth.INVALID_CREDENTIALS)\n\t\t\t}\n\n\t\t\tif (userFromEmail.passwordHash === null) {\n\t\t\t\tthrow new BadRequestError(errors.auth.NOT_PASSWORD_FOUND)\n\t\t\t}\n\n\t\t\tconst isPasswordValid = await compare(\n\t\t\t\tpassword,\n\t\t\t\tuserFromEmail.passwordHash,\n\t\t\t)\n\n\t\t\tif (!isPasswordValid) {\n\t\t\t\tthrow new BadRequestError(errors.auth.INVALID_CREDENTIALS)\n\t\t\t}\n\n\t\t\tconst validationToken = await prisma.token.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\tid: code,\n\t\t\t\t\tuserId: userFromEmail.id,\n\t\t\t\t\ttype: 'EMAIL_VALIDATION',\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tif (!validationToken) {\n\t\t\t\tthrow new BadRequestError(errors.auth.INVALID_EMAIL_TOKEN)\n\t\t\t}\n\n\t\t\tconst tokenWasCreatedAt = dayjs(validationToken.createdAt)\n\t\t\tconst wasTokenCreatedWithin5Minutes =\n\t\t\t\tdayjs().diff(tokenWasCreatedAt, 'minutes') <= 5\n\n\t\t\tif (!wasTokenCreatedWithin5Minutes) {\n\t\t\t\tawait prisma.token.delete({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: validationToken.id,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tthrow new BadRequestError(errors.auth.INVALID_EMAIL_TOKEN)\n\t\t\t}\n\n\t\t\tawait prisma.$transaction([\n\t\t\t\tprisma.user.update({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: userFromEmail.id,\n\t\t\t\t\t},\n\t\t\t\t\tdata: {\n\t\t\t\t\t\temailValidatedAt: new Date(),\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\tprisma.token.deleteMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tuserId: userFromEmail.id,\n\t\t\t\t\t\ttype: 'EMAIL_VALIDATION',\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t])\n\n\t\t\tconst token = await reply.jwtSign(\n\t\t\t\t{\n\t\t\t\t\tsub: userFromEmail.id,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\texpiresIn: '7d',\n\t\t\t\t},\n\t\t\t)\n\n\t\t\treturn reply.status(201).send({\n\t\t\t\ttoken,\n\t\t\t})\n\t\t},\n\t)\n}\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { getUserPermissions } from '@/utils/get-user-permissions'\n\nimport { UnauthorizedError } from '../_errors/unauthorized-error'\n\nexport async function getOrganizationBilling(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.get(\n\t\t\t'/organizations/:slug/billing',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Billing'],\n\t\t\t\t\tsummary: 'Get billing information from organization.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t200: z.object({\n\t\t\t\t\t\t\tbilling: z.object({\n\t\t\t\t\t\t\t\tseats: z.object({\n\t\t\t\t\t\t\t\t\tamount: z.coerce.number(),\n\t\t\t\t\t\t\t\t\tunit: z.coerce.number(),\n\t\t\t\t\t\t\t\t\tprice: z.coerce.number(),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tprojects: z.object({\n\t\t\t\t\t\t\t\t\tamount: z.coerce.number(),\n\t\t\t\t\t\t\t\t\tunit: z.coerce.number(),\n\t\t\t\t\t\t\t\t\tprice: z.coerce.number(),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\ttotal: z.coerce.number(),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request) => {\n\t\t\t\tconst { slug } = request.params\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\t\t\t\tconst { membership, organization } =\n\t\t\t\t\tawait request.getCurrentUserMembership(slug)\n\n\t\t\t\tconst { cannot } = getUserPermissions(userId, membership.role)\n\n\t\t\t\tif (cannot('get', 'Billing')) {\n\t\t\t\t\tthrow new UnauthorizedError(errors.organizations.billing.CANNOT_LIST)\n\t\t\t\t}\n\n\t\t\t\tconst [amountOfMembers, amountOfProjects] = await Promise.all([\n\t\t\t\t\tprisma.member.count({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t\t\trole: { not: 'BILLING' },\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t\tprisma.project.count({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t])\n\n\t\t\t\tconst billing = {\n\t\t\t\t\tseats: {\n\t\t\t\t\t\tamount: amountOfMembers,\n\t\t\t\t\t\tunit: 10.25,\n\t\t\t\t\t\tprice: Number((amountOfMembers * 10.25).toFixed(2)),\n\t\t\t\t\t},\n\t\t\t\t\tprojects: {\n\t\t\t\t\t\tamount: amountOfProjects,\n\t\t\t\t\t\tunit: 20.33,\n\t\t\t\t\t\tprice: Number((amountOfProjects * 20.33).toFixed(2)),\n\t\t\t\t\t},\n\t\t\t\t\ttotal:\n\t\t\t\t\t\tNumber((amountOfMembers * 10.25).toFixed(2)) +\n\t\t\t\t\t\tNumber((amountOfProjects * 20.33).toFixed(2)),\n\t\t\t\t}\n\n\t\t\t\treturn { billing }\n\t\t\t},\n\t\t)\n}\n","export interface Note<T> {\n  type: string\n  message?: string\n  originalValue?: T\n}\n\nexport abstract class Condition<T = unknown> {\n  private _notes!: Note<T>[];\n\n  constructor(\n    public readonly operator: string,\n    public readonly value: T\n  ) {\n    Object.defineProperty(this, '_notes', {\n      writable: true\n    });\n  }\n\n  get notes(): ReadonlyArray<Note<T>> | undefined {\n    return this._notes;\n  }\n\n  addNote(note: Note<T>) {\n    this._notes = this._notes || [];\n    this._notes.push(note);\n  }\n}\n\nexport class DocumentCondition<T> extends Condition<T> {\n}\n\nexport class CompoundCondition<T extends Condition = Condition> extends DocumentCondition<T[]> {\n  constructor(operator: string, conditions: T[]) {\n    if (!Array.isArray(conditions)) {\n      throw new Error(`\"${operator}\" operator expects to receive an array of conditions`);\n    }\n\n    super(operator, conditions);\n  }\n}\n\nexport const ITSELF = '__itself__';\nexport class FieldCondition<T = unknown> extends Condition<T> {\n  public readonly field!: string | typeof ITSELF;\n\n  constructor(operator: string, field: string | typeof ITSELF, value: T) {\n    super(operator, value);\n    this.field = field;\n  }\n}\n\nexport const NULL_CONDITION = new DocumentCondition('__null__', null);\nexport type ConditionValue<T> = T extends Condition<infer V> ? V : unknown;\n","import { Condition, CompoundCondition, NULL_CONDITION } from './Condition';\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty);\n\nexport function isCompound(operator: string, condition: Condition): condition is CompoundCondition {\n  return condition instanceof CompoundCondition && condition.operator === operator;\n}\n\nfunction flattenConditions<T extends Condition>(\n  operator: string,\n  conditions: T[],\n  aggregatedResult?: T[]\n) {\n  const flatConditions: T[] = aggregatedResult || [];\n\n  for (let i = 0, length = conditions.length; i < length; i++) {\n    const currentNode = conditions[i];\n\n    if (isCompound(operator, currentNode)) {\n      flattenConditions(operator, currentNode.value as T[], flatConditions);\n    } else {\n      flatConditions.push(currentNode);\n    }\n  }\n\n  return flatConditions;\n}\n\nexport function optimizedCompoundCondition<T extends Condition>(operator: string, conditions: T[]) {\n  if (conditions.length === 1) {\n    return conditions[0];\n  }\n\n  return new CompoundCondition(operator, flattenConditions(operator, conditions));\n}\n\nexport const identity = <T>(x: T) => x;\nexport const object = () => Object.create(null);\n\nexport const ignoreValue: IgnoreValue = Object.defineProperty(object(), '__@type@__', {\n  value: 'ignore value'\n});\nexport interface IgnoreValue {\n  readonly ['__@type@__']: 'ignore value'\n}\n\nexport function hasOperators<T>(\n  value: any,\n  instructions: Record<string, unknown>,\n  skipIgnore = false,\n): value is T {\n  if (!value || value && value.constructor !== Object) {\n    return false;\n  }\n\n  for (const prop in value) { // eslint-disable-line no-restricted-syntax, guard-for-in\n    const hasProp = hasOwnProperty(value, prop) && hasOwnProperty(instructions, prop);\n    if (hasProp && (!skipIgnore || value[prop] !== ignoreValue)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function objectKeysSkipIgnore(anyObject: Record<string, unknown>) {\n  const keys: string[] = [];\n  for (const key in anyObject) { // eslint-disable-line no-restricted-syntax\n    if (hasOwnProperty(anyObject, key) && anyObject[key] !== ignoreValue) {\n      keys.push(key);\n    }\n  }\n\n  return keys;\n}\n\nexport function pushIfNonNullCondition(conditions: Condition[], condition: Condition) {\n  if (condition !== NULL_CONDITION) {\n    conditions.push(condition);\n  }\n}\n","import { Condition } from './Condition';\nimport { optimizedCompoundCondition } from './utils';\n\nexport const buildAnd = (conditions: Condition[]) => optimizedCompoundCondition('and', conditions);\nexport const buildOr = (conditions: Condition[]) => optimizedCompoundCondition('or', conditions);\n","import {\n  FieldCondition,\n  CompoundCondition,\n  DocumentCondition,\n} from '../Condition';\nimport {\n  DocumentInstruction,\n  CompoundInstruction,\n  FieldInstruction,\n} from '../types';\n\ninterface DefaultParsers {\n  compound: Exclude<CompoundInstruction['parse'], undefined>,\n  field: Exclude<FieldInstruction['parse'], undefined>,\n  document: Exclude<DocumentInstruction['parse'], undefined>\n}\n\nexport const defaultInstructionParsers: DefaultParsers = {\n  compound(instruction, value, context) {\n    const queries = Array.isArray(value) ? value : [value];\n    const conditions = queries.map(query => context.parse(query));\n    return new CompoundCondition(instruction.name, conditions);\n  },\n  field(instruction, value, context) {\n    return new FieldCondition(instruction.name, context.field, value);\n  },\n  document(instruction, value) {\n    return new DocumentCondition(instruction.name, value);\n  }\n};\n","import { Condition } from '../Condition';\nimport {\n  NamedInstruction,\n  ParsingInstruction,\n  FieldParsingContext,\n  ParsingContext,\n} from '../types';\nimport { buildAnd } from '../builder';\nimport { defaultInstructionParsers } from './defaultInstructionParsers';\nimport {\n  identity,\n  hasOperators,\n  object,\n  pushIfNonNullCondition,\n  objectKeysSkipIgnore,\n} from '../utils';\n\nexport type FieldQueryOperators<T extends {}> = {\n  [K in keyof T]: T[K] extends {} ? T[K] : never\n}[keyof T];\n\ntype ParsingInstructions = Record<string, NamedInstruction>;\n\nexport interface QueryOptions {\n  operatorToConditionName?(name: string): string\n  defaultOperatorName?: string\n  fieldContext?: Record<string, unknown>\n  documentContext?: Record<string, unknown>\n  useIgnoreValue?: boolean\n  mergeFinalConditions?(conditions: Condition[]): Condition\n}\n\nexport type ObjectQueryFieldParsingContext = ParsingContext<FieldParsingContext & {\n  query: {},\n  hasOperators<T>(value: unknown): value is T\n}>;\n\nexport class ObjectQueryParser<\n  T extends Record<any, any>,\n  U extends FieldQueryOperators<T> = FieldQueryOperators<T>\n> {\n  private readonly _instructions: ParsingInstructions;\n  private _fieldInstructionContext: ObjectQueryFieldParsingContext;\n  private _documentInstructionContext: ParsingContext<{ query: {} }>;\n  private readonly _options: Required<\n  Pick<QueryOptions, 'operatorToConditionName' | 'defaultOperatorName' | 'mergeFinalConditions'>\n  >;\n\n  private readonly _objectKeys: typeof Object.keys;\n\n  constructor(instructions: Record<string, ParsingInstruction>, options: QueryOptions = object()) {\n    this.parse = this.parse.bind(this);\n    this._options = {\n      operatorToConditionName: options.operatorToConditionName || identity,\n      defaultOperatorName: options.defaultOperatorName || 'eq',\n      mergeFinalConditions: options.mergeFinalConditions || buildAnd,\n    };\n    this._instructions = Object.keys(instructions).reduce((all, name) => {\n      all[name] = { name: this._options.operatorToConditionName(name), ...instructions[name] };\n      return all;\n    }, {} as ParsingInstructions);\n    this._fieldInstructionContext = {\n      ...options.fieldContext,\n      field: '',\n      query: {},\n      parse: this.parse,\n      hasOperators: <T>(value: unknown): value is T => hasOperators(\n        value,\n        this._instructions,\n        options.useIgnoreValue\n      ),\n    };\n    this._documentInstructionContext = {\n      ...options.documentContext,\n      parse: this.parse,\n      query: {}\n    };\n    this._objectKeys = options.useIgnoreValue ? objectKeysSkipIgnore : Object.keys;\n  }\n\n  setParse(parse: this['parse']) {\n    this.parse = parse;\n    this._fieldInstructionContext.parse = parse;\n    this._documentInstructionContext.parse = parse;\n  }\n\n  protected parseField(field: string, operator: string, value: unknown, parentQuery: {}) {\n    const instruction = this._instructions[operator];\n\n    if (!instruction) {\n      throw new Error(`Unsupported operator \"${operator}\"`);\n    }\n\n    if (instruction.type !== 'field') {\n      throw new Error(`Unexpected ${instruction.type} operator \"${operator}\" at field level`);\n    }\n\n    this._fieldInstructionContext.field = field;\n    this._fieldInstructionContext.query = parentQuery;\n\n    return this.parseInstruction(instruction, value, this._fieldInstructionContext);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  protected parseInstruction(\n    instruction: NamedInstruction,\n    value: unknown,\n    context: ParsingContext<{}>\n  ) {\n    if (typeof instruction.validate === 'function') {\n      instruction.validate(instruction, value);\n    }\n\n    const parse: typeof instruction.parse = instruction.parse\n      || defaultInstructionParsers[instruction.type as keyof typeof defaultInstructionParsers];\n    return parse(instruction, value, context);\n  }\n\n  protected parseFieldOperators(field: string, value: U) {\n    const conditions: Condition[] = [];\n    const keys = this._objectKeys(value);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const op = keys[i];\n      const instruction = this._instructions[op];\n\n      if (!instruction) {\n        throw new Error(`Field query for \"${field}\" may contain only operators or a plain object as a value`);\n      }\n\n      const condition = this.parseField(field, op, value[op as keyof U], value);\n      pushIfNonNullCondition(conditions, condition);\n    }\n\n    return conditions;\n  }\n\n  parse<Q extends T>(query: Q): Condition {\n    const conditions = [];\n    const keys = this._objectKeys(query);\n\n    this._documentInstructionContext.query = query;\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      const value = query[key];\n      const instruction = this._instructions[key];\n\n      if (instruction) {\n        if (instruction.type !== 'document' && instruction.type !== 'compound') {\n          throw new Error(`Cannot use parsing instruction for operator \"${key}\" in \"document\" context as it is supposed to be used in  \"${instruction.type}\" context`);\n        }\n\n        pushIfNonNullCondition(\n          conditions,\n          this.parseInstruction(instruction, value, this._documentInstructionContext)\n        );\n      } else if (this._fieldInstructionContext.hasOperators<U>(value)) {\n        conditions.push(...this.parseFieldOperators(key, value));\n      } else {\n        pushIfNonNullCondition(\n          conditions,\n          this.parseField(key, this._options.defaultOperatorName, value, query)\n        );\n      }\n    }\n\n    return this._options.mergeFinalConditions(conditions);\n  }\n}\n","import { Condition } from './Condition';\n\ntype ArgsExceptLast<F extends (...args: any[]) => any> =\n  F extends (a: any, c: any) => any\n    ? Parameters<(condition: Condition) => 0>\n    : F extends (a: any, b: any, c: any) => any\n      ? Parameters<(condition: Condition, value: Parameters<F>[1]) => 0>\n      : Parameters<(\n        condition: Condition,\n        value: Parameters<F>[1],\n        options: Parameters<F>[2],\n        ...args: unknown[]\n      ) => 0>;\n\nexport type Interpreter<T extends Condition, R> = (condition: T, ...args: any[]) => R;\nexport type AnyInterpreter = Interpreter<any, any>;\nexport interface InterpretationContext<T extends AnyInterpreter> {\n  interpret(...args: ArgsExceptLast<T>): ReturnType<T>;\n}\n\nfunction getInterpreter<T extends Record<string, AnyInterpreter>>(\n  interpreters: T,\n  operator: keyof T\n) {\n  const interpret = interpreters[operator];\n\n  if (typeof interpret !== 'function') {\n    throw new Error(`Unable to interpret \"${operator}\" condition. Did you forget to register interpreter for it?`);\n  }\n\n  return interpret;\n}\n\nexport interface InterpreterOptions {\n  numberOfArguments?: 1 | 2 | 3\n  getInterpreterName?(condition: Condition, context: this): string\n}\n\nfunction defaultInterpreterName(condition: Condition) {\n  return condition.operator;\n}\n\nexport function createInterpreter<T extends AnyInterpreter, U extends {} = {}>(\n  interpreters: Record<string, T>,\n  rawOptions?: U\n) {\n  const options = rawOptions as U & InterpreterOptions;\n  const getInterpreterName = options && options.getInterpreterName || defaultInterpreterName;\n  let interpret;\n\n  switch (options ? options.numberOfArguments : 0) {\n    case 1:\n      interpret = ((condition) => {\n        const interpreterName = getInterpreterName(condition, options);\n        const interpretOperator = getInterpreter(interpreters, interpreterName);\n        return interpretOperator(condition, defaultContext); // eslint-disable-line @typescript-eslint/no-use-before-define\n      }) as InterpretationContext<T>['interpret'];\n      break;\n    case 3:\n      interpret = ((condition, value, params) => {\n        const interpreterName = getInterpreterName(condition, options);\n        const interpretOperator = getInterpreter(interpreters, interpreterName);\n        return interpretOperator(condition, value, params, defaultContext); // eslint-disable-line @typescript-eslint/no-use-before-define\n      }) as InterpretationContext<T>['interpret'];\n      break;\n    default:\n      interpret = ((condition, value) => {\n        const interpreterName = getInterpreterName(condition, options);\n        const interpretOperator = getInterpreter(interpreters, interpreterName);\n        return interpretOperator(condition, value, defaultContext); // eslint-disable-line @typescript-eslint/no-use-before-define\n      }) as InterpretationContext<T>['interpret'];\n      break;\n  }\n\n  const defaultContext = {\n    ...options,\n    interpret,\n  } as InterpretationContext<T> & U;\n\n  return defaultContext.interpret;\n}\n","import { Condition } from './Condition';\nimport { Parse } from './types';\nimport { AnyInterpreter } from './interpreter';\n\ntype Bound<T> = T extends (first: Condition, ...args: infer A) => any\n  ? { (...args: A): ReturnType<T>, ast: Condition }\n  : never;\n\nexport function createTranslatorFactory<Lang, Interpreter extends AnyInterpreter>(\n  parse: Parse<Lang>,\n  interpret: Interpreter\n) {\n  return (query: Lang, ...args: unknown[]): Bound<Interpreter> => {\n    const ast = parse(query, ...args);\n    const translate = (interpret as any).bind(null, ast);\n    translate.ast = ast;\n    return translate;\n  };\n}\n","import { ObjectQueryParser } from './parsers/ObjectQueryParser';\n\nexport * from './Condition';\nexport * from './types';\nexport * from './interpreter';\nexport * from './translator';\nexport * from './builder';\nexport {\n  isCompound,\n  hasOperators,\n  identity,\n  object,\n  optimizedCompoundCondition,\n  ignoreValue,\n} from './utils';\nexport type {\n  IgnoreValue\n} from './utils';\nexport * from './parsers/ObjectQueryParser';\nexport * from './parsers/defaultInstructionParsers';\n/**\n * @deprecated use `ObjectQueryParser#parseInstruction` instead\n * TODO(major): remove\n */\nexport const parseInstruction = (ObjectQueryParser.prototype as any).parseInstruction;\n","import {\n  CompoundCondition,\n  FieldCondition,\n  NamedInstruction,\n  CompoundInstruction,\n  FieldInstruction,\n  DocumentInstruction,\n  Comparable,\n  ITSELF,\n  NULL_CONDITION,\n  FieldParsingContext,\n  optimizedCompoundCondition,\n  ObjectQueryFieldParsingContext,\n} from '@ucast/core';\nimport { MongoQuery } from './types';\n\nfunction ensureIsArray(instruction: NamedInstruction, value: unknown) {\n  if (!Array.isArray(value)) {\n    throw new Error(`\"${instruction.name}\" expects value to be an array`);\n  }\n}\n\nfunction ensureIsNonEmptyArray(instruction: NamedInstruction, value: unknown[]) {\n  ensureIsArray(instruction, value);\n\n  if (!value.length) {\n    throw new Error(`\"${instruction.name}\" expects to have at least one element in array`);\n  }\n}\n\nfunction ensureIsComparable(instruction: NamedInstruction, value: string | number | Date) {\n  const isComparable = typeof value === 'string' || typeof value === 'number' || value instanceof Date;\n\n  if (!isComparable) {\n    throw new Error(`\"${instruction.name}\" expects value to be comparable (i.e., string, number or date)`);\n  }\n}\n\nconst ensureIs = (type: string) => (instruction: NamedInstruction, value: unknown) => {\n  if (typeof value !== type) { // eslint-disable-line valid-typeof\n    throw new Error(`\"${instruction.name}\" expects value to be a \"${type}\"`);\n  }\n};\n\nexport const $and: CompoundInstruction<MongoQuery<any>[]> = {\n  type: 'compound',\n  validate: ensureIsNonEmptyArray,\n  parse(instruction, queries, { parse }) {\n    const conditions = queries.map(query => parse(query));\n    return optimizedCompoundCondition(instruction.name, conditions);\n  }\n};\nexport const $or = $and;\nexport const $nor: CompoundInstruction<MongoQuery<any>[]> = {\n  type: 'compound',\n  validate: ensureIsNonEmptyArray,\n};\n\nexport const $not: FieldInstruction<MongoQuery<any> | RegExp> = {\n  type: 'field',\n  validate(instruction, value) {\n    const isValid = value && (value instanceof RegExp || value.constructor === Object);\n\n    if (!isValid) {\n      throw new Error(`\"${instruction.name}\" expects to receive either regular expression or object of field operators`);\n    }\n  },\n  parse(instruction, value, context) {\n    const condition = value instanceof RegExp\n      ? new FieldCondition('regex' as typeof instruction.name, context.field, value)\n      : context.parse(value, context);\n\n    return new CompoundCondition(instruction.name, [condition]);\n  },\n};\nexport const $elemMatch: FieldInstruction<MongoQuery<any>, ObjectQueryFieldParsingContext> = {\n  type: 'field',\n  validate(instruction, value) {\n    if (!value || value.constructor !== Object) {\n      throw new Error(`\"${instruction.name}\" expects to receive an object with nested query or field level operators`);\n    }\n  },\n  parse(instruction, value, { parse, field, hasOperators }) {\n    const condition = hasOperators(value) ? parse(value, { field: ITSELF }) : parse(value);\n    return new FieldCondition(instruction.name, field, condition);\n  }\n};\n\nexport const $size: FieldInstruction<number> = {\n  type: 'field',\n  validate: ensureIs('number')\n};\nexport const $in: FieldInstruction<unknown[]> = {\n  type: 'field',\n  validate: ensureIsArray,\n};\nexport const $nin = $in;\nexport const $all = $in;\nexport const $mod: FieldInstruction<[number, number]> = {\n  type: 'field',\n  validate(instruction, value) {\n    if (!Array.isArray(value) || value.length !== 2) {\n      throw new Error(`\"${instruction.name}\" expects an array with 2 numeric elements`);\n    }\n  }\n};\n\nexport const $exists: FieldInstruction<boolean> = {\n  type: 'field',\n  validate: ensureIs('boolean'),\n};\n\nexport const $gte: FieldInstruction<Comparable> = {\n  type: 'field',\n  validate: ensureIsComparable\n};\nexport const $gt = $gte;\nexport const $lt = $gt;\nexport const $lte = $gt;\n\nexport const $eq: FieldInstruction = {\n  type: 'field',\n};\nexport const $ne = $eq;\n\nexport interface RegExpFieldContext extends FieldParsingContext {\n  query: {\n    $options?: string\n  }\n}\n\nexport const $regex: FieldInstruction<string | RegExp, RegExpFieldContext> = {\n  type: 'field',\n  validate(instruction, value) {\n    if (!(value instanceof RegExp) && typeof value !== 'string') {\n      throw new Error(`\"${instruction.name}\" expects value to be a regular expression or a string that represents regular expression`);\n    }\n  },\n  parse(instruction, rawValue, context) {\n    const value = typeof rawValue === 'string'\n      ? new RegExp(rawValue, context.query.$options || '')\n      : rawValue;\n    return new FieldCondition(instruction.name, context.field, value);\n  }\n};\nexport const $options: FieldInstruction = {\n  type: 'field',\n  parse: () => NULL_CONDITION,\n};\n\nexport const $where: DocumentInstruction<() => boolean> = {\n  type: 'document',\n  validate: ensureIs('function'),\n};\n","import {\n  Condition,\n  buildAnd as and,\n  ParsingInstruction,\n  ObjectQueryParser,\n  FieldQueryOperators,\n} from '@ucast/core';\nimport { MongoQuery } from './types';\n\nexport interface ParseOptions {\n  field: string\n}\n\nexport class MongoQueryParser extends ObjectQueryParser<MongoQuery<any>> {\n  constructor(instructions: Record<string, ParsingInstruction>) {\n    super(instructions, {\n      defaultOperatorName: '$eq',\n      operatorToConditionName: name => name.slice(1),\n    });\n  }\n\n  parse<Q extends MongoQuery<any>, FQ extends FieldQueryOperators<Q> = FieldQueryOperators<Q>>(\n    query: Q | FQ,\n    options?: ParseOptions\n  ): Condition {\n    if (options && options.field) {\n      return and(this.parseFieldOperators(options.field, query as FQ));\n    }\n\n    return super.parse(query);\n  }\n}\n","import * as instructions from './instructions';\n\nexport const allParsingInstructions = instructions;\nexport * from './instructions';\nexport * from './MongoQueryParser';\nexport * from './types';\nexport { defaultInstructionParsers as defaultParsers } from '@ucast/core';\n","import { FieldCondition } from '@ucast/core';\nimport { JsInterpretationOptions, JsInterpreter } from './types';\n\nexport type AnyObject = Record<PropertyKey, unknown>;\nexport type GetField = (object: any, field: string) => any;\n\nexport function includes<T>(\n  items: T[],\n  value: T,\n  compare: JsInterpretationOptions['compare']\n): boolean {\n  for (let i = 0, length = items.length; i < length; i++) {\n    if (compare(items[i], value) === 0) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function isArrayAndNotNumericField<T>(object: T | T[], field: string): object is T[] {\n  return Array.isArray(object) && Number.isNaN(Number(field));\n}\n\nfunction getField<T extends AnyObject>(object: T | T[], field: string, get: GetField) {\n  if (!isArrayAndNotNumericField(object, field)) {\n    return get(object, field);\n  }\n\n  let result: unknown[] = [];\n\n  for (let i = 0; i < object.length; i++) {\n    const value = get(object[i], field);\n    if (typeof value !== 'undefined') {\n      result = result.concat(value);\n    }\n  }\n\n  return result;\n}\n\nexport function getValueByPath(object: AnyObject, field: string, get: GetField) {\n  if (field.indexOf('.') === -1) {\n    return getField(object, field, get);\n  }\n\n  const paths = field.split('.');\n  let value = object;\n\n  for (let i = 0, length = paths.length; i < length; i++) {\n    value = getField(value, paths[i], get);\n\n    if (!value || typeof value !== 'object') {\n      return value;\n    }\n  }\n\n  return value;\n}\n\nexport function testValueOrArray<T, U = T>(test: JsInterpreter<FieldCondition<T>, U>) {\n  return ((node, object, context) => {\n    const value = context.get(object, node.field);\n\n    if (!Array.isArray(value)) {\n      return test(node, value, context);\n    }\n\n    return value.some(v => test(node, v, context));\n  }) as JsInterpreter<FieldCondition<T>, AnyObject | U>;\n}\n","import { createInterpreter, ITSELF } from '@ucast/core';\nimport { getValueByPath, AnyObject, GetField } from './utils';\nimport { JsInterpretationOptions, JsInterpreter } from './types';\n\nconst defaultGet = (object: AnyObject, field: string) => object[field];\ntype Field = string | typeof ITSELF;\n\nexport function getObjectFieldCursor<T extends {}>(object: T, path: string, get: GetField) {\n  const dotIndex = path.lastIndexOf('.');\n\n  if (dotIndex === -1) {\n    return [object, path] as const;\n  }\n\n  return [\n    get(object, path.slice(0, dotIndex)) as T,\n    path.slice(dotIndex + 1)\n  ] as const;\n}\n\nexport function getObjectField(object: unknown, field: Field, get: GetField = defaultGet) {\n  if (field === ITSELF) {\n    return object;\n  }\n\n  if (!object) {\n    throw new Error(`Unable to get field \"${field}\" out of ${String(object)}.`);\n  }\n\n  return getValueByPath(object as Record<string, unknown>, field, get);\n}\n\nexport function createGetter<T extends GetField>(get: T) {\n  return (object: Parameters<T>[0], field: Parameters<T>[1]) => getObjectField(object, field, get);\n}\n\nexport function compare<T>(a: T, b: T): 0 | 1 | -1 {\n  if (a === b) {\n    return 0;\n  }\n\n  return a > b ? 1 : -1;\n}\n\nexport function createJsInterpreter<\n  T extends JsInterpreter<any>,\n  O extends Partial<JsInterpretationOptions>\n>(\n  operators: Record<string, T>,\n  options: O = {} as O\n) {\n  return createInterpreter(operators, {\n    get: getObjectField,\n    compare,\n    ...options,\n  });\n}\n","import {\n  CompoundCondition as Compound,\n  FieldCondition as Field,\n  DocumentCondition as Document,\n  Condition,\n  Comparable,\n  ITSELF,\n} from '@ucast/core';\nimport { JsInterpreter as Interpret } from './types';\nimport {\n  includes,\n  testValueOrArray,\n  isArrayAndNotNumericField,\n  AnyObject,\n} from './utils';\nimport { getObjectFieldCursor } from './interpreter';\n\nexport const or: Interpret<Compound> = (node, object, { interpret }) => {\n  return node.value.some(condition => interpret(condition, object));\n};\n\nexport const nor: typeof or = (node, object, context) => {\n  return !or(node, object, context);\n};\n\nexport const and: Interpret<Compound> = (node, object, { interpret }) => {\n  return node.value.every(condition => interpret(condition, object));\n};\n\nexport const not: Interpret<Compound> = (node, object, { interpret }) => {\n  return !interpret(node.value[0], object);\n};\n\nexport const eq: Interpret<Field> = (node, object, { compare, get }) => {\n  const value = get(object, node.field);\n\n  if (Array.isArray(value) && !Array.isArray(node.value)) {\n    return includes(value, node.value, compare);\n  }\n\n  return compare(value, node.value) === 0;\n};\n\nexport const ne: typeof eq = (node, object, context) => {\n  return !eq(node, object, context);\n};\n\nexport const lte = testValueOrArray<Comparable>((node, value, context) => {\n  const result = context.compare(value, node.value);\n  return result === 0 || result === -1;\n});\n\nexport const lt = testValueOrArray<Comparable>((node, value, context) => {\n  return context.compare(value, node.value) === -1;\n});\nexport const gt = testValueOrArray<Comparable>((node, value, context) => {\n  return context.compare(value, node.value) === 1;\n});\nexport const gte = testValueOrArray<Comparable>((node, value, context) => {\n  const result = context.compare(value, node.value);\n  return result === 0 || result === 1;\n});\n\nexport const exists: Interpret<Field<boolean>> = (node, object, { get }) => {\n  if (node.field === ITSELF) {\n    return typeof object !== 'undefined';\n  }\n\n  const [item, field] = getObjectFieldCursor<{}>(object, node.field, get);\n  const test = (value: {}) => {\n    if (value == null) return Boolean(value) === node.value;\n    return value.hasOwnProperty(field) === node.value;\n  };\n\n  return isArrayAndNotNumericField(item, field) ? item.some(test) : test(item);\n};\n\nexport const mod = testValueOrArray<[number, number], number>((node, value) => {\n  return typeof value === 'number' && value % node.value[0] === node.value[1];\n});\n\nexport const size: Interpret<Field<number>, AnyObject | unknown[]> = (node, object, { get }) => {\n  const [items, field] = getObjectFieldCursor(object as AnyObject, node.field, get);\n  const test = (item: unknown) => {\n    const value = get(item, field);\n    return Array.isArray(value) && value.length === node.value;\n  };\n\n  return node.field !== ITSELF && isArrayAndNotNumericField(items, field)\n    ? items.some(test)\n    : test(items);\n};\n\nexport const regex = testValueOrArray<RegExp, string>((node, value) => {\n  return typeof value === 'string' && node.value.test(value);\n});\n\nexport const within = testValueOrArray<unknown[], unknown>((node, object, { compare }) => {\n  return includes(node.value, object, compare);\n});\n\nexport const nin: typeof within = (node, object, context) => !within(node, object, context);\n\nexport const all: Interpret<Field<unknown[]>> = (node, object, { compare, get }) => {\n  const value = get(object, node.field);\n  return Array.isArray(value) && node.value.every(v => includes(value, v, compare));\n};\n\nexport const elemMatch: Interpret<Field<Condition>> = (node, object, { interpret, get }) => {\n  const value = get(object, node.field);\n  return Array.isArray(value) && value.some(v => interpret(node.value, v));\n};\n\ntype WhereFunction = (this: AnyObject) => boolean;\nexport const where: Interpret<Document<WhereFunction>, AnyObject> = (node, object) => {\n  return node.value.call(object);\n};\n","import { createJsInterpreter } from './interpreter';\nimport * as interpreters from './interpreters';\n\nexport const allInterpreters = {\n  ...interpreters,\n  in: interpreters.within,\n};\nexport const interpret = createJsInterpreter(allInterpreters);\n","import { createTranslatorFactory, ParsingInstruction, Condition, ITSELF } from '@ucast/core';\nimport {\n  MongoQuery,\n  MongoQueryParser,\n  MongoQueryFieldOperators,\n  allParsingInstructions,\n  defaultParsers\n} from '@ucast/mongo';\nimport {\n  createJsInterpreter,\n  allInterpreters,\n  JsInterpreter,\n  JsInterpretationOptions,\n  compare\n} from '@ucast/js';\n\ntype ThingFilter<T> = {\n  (object: T): boolean\n  ast: Condition\n};\n\ninterface HasToJSON {\n  toJSON(): unknown\n}\n\nfunction toPrimitive(value: unknown) {\n  if (value instanceof Date) {\n    return value.getTime();\n  }\n\n  if (value && typeof (value as HasToJSON).toJSON === 'function') {\n    return (value as HasToJSON).toJSON();\n  }\n\n  return value;\n}\n\nconst comparePrimitives: typeof compare = (a, b) => compare(toPrimitive(a), toPrimitive(b));\n\nexport interface FactoryOptions extends JsInterpretationOptions {\n  forPrimitives: boolean\n}\n\nexport type Filter = <\n  T = Record<string, unknown>,\n  Q extends MongoQuery<T> = MongoQuery<T>\n>(query: Q) => ThingFilter<T>;\n\nexport type PrimitiveMongoQuery<T> = MongoQueryFieldOperators<T> & Partial<{\n  $and: MongoQueryFieldOperators<T>[],\n  $or: MongoQueryFieldOperators<T>[],\n  $nor: MongoQueryFieldOperators<T>[]\n}>;\nexport type PrimitiveFilter = <\n  T,\n  Q extends PrimitiveMongoQuery<T> = PrimitiveMongoQuery<T>\n>(query: Q) => ThingFilter<T>;\n\ntype FilterType<T extends { forPrimitives?: true }> = T['forPrimitives'] extends true\n  ? PrimitiveFilter\n  : Filter;\n\nexport function createFactory<\n  T extends Record<string, ParsingInstruction<any, any>>,\n  I extends Record<string, JsInterpreter<any>>,\n  P extends { forPrimitives?: true }\n>(instructions: T, interpreters: I, options?: Partial<FactoryOptions> & P): FilterType<P> {\n  const parser = new MongoQueryParser(instructions);\n  const interpret = createJsInterpreter(interpreters, {\n    compare: comparePrimitives,\n    ...options\n  });\n\n  if (options && options.forPrimitives) {\n    const params = { field: ITSELF };\n    const parse = parser.parse;\n    parser.setParse(query => parse(query, params));\n  }\n\n  return createTranslatorFactory(parser.parse, interpret) as any;\n}\n\nexport const guard = createFactory(allParsingInstructions, allInterpreters);\n\nconst compoundOperators = ['$and', '$or'] as const;\nconst allPrimitiveParsingInstructions = compoundOperators.reduce((instructions, name) => {\n  instructions[name] = { ...instructions[name], type: 'field' } as any;\n  return instructions;\n}, {\n  ...allParsingInstructions,\n  $nor: {\n    ...allParsingInstructions.$nor,\n    type: 'field',\n    parse: defaultParsers.compound\n  }\n});\n\nexport const squire = createFactory(allPrimitiveParsingInstructions, allInterpreters, {\n  forPrimitives: true\n});\nexport const filter = guard; // TODO: remove in next major version\n","import { AnyObject, Subject, SubjectType, SubjectClass, ForcedSubject, AliasesMap } from './types';\n\nexport function wrapArray<T>(value: T[] | T): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n\nexport function setByPath(object: AnyObject, path: string, value: unknown): void {\n  let ref = object;\n  let lastKey = path;\n\n  if (path.indexOf('.') !== -1) {\n    const keys = path.split('.');\n\n    lastKey = keys.pop()!;\n    ref = keys.reduce((res, prop) => {\n      res[prop] = res[prop] || {};\n      return res[prop] as AnyObject;\n    }, object);\n  }\n\n  ref[lastKey] = value;\n}\n\nconst TYPE_FIELD = '__caslSubjectType__';\nexport function setSubjectType<\n  T extends string,\n  U extends Record<PropertyKey, any>\n>(type: T, object: U): U & ForcedSubject<T> {\n  if (object) {\n    if (!Object.hasOwn(object, TYPE_FIELD)) {\n      Object.defineProperty(object, TYPE_FIELD, { value: type });\n    } else if (type !== object[TYPE_FIELD]) {\n      throw new Error(`Trying to cast object to subject type ${type} but previously it was casted to ${object[TYPE_FIELD]}`);\n    }\n  }\n\n  return object as U & ForcedSubject<T>;\n}\n\nexport const isSubjectType = (value: unknown): value is SubjectType => {\n  const type = typeof value;\n  return type === 'string' || type === 'function';\n};\n\nconst getSubjectClassName = (value: SubjectClass) => value.modelName || value.name;\nexport function getSubjectTypeName(value: SubjectType) {\n  return typeof value === 'string' ? value : getSubjectClassName(value);\n}\n\nexport function detectSubjectType(object: Exclude<Subject, SubjectType>): string {\n  if (Object.hasOwn(object, TYPE_FIELD)) {\n    return object[TYPE_FIELD];\n  }\n\n  return getSubjectClassName(object.constructor as SubjectClass);\n}\n\nexport const DETECT_SUBJECT_TYPE_STRATEGY = {\n  function: (object: Exclude<Subject, SubjectType>) => object.constructor as SubjectClass,\n  string: detectSubjectType\n};\n\ntype AliasMerge = (actions: string[], action: string | string[]) => string[];\nfunction expandActions(aliasMap: AliasesMap, rawActions: string | string[], merge: AliasMerge) {\n  let actions = wrapArray(rawActions);\n  let i = 0;\n\n  while (i < actions.length) {\n    const action = actions[i++];\n\n    if (Object.hasOwn(aliasMap, action)) {\n      actions = merge(actions, aliasMap[action]);\n    }\n  }\n\n  return actions;\n}\n\nfunction findDuplicate(actions: string[], actionToFind: string | string[]) {\n  if (typeof actionToFind === 'string' && actions.indexOf(actionToFind) !== -1) {\n    return actionToFind;\n  }\n\n  for (let i = 0; i < actionToFind.length; i++) {\n    if (actions.indexOf(actionToFind[i]) !== -1) return actionToFind[i];\n  }\n\n  return null;\n}\n\nconst defaultAliasMerge: AliasMerge = (actions, action) => actions.concat(action);\nfunction validateForCycles(aliasMap: AliasesMap, reservedAction: string) {\n  if (reservedAction in aliasMap) {\n    throw new Error(`Cannot use \"${reservedAction}\" as an alias because it's reserved action.`);\n  }\n\n  const keys = Object.keys(aliasMap);\n  const mergeAliasesAndDetectCycles: AliasMerge = (actions, action) => {\n    const duplicate = findDuplicate(actions, action);\n    if (duplicate) throw new Error(`Detected cycle ${duplicate} -> ${actions.join(', ')}`);\n\n    const isUsingReservedAction = typeof action === 'string' && action === reservedAction\n      || actions.indexOf(reservedAction) !== -1\n      || Array.isArray(action) && action.indexOf(reservedAction) !== -1;\n    if (isUsingReservedAction) throw new Error(`Cannot make an alias to \"${reservedAction}\" because this is reserved action`);\n\n    return actions.concat(action);\n  };\n\n  for (let i = 0; i < keys.length; i++) {\n    expandActions(aliasMap, keys[i], mergeAliasesAndDetectCycles);\n  }\n}\n\nexport type AliasResolverOptions = { skipValidate?: boolean; anyAction?: string };\nexport function createAliasResolver(aliasMap: AliasesMap, options?: AliasResolverOptions) {\n  if (!options || options.skipValidate !== false) {\n    validateForCycles(aliasMap, options && options.anyAction || 'manage');\n  }\n\n  return (action: string | string[]) => expandActions(aliasMap, action, defaultAliasMerge);\n}\n\nfunction copyArrayTo<T>(dest: T[], target: T[], start: number) {\n  for (let i = start; i < target.length; i++) {\n    dest.push(target[i]);\n  }\n}\n\nexport function mergePrioritized<T extends { priority: number }>(\n  array?: T[],\n  anotherArray?: T[]\n): T[] {\n  if (!array || !array.length) {\n    return anotherArray || [];\n  }\n\n  if (!anotherArray || !anotherArray.length) {\n    return array || [];\n  }\n\n  let i = 0;\n  let j = 0;\n  const merged: T[] = [];\n\n  while (i < array.length && j < anotherArray.length) {\n    if (array[i].priority < anotherArray[j].priority) {\n      merged.push(array[i]);\n      i++;\n    } else {\n      merged.push(anotherArray[j]);\n      j++;\n    }\n  }\n\n  copyArrayTo(merged, array, i);\n  copyArrayTo(merged, anotherArray, j);\n\n  return merged;\n}\n\nexport function getOrDefault<K, V>(map: Map<K, V>, key: K, defaultValue: () => V) {\n  let value = map.get(key);\n\n  if (!value) {\n    value = defaultValue();\n    map.set(key, value);\n  }\n\n  return value;\n}\n\nexport const identity = <T>(x: T) => x;\n","import { wrapArray, isSubjectType } from './utils';\nimport {\n  MatchConditions,\n  MatchField,\n  Abilities,\n  ToAbilityTypes,\n  Normalize,\n  ConditionsMatcher,\n  FieldMatcher,\n} from './types';\nimport { RawRule, RawRuleFrom } from './RawRule';\n\ntype Tuple<A extends Abilities> = Normalize<ToAbilityTypes<A>>;\n\nfunction validate(rule: RawRuleFrom<Abilities, any>, options: RuleOptions<any>) {\n  if (Array.isArray(rule.fields) && !rule.fields.length) {\n    throw new Error('`rawRule.fields` cannot be an empty array. https://bit.ly/390miLa');\n  }\n\n  if (rule.fields && !options.fieldMatcher) {\n    throw new Error('You need to pass \"fieldMatcher\" option in order to restrict access by fields');\n  }\n\n  if (rule.conditions && !options.conditionsMatcher) {\n    throw new Error('You need to pass \"conditionsMatcher\" option in order to restrict access by conditions');\n  }\n}\n\nexport interface RuleOptions<Conditions> {\n  conditionsMatcher?: ConditionsMatcher<Conditions>\n  fieldMatcher?: FieldMatcher\n  resolveAction(action: string | string[]): string | string[]\n}\n\nexport class Rule<A extends Abilities, C> {\n  private _matchConditions: MatchConditions | undefined;\n  private _matchField: MatchField<string> | undefined;\n  private readonly _options!: RuleOptions<C>;\n  public readonly action!: Tuple<A>[0] | Tuple<A>[0][];\n  public readonly subject!: Tuple<A>[1] | Tuple<A>[1][];\n  public readonly inverted!: boolean;\n  public readonly conditions!: C | undefined;\n  public readonly fields!: string[] | undefined;\n  public readonly reason!: string | undefined;\n  public readonly origin!: RawRule<ToAbilityTypes<A>, C>;\n  public readonly priority!: number;\n\n  constructor(\n    rule: RawRule<ToAbilityTypes<A>, C>,\n    options: RuleOptions<C>,\n    priority: number = 0\n  ) {\n    validate(rule, options);\n\n    this.action = options.resolveAction(rule.action);\n    this.subject = rule.subject!;\n    this.inverted = !!rule.inverted;\n    this.conditions = rule.conditions;\n    this.reason = rule.reason;\n    this.origin = rule;\n    this.fields = rule.fields ? wrapArray(rule.fields) : undefined;\n    this.priority = priority;\n    this._options = options;\n  }\n\n  private _conditionsMatcher() {\n    if (this.conditions && !this._matchConditions) {\n      this._matchConditions = this._options.conditionsMatcher!(this.conditions);\n    }\n\n    return this._matchConditions!;\n  }\n\n  get ast() {\n    const matches = this._conditionsMatcher();\n    return matches ? matches.ast : undefined;\n  }\n\n  matchesConditions(object: Normalize<A>[1] | undefined): boolean {\n    if (!this.conditions) {\n      return true;\n    }\n\n    if (!object || isSubjectType(object)) {\n      return !this.inverted;\n    }\n\n    const matches = this._conditionsMatcher();\n    return matches(object as Record<string, unknown>);\n  }\n\n  matchesField(field: string | undefined): boolean {\n    if (!this.fields) {\n      return true;\n    }\n\n    if (!field) {\n      return !this.inverted;\n    }\n\n    if (this.fields && !this._matchField) {\n      this._matchField = this._options.fieldMatcher!(this.fields);\n    }\n\n    return this._matchField!(field);\n  }\n}\n","export interface LinkedItem<T> {\n  next: LinkedItem<T> | null\n  prev: LinkedItem<T> | null\n  readonly value: T\n}\n\nexport function linkedItem<T>(value: T, prev: LinkedItem<T>['prev']) {\n  const item = { value, prev, next: null };\n\n  if (prev) {\n    prev.next = item;\n  }\n\n  return item;\n}\n\nexport function unlinkItem(item: LinkedItem<any>) {\n  if (item.next) {\n    item.next.prev = item.prev;\n  }\n\n  if (item.prev) {\n    item.prev.next = item.next;\n  }\n\n  item.next = item.prev = null; // eslint-disable-line\n}\n\nexport const cloneLinkedItem = <T extends LinkedItem<any>>(item: T): T => ({\n  value: item.value,\n  prev: item.prev,\n  next: item.next,\n} as T);\n","import { Rule, RuleOptions } from './Rule';\nimport { RawRuleFrom } from './RawRule';\nimport {\n  Abilities,\n  Normalize,\n  SubjectType,\n  AbilityParameters,\n  AbilityTuple,\n  ExtractSubjectType\n} from './types';\nimport { wrapArray, detectSubjectType, mergePrioritized, getOrDefault, identity, isSubjectType, DETECT_SUBJECT_TYPE_STRATEGY } from './utils';\nimport { LinkedItem, linkedItem, unlinkItem, cloneLinkedItem } from './structures/LinkedItem';\n\nexport interface RuleIndexOptions<A extends Abilities, C> extends Partial<RuleOptions<C>> {\n  detectSubjectType?(\n    subject: Exclude<Normalize<A>[1], SubjectType>\n  ): ExtractSubjectType<Normalize<A>[1]>;\n  anyAction?: string;\n  anySubjectType?: string;\n}\n\nexport declare const ɵabilities: unique symbol;\nexport declare const ɵconditions: unique symbol;\ninterface WithGenerics {\n  [ɵabilities]: any\n  [ɵconditions]: any\n}\nexport type Public<T extends WithGenerics> = { [K in keyof T]: T[K] };\nexport interface Generics<T extends WithGenerics> {\n  abilities: T[typeof ɵabilities],\n  conditions: T[typeof ɵconditions]\n}\n\nexport type RuleOf<T extends WithGenerics> =\n  Rule<Generics<T>['abilities'], Generics<T>['conditions']>;\nexport type RawRuleOf<T extends WithGenerics> =\n  RawRuleFrom<Generics<T>['abilities'], Generics<T>['conditions']>;\n\nexport type RuleIndexOptionsOf<T extends WithGenerics> =\n  RuleIndexOptions<Generics<T>['abilities'], Generics<T>['conditions']>;\n\ninterface AbilityEvent<T extends WithGenerics> {\n  target: T\n  /** @deprecated use \"target\" property instead */\n  ability: T\n}\n\nexport interface UpdateEvent<T extends WithGenerics> extends AbilityEvent<T> {\n  rules: RawRuleOf<T>[]\n}\n/**\n * @deprecated `on`/`emit` properly infer type without this type\n * TODO(major): delete\n */\nexport type EventHandler<Event> = (event: Event) => void;\n\nexport type Events<\n  T extends WithGenerics,\n  K extends keyof EventsMap<T> = keyof EventsMap<T>\n> = Map<K, LinkedItem<EventsMap<T>[K]> | null>;\n\ninterface EventsMap<T extends WithGenerics> {\n  update(event: UpdateEvent<T>): void\n  updated(event: UpdateEvent<T>): void\n}\n\ntype IndexTree<A extends Abilities, C> = Map<SubjectType, Map<string, {\n  rules: Rule<A, C>[],\n  merged: boolean\n}>>;\n\nexport type Unsubscribe = () => void;\n\nconst defaultActionEntry = () => ({\n  rules: [] as unknown as Rule<any, any>[],\n  merged: false\n});\nconst defaultSubjectEntry = () => new Map<string, ReturnType<typeof defaultActionEntry>>();\n\ntype AbilitySubjectTypeParameters<T extends Abilities, IncludeField extends boolean = true> =\n  AbilityParameters<\n  T,\n  T extends AbilityTuple\n    ? IncludeField extends true\n      ? (action: T[0], subject: ExtractSubjectType<T[1]>, field?: string) => 0\n      : (action: T[0], subject: ExtractSubjectType<T[1]>) => 0\n    : never,\n  (action: Extract<T, string>) => 0\n  >;\n\nexport class RuleIndex<A extends Abilities, Conditions> {\n  private _hasPerFieldRules: boolean = false;\n  private _events?: Events<this>;\n  private _indexedRules: IndexTree<A, Conditions> = new Map();\n  private _rules: RawRuleFrom<A, Conditions>[];\n  private readonly _ruleOptions: RuleOptions<Conditions>;\n  private _detectSubjectType: this['detectSubjectType'];\n  private readonly _anyAction: string;\n  private readonly _anySubjectType: string;\n  private readonly _hasCustomSubjectTypeDetection: boolean;\n  readonly [ɵabilities]!: A;\n  readonly [ɵconditions]!: Conditions;\n\n  constructor(\n    rules: RawRuleFrom<A, Conditions>[] = [],\n    options: RuleIndexOptions<A, Conditions> = {}\n  ) {\n    this._ruleOptions = {\n      conditionsMatcher: options.conditionsMatcher,\n      fieldMatcher: options.fieldMatcher,\n      resolveAction: options.resolveAction || identity,\n    };\n    this._anyAction = options.anyAction || 'manage';\n    this._anySubjectType = options.anySubjectType || 'all';\n    this._rules = rules;\n    this._hasCustomSubjectTypeDetection = !!options.detectSubjectType;\n    this._detectSubjectType = options.detectSubjectType || (detectSubjectType as this['detectSubjectType']);\n    this._indexAndAnalyzeRules(rules);\n  }\n\n  get rules() {\n    return this._rules;\n  }\n\n  detectSubjectType(object?: Normalize<A>[1]): ExtractSubjectType<Normalize<A>[1]> {\n    if (isSubjectType(object)) return object as ExtractSubjectType<Normalize<A>[1]>;\n    if (!object) return this._anySubjectType as ExtractSubjectType<Normalize<A>[1]>;\n    return this._detectSubjectType(object as Exclude<Normalize<A>[1], SubjectType>);\n  }\n\n  update(rules: RawRuleFrom<A, Conditions>[]): Public<this> {\n    const event = {\n      rules,\n      ability: this,\n      target: this\n    } as unknown as UpdateEvent<this>;\n\n    this._emit('update', event);\n    this._rules = rules;\n    this._indexAndAnalyzeRules(rules);\n    this._emit('updated', event);\n\n    return this;\n  }\n\n  private _indexAndAnalyzeRules(rawRules: RawRuleFrom<A, Conditions>[]) {\n    const indexedRules: IndexTree<A, Conditions> = new Map();\n    let typeOfSubjectType: string | undefined;\n\n    for (let i = rawRules.length - 1; i >= 0; i--) {\n      const priority = rawRules.length - i - 1;\n      const rule = new Rule(rawRules[i], this._ruleOptions, priority);\n      const actions = wrapArray(rule.action);\n      const subjects = wrapArray(rule.subject || this._anySubjectType);\n      if (!this._hasPerFieldRules && rule.fields) this._hasPerFieldRules = true;\n\n      for (let k = 0; k < subjects.length; k++) {\n        const subjectRules = getOrDefault(indexedRules, subjects[k], defaultSubjectEntry);\n        if (typeOfSubjectType === undefined) {\n          typeOfSubjectType = typeof subjects[k];\n        }\n        if (typeof subjects[k] !== typeOfSubjectType && typeOfSubjectType !== 'mixed') {\n          typeOfSubjectType = 'mixed';\n        }\n\n        for (let j = 0; j < actions.length; j++) {\n          getOrDefault(subjectRules, actions[j], defaultActionEntry).rules.push(rule);\n        }\n      }\n    }\n\n    this._indexedRules = indexedRules;\n    if (typeOfSubjectType !== 'mixed' && !this._hasCustomSubjectTypeDetection) {\n      const detectSubjectType = DETECT_SUBJECT_TYPE_STRATEGY[typeOfSubjectType as 'function' | 'string'] || DETECT_SUBJECT_TYPE_STRATEGY.string;\n      this._detectSubjectType = detectSubjectType as this['detectSubjectType'];\n    }\n  }\n\n  possibleRulesFor(...args: AbilitySubjectTypeParameters<A, false>): Rule<A, Conditions>[];\n  possibleRulesFor(\n    action: string,\n    subjectType: SubjectType = this._anySubjectType\n  ): Rule<A, Conditions>[] {\n    if (!isSubjectType(subjectType)) {\n      throw new Error('\"possibleRulesFor\" accepts only subject types (i.e., string or class) as the 2nd parameter');\n    }\n\n    const subjectRules = getOrDefault(this._indexedRules, subjectType, defaultSubjectEntry);\n    const actionRules = getOrDefault(subjectRules, action, defaultActionEntry);\n\n    if (actionRules.merged) {\n      return actionRules.rules;\n    }\n\n    const anyActionRules = action !== this._anyAction && subjectRules.has(this._anyAction)\n      ? subjectRules.get(this._anyAction)!.rules\n      : undefined;\n    let rules = mergePrioritized(actionRules.rules, anyActionRules);\n\n    if (subjectType !== this._anySubjectType) {\n      rules = mergePrioritized(rules, (this as any).possibleRulesFor(action, this._anySubjectType));\n    }\n\n    actionRules.rules = rules;\n    actionRules.merged = true;\n\n    return rules;\n  }\n\n  rulesFor(...args: AbilitySubjectTypeParameters<A>): Rule<A, Conditions>[];\n  rulesFor(action: string, subjectType?: SubjectType, field?: string): Rule<A, Conditions>[] {\n    const rules: Rule<A, Conditions>[] = (this as any).possibleRulesFor(action, subjectType);\n\n    if (field && typeof field !== 'string') {\n      throw new Error('The 3rd, `field` parameter is expected to be a string. See https://stalniy.github.io/casl/en/api/casl-ability#can-of-pure-ability for details');\n    }\n\n    if (!this._hasPerFieldRules) {\n      return rules;\n    }\n\n    return rules.filter(rule => rule.matchesField(field));\n  }\n\n  actionsFor(subjectType: ExtractSubjectType<Normalize<A>[1]>): string[] {\n    if (!isSubjectType(subjectType)) {\n      throw new Error('\"actionsFor\" accepts only subject types (i.e., string or class) as a parameter');\n    }\n\n    const actions = new Set<string>();\n\n    const subjectRules = this._indexedRules.get(subjectType);\n    if (subjectRules) {\n      Array.from(subjectRules.keys()).forEach(action => actions.add(action));\n    }\n\n    const anySubjectTypeRules = subjectType !== this._anySubjectType\n      ? this._indexedRules.get(this._anySubjectType)\n      : undefined;\n    if (anySubjectTypeRules) {\n      Array.from(anySubjectTypeRules.keys()).forEach(action => actions.add(action));\n    }\n\n    return Array.from(actions);\n  }\n\n  on<T extends keyof EventsMap<this>>(\n    event: T,\n    handler: EventsMap<Public<this>>[T]\n  ): Unsubscribe {\n    this._events = this._events || new Map();\n    const events = this._events;\n    const tail = events.get(event) || null;\n    const item = linkedItem(handler, tail);\n    events.set(event, item);\n\n    return () => {\n      const currentTail = events.get(event);\n\n      if (!item.next && !item.prev && currentTail === item) {\n        events.delete(event);\n      } else if (item === currentTail) {\n        events.set(event, item.prev);\n      }\n\n      unlinkItem(item);\n    };\n  }\n\n  private _emit<T extends keyof EventsMap<this>>(\n    name: T,\n    payload: Parameters<EventsMap<this>[T]>[0]\n  ) {\n    if (!this._events) return;\n\n    let current = this._events.get(name) || null;\n    while (current !== null) {\n      const prev = current.prev ? cloneLinkedItem(current.prev) : null;\n      current.value(payload);\n      current = prev;\n    }\n  }\n}\n","import { RuleIndex, RuleIndexOptions, RuleIndexOptionsOf, Public, RawRuleOf } from './RuleIndex';\nimport { Abilities, AbilityTuple, CanParameters, Subject } from './types';\nimport { Rule } from './Rule';\n\nexport interface AbilityOptions<A extends Abilities, Conditions>\n  extends RuleIndexOptions<A, Conditions> {}\nexport interface AnyAbility extends Public<PureAbility<any, any>> {}\nexport interface AbilityOptionsOf<T extends AnyAbility> extends RuleIndexOptionsOf<T> {}\n\nexport type AbilityClass<T extends AnyAbility> = new (\n  rules?: RawRuleOf<T>[],\n  options?: AbilityOptionsOf<T>\n) => T;\n\nexport type CreateAbility<T extends AnyAbility> = (\n  rules?: RawRuleOf<T>[],\n  options?: AbilityOptionsOf<T>\n) => T;\n\nexport class PureAbility<\n  A extends Abilities = AbilityTuple,\n  Conditions = unknown\n> extends RuleIndex<A, Conditions> {\n  can(...args: CanParameters<A>): boolean;\n  can(action: string, subject?: Subject, field?: string): boolean {\n    const rule = (this as PrimitiveAbility).relevantRuleFor(action, subject, field);\n    return !!rule && !rule.inverted;\n  }\n\n  relevantRuleFor(...args: CanParameters<A>): Rule<A, Conditions> | null;\n  relevantRuleFor(action: string, subject?: Subject, field?: string): Rule<A, Conditions> | null {\n    const subjectType = this.detectSubjectType(subject);\n    const rules = (this as any).rulesFor(action, subjectType, field);\n\n    for (let i = 0, length = rules.length; i < length; i++) {\n      if (rules[i].matchesConditions(subject)) {\n        return rules[i];\n      }\n    }\n\n    return null;\n  }\n\n  cannot(...args: CanParameters<A>): boolean;\n  cannot(action: string, subject?: Subject, field?: string): boolean {\n    return !(this as PrimitiveAbility).can(action, subject, field);\n  }\n}\n\n/**\n * helper interface that helps to emit js methods that have static parameters\n */\ninterface PrimitiveAbility<A extends Abilities = AbilityTuple, Conditions = unknown> {\n  can(action: string, subject?: Subject, field?: string): boolean;\n  relevantRuleFor(action: string, subject?: Subject, field?: string): Rule<A, Conditions> | null\n}\n","import {\n  $eq,\n  eq,\n  $ne,\n  ne,\n  $lt,\n  lt,\n  $lte,\n  lte,\n  $gt,\n  gt,\n  $gte,\n  gte,\n  $in,\n  within,\n  $nin,\n  nin,\n  $all,\n  all,\n  $size,\n  size,\n  $regex,\n  $options,\n  regex,\n  $elemMatch,\n  elemMatch,\n  $exists,\n  exists,\n  and,\n  createFactory,\n  BuildMongoQuery,\n  DefaultOperators,\n} from '@ucast/mongo2js';\nimport { ConditionsMatcher, AnyObject } from '../types';\nimport { Container, GenericFactory } from '../hkt';\n\nconst defaultInstructions = {\n  $eq,\n  $ne,\n  $lt,\n  $lte,\n  $gt,\n  $gte,\n  $in,\n  $nin,\n  $all,\n  $size,\n  $regex,\n  $options,\n  $elemMatch,\n  $exists,\n};\nconst defaultInterpreters = {\n  eq,\n  ne,\n  lt,\n  lte,\n  gt,\n  gte,\n  in: within,\n  nin,\n  all,\n  size,\n  regex,\n  elemMatch,\n  exists,\n  and,\n};\n\ninterface MongoQueryFactory extends GenericFactory {\n  produce: MongoQuery<this[0]>\n}\n\ntype MergeUnion<T, Keys extends keyof T = keyof T> = { [K in Keys]: T[K] };\nexport type MongoQuery<T = AnyObject> = BuildMongoQuery<MergeUnion<T>, {\n  toplevel: {},\n  field: Pick<DefaultOperators<MergeUnion<T>>['field'], keyof typeof defaultInstructions>\n}> & Container<MongoQueryFactory>;\n\ntype MongoQueryMatcherFactory =\n  (...args: Partial<Parameters<typeof createFactory>>) => ConditionsMatcher<MongoQuery>;\nexport const buildMongoQueryMatcher = ((instructions, interpreters, options) => createFactory(\n  { ...defaultInstructions, ...instructions },\n  { ...defaultInterpreters, ...interpreters },\n  options\n)) as MongoQueryMatcherFactory;\n\nexport const mongoQueryMatcher = createFactory(defaultInstructions, defaultInterpreters);\nexport type {\n  MongoQueryFieldOperators,\n  MongoQueryTopLevelOperators,\n  MongoQueryOperators,\n} from '@ucast/mongo2js';\n","import { FieldMatcher } from '../types';\n\nconst REGEXP_SPECIAL_CHARS = /[-/\\\\^$+?.()|[\\]{}]/g;\nconst REGEXP_ANY = /\\.?\\*+\\.?/g;\nconst REGEXP_STARS = /\\*+/;\nconst REGEXP_DOT = /\\./g;\n\nfunction detectRegexpPattern(match: string, index: number, string: string): string {\n  const quantifier = string[0] === '*' || match[0] === '.' && match[match.length - 1] === '.'\n    ? '+'\n    : '*';\n  const matcher = match.indexOf('**') === -1 ? '[^.]' : '.';\n  const pattern = match.replace(REGEXP_DOT, '\\\\$&')\n    .replace(REGEXP_STARS, matcher + quantifier);\n\n  return index + match.length === string.length ? `(?:${pattern})?` : pattern;\n}\n\nfunction escapeRegexp(match: string, index: number, string: string): string {\n  if (match === '.' && (string[index - 1] === '*' || string[index + 1] === '*')) {\n    return match;\n  }\n\n  return `\\\\${match}`;\n}\n\nfunction createPattern(fields: string[]) {\n  const patterns = fields.map(field => field\n    .replace(REGEXP_SPECIAL_CHARS, escapeRegexp)\n    .replace(REGEXP_ANY, detectRegexpPattern));\n  const pattern = patterns.length > 1 ? `(?:${patterns.join('|')})` : patterns[0];\n\n  return new RegExp(`^${pattern}$`);\n}\n\nexport const fieldPatternMatcher: FieldMatcher = (fields) => {\n  let pattern: RegExp | null;\n\n  return (field) => {\n    if (typeof pattern === 'undefined') {\n      pattern = fields.every(f => f.indexOf('*') === -1)\n        ? null\n        : createPattern(fields);\n    }\n\n    return pattern === null\n      ? fields.indexOf(field) !== -1\n      : pattern.test(field);\n  };\n};\n","import { PureAbility, AbilityOptions, AbilityOptionsOf } from './PureAbility';\nimport { RawRuleFrom } from './RawRule';\nimport { AbilityTuple } from './types';\nimport { MongoQuery, mongoQueryMatcher } from './matchers/conditions';\nimport { fieldPatternMatcher } from './matchers/field';\nimport { Public, RawRuleOf } from './RuleIndex';\n\n/**\n * @deprecated use createMongoAbility function instead and MongoAbility<Abilities> interface.\n * In the next major version PureAbility will be renamed to Ability and this class will be removed\n */\nexport class Ability<\n  A extends AbilityTuple = AbilityTuple,\n  C extends MongoQuery = MongoQuery\n> extends PureAbility<A, C> {\n  constructor(rules: RawRuleFrom<A, C>[] = [], options: AbilityOptions<A, C> = {}) {\n    super(rules, {\n      conditionsMatcher: mongoQueryMatcher,\n      fieldMatcher: fieldPatternMatcher,\n      ...options,\n    });\n  }\n}\n\nexport interface AnyMongoAbility extends Public<PureAbility<any, MongoQuery>> {}\nexport interface MongoAbility<\n  A extends AbilityTuple = AbilityTuple,\n  C extends MongoQuery = MongoQuery\n> extends PureAbility<A, C> {}\n\n/**\n * Creates Ability with MongoDB conditions matcher\n */\nexport function createMongoAbility<\n  T extends AnyMongoAbility = MongoAbility\n>(rules?: RawRuleOf<T>[], options?: AbilityOptionsOf<T>): T;\nexport function createMongoAbility<\n  A extends AbilityTuple = AbilityTuple,\n  C extends MongoQuery = MongoQuery\n>(rules?: RawRuleFrom<A, C>[], options?: AbilityOptions<A, C>): MongoAbility<A, C>;\nexport function createMongoAbility(rules: any[] = [], options = {}): AnyMongoAbility {\n  return new PureAbility(rules, {\n    conditionsMatcher: mongoQueryMatcher,\n    fieldMatcher: fieldPatternMatcher,\n    ...options,\n  });\n}\n","import { AnyMongoAbility, createMongoAbility, MongoAbility } from './Ability';\nimport { ProduceGeneric } from './hkt';\nimport { AbilityOptionsOf, AnyAbility } from './PureAbility';\nimport { Generics, RawRuleOf } from './RuleIndex';\nimport {\n  AbilityTuple, AnyClass, AnyObject, ExtractSubjectType as E, Normalize, SubjectType,\n  TaggedInterface\n} from './types';\n\nfunction isAbilityClass(factory: AbilityFactory<any>): factory is AnyClass {\n  return factory.prototype !== undefined && typeof factory.prototype.possibleRulesFor === 'function';\n}\n\nclass RuleBuilder<T extends AnyAbility> {\n  public _rule!: RawRuleOf<T>;\n\n  constructor(rule: RawRuleOf<T>) {\n    this._rule = rule;\n  }\n\n  because(reason: string): this {\n    this._rule.reason = reason;\n    return this;\n  }\n}\n\ntype AbilityFactory<T extends AnyAbility> = AnyClass<T> | ((rules?: any[], options?: any) => T);\ntype InstanceOf<T extends AnyAbility, S extends SubjectType> = S extends AnyClass<infer R>\n  ? R\n  : S extends (...args: any[]) => infer O\n    ? O\n    : S extends string\n      ? Exclude<Normalize<Generics<T>['abilities']>[1], SubjectType> extends TaggedInterface<string>\n        ? Extract<Normalize<Generics<T>['abilities']>[1], TaggedInterface<S>>\n        : AnyObject\n      : never;\ntype ConditionsOf<T extends AnyAbility, I extends {}> =\n  ProduceGeneric<Generics<T>['conditions'], I>;\ntype ActionFrom<T extends AbilityTuple, S extends SubjectType> = T extends any\n  ? S extends Extract<T[1], SubjectType> ? T[0] : never\n  : never;\ntype ActionOf<T extends AnyAbility, S extends SubjectType> = ActionFrom<Generics<T>['abilities'], S>;\ntype SubjectTypeOf<T extends AnyAbility> = E<Normalize<Generics<T>['abilities']>[1]>;\n\ntype SimpleCanParams<T extends AnyAbility> = Parameters<(\n  action: Generics<T>['abilities'] | Generics<T>['abilities'][]\n) => 0>;\ntype BuilderCanParameters<\n  S extends SubjectType,\n  I extends InstanceOf<T, S>,\n  T extends AnyAbility\n> = Generics<T>['abilities'] extends AbilityTuple\n  ? Parameters<(\n    action: ActionOf<T, S> | ActionOf<T, S>[],\n    subject: S | S[],\n    conditions?: ConditionsOf<T, I>\n  ) => 0>\n  : SimpleCanParams<T>;\n\ntype BuilderCanParametersWithFields<\n  S extends SubjectType,\n  I extends InstanceOf<T, S>,\n  F extends string,\n  T extends AnyAbility\n> = Generics<T>['abilities'] extends AbilityTuple\n  ? Parameters<(\n    action: ActionOf<T, S> | ActionOf<T, S>[],\n    subject: S | S[],\n    fields?: F | F[],\n    conditions?: ConditionsOf<T, I>\n  ) => 0>\n  : SimpleCanParams<T>;\ntype Keys<T> = string & keyof T;\n\ntype AddRule<T extends AnyAbility> = {\n  <\n    I extends InstanceOf<T, S>,\n    F extends string = Keys<I>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParametersWithFields<S, I, F | Keys<I>, T>): RuleBuilder<T>;\n  <\n    I extends InstanceOf<T, S>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParameters<S, I, T>): RuleBuilder<T>;\n};\n\nexport class AbilityBuilder<T extends AnyAbility> {\n  public rules: RawRuleOf<T>[] = [];\n  private readonly _createAbility: AbilityFactory<T>;\n  public can: AddRule<T>;\n  public cannot: AddRule<T>;\n  public build: (options?: AbilityOptionsOf<T>) => T;\n\n  constructor(AbilityType: AbilityFactory<T>) {\n    this._createAbility = AbilityType;\n\n    this.can = (\n      action: string | string[],\n      subject?: SubjectType | SubjectType[],\n      conditionsOrFields?: string | string[] | Generics<T>['conditions'],\n      conditions?: Generics<T>['conditions']\n    ) => this._addRule(action, subject, conditionsOrFields, conditions, false);\n    this.cannot = (\n      action: string | string[],\n      subject?: SubjectType | SubjectType[],\n      conditionsOrFields?: string | string[] | Generics<T>['conditions'],\n      conditions?: Generics<T>['conditions']\n    ) => this._addRule(action, subject, conditionsOrFields, conditions, true);\n\n    this.build = options => (isAbilityClass(this._createAbility)\n      ? new this._createAbility(this.rules, options)\n      : this._createAbility(this.rules, options));\n  }\n\n  private _addRule(\n    action: string | string[],\n    subject?: SubjectType | SubjectType[],\n    conditionsOrFields?: string | string[] | Generics<T>['conditions'],\n    conditions?: Generics<T>['conditions'],\n    inverted?: boolean\n  ): RuleBuilder<T> {\n    const rule = { action } as RawRuleOf<T>;\n\n    if (inverted) rule.inverted = inverted;\n    if (subject) {\n      rule.subject = subject;\n\n      if (Array.isArray(conditionsOrFields) || typeof conditionsOrFields === 'string') {\n        rule.fields = conditionsOrFields;\n      } else if (typeof conditionsOrFields !== 'undefined') {\n        rule.conditions = conditionsOrFields;\n      }\n\n      if (typeof conditions !== 'undefined') {\n        rule.conditions = conditions;\n      }\n    }\n\n    this.rules.push(rule);\n    return new RuleBuilder(rule);\n  }\n}\n\ntype DSL<T extends AnyAbility, R> = (\n  can: AbilityBuilder<T>['can'],\n  cannot: AbilityBuilder<T>['cannot']\n) => R;\n\nexport function defineAbility<\n  T extends AnyMongoAbility = MongoAbility\n>(define: DSL<T, Promise<void>>, options?: AbilityOptionsOf<T>): Promise<T>;\nexport function defineAbility<\n  T extends AnyMongoAbility = MongoAbility\n>(define: DSL<T, void>, options?: AbilityOptionsOf<T>): T;\nexport function defineAbility<\n  T extends AnyMongoAbility\n>(define: DSL<T, void | Promise<void>>, options?: AbilityOptionsOf<T>): T | Promise<T> {\n  const builder = new AbilityBuilder<T>(createMongoAbility);\n  const result = define(builder.can, builder.cannot);\n\n  if (result && typeof result.then === 'function') {\n    return result.then(() => builder.build(options));\n  }\n\n  return builder.build(options);\n}\n","import { AnyAbility } from './PureAbility';\nimport { Normalize, Subject } from './types';\nimport { Generics } from './RuleIndex';\nimport { getSubjectTypeName } from './utils';\n\nexport type GetErrorMessage = (error: ForbiddenError<AnyAbility>) => string;\n/** @deprecated will be removed in the next major release */\nexport const getDefaultErrorMessage: GetErrorMessage = error => `Cannot execute \"${error.action}\" on \"${error.subjectType}\"`;\n\nconst NativeError = function NError(this: Error, message: string) {\n  this.message = message;\n} as unknown as new (message: string) => Error;\n\nNativeError.prototype = Object.create(Error.prototype);\n\nexport class ForbiddenError<T extends AnyAbility> extends NativeError {\n  public readonly ability!: T;\n  public action!: Normalize<Generics<T>['abilities']>[0];\n  public subject!: Generics<T>['abilities'][1];\n  public field?: string;\n  public subjectType!: string;\n\n  static _defaultErrorMessage = getDefaultErrorMessage;\n\n  static setDefaultMessage(messageOrFn: string | GetErrorMessage) {\n    this._defaultErrorMessage = typeof messageOrFn === 'string' ? () => messageOrFn : messageOrFn;\n  }\n\n  static from<U extends AnyAbility>(ability: U): ForbiddenError<U> {\n    return new this<U>(ability);\n  }\n\n  private constructor(ability: T) {\n    super('');\n    this.ability = ability;\n\n    if (typeof Error.captureStackTrace === 'function') {\n      this.name = 'ForbiddenError';\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  setMessage(message: string): this {\n    this.message = message;\n    return this;\n  }\n\n  throwUnlessCan(...args: Parameters<T['can']>): void;\n  throwUnlessCan(action: string, subject?: Subject, field?: string): void {\n    const error = (this as any).unlessCan(action, subject, field);\n    if (error) throw error;\n  }\n\n  unlessCan(...args: Parameters<T['can']>): this | undefined;\n  unlessCan(action: string, subject?: Subject, field?: string): this | undefined {\n    const rule = this.ability.relevantRuleFor(action, subject, field);\n\n    if (rule && !rule.inverted) {\n      return;\n    }\n\n    this.action = action;\n    this.subject = subject;\n    this.subjectType = getSubjectTypeName(this.ability.detectSubjectType(subject));\n    this.field = field;\n\n    const reason = rule ? rule.reason : '';\n    // eslint-disable-next-line no-underscore-dangle\n    this.message = this.message || reason || (this.constructor as any)._defaultErrorMessage(this);\n    return this; // eslint-disable-line consistent-return\n  }\n}\n","import {\n\tAbilityBuilder,\n\tCreateAbility,\n\tcreateMongoAbility,\n\tMongoAbility,\n} from '@casl/ability'\nimport { z } from 'zod'\n\nimport { errors } from './messages/error'\nimport { User } from './models/user'\nimport { permissions } from './permissions'\nimport { billingSubject } from './subjects/billing'\nimport { inviteSubject } from './subjects/invite'\nimport { organizationSubject } from './subjects/organization'\nimport { projectSubject } from './subjects/project'\nimport { userSubject } from './subjects/user'\n\nexport * from './models/organization'\nexport * from './models/project'\nexport * from './models/user'\nexport * from './roles'\n\nconst appAbilitiesSchema = z.union([\n\tuserSubject,\n\tprojectSubject,\n\torganizationSubject,\n\tinviteSubject,\n\tbillingSubject,\n\tz.tuple([z.literal('manage'), z.literal('all')]),\n])\n\ntype AppAbilities = z.infer<typeof appAbilitiesSchema>\n\nexport type AppAbility = MongoAbility<AppAbilities>\nexport const createAppAbility = createMongoAbility as CreateAbility<AppAbility>\n\nexport function defineAbilityFor(user: User) {\n\tconst builder = new AbilityBuilder(createAppAbility)\n\n\tif (typeof permissions[user.role] !== 'function') {\n\t\tthrow new Error(errors.PERMISSIONS_NOT_FOUND.replace('{role}', user.role))\n\t}\n\n\tpermissions[user.role](user, builder)\n\n\tconst ability = builder.build({\n\t\tdetectSubjectType(subject) {\n\t\t\treturn subject.__typename\n\t\t},\n\t})\n\n\tability.can = ability.can.bind(ability)\n\tability.cannot = ability.cannot.bind(ability)\n\n\treturn ability\n}\n","export const errors = {\n\tPERMISSIONS_NOT_FOUND: 'Permissions for role {role} not found',\n}\n","import { AbilityBuilder } from '@casl/ability'\n\nimport { AppAbility } from '.'\nimport { User } from './models/user'\nimport { Role } from './roles'\n\ntype PermissionsByRole = (\n\tuser: User,\n\tbuilder: AbilityBuilder<AppAbility>,\n) => void\n\nexport const permissions: Record<Role, PermissionsByRole> = {\n\tADMIN(user, { can, cannot }) {\n\t\tcan('manage', 'all')\n\n\t\tcannot(['update', 'transfer_ownership'], 'Organization')\n\t\tcan(['update', 'transfer_ownership'], 'Organization', {\n\t\t\townerId: { $eq: user.id },\n\t\t})\n\t},\n\tMEMBER(user, { can }) {\n\t\tcan('get', 'User')\n\t\tcan(['create', 'get'], 'Project')\n\t\tcan(['update', 'delete'], 'Project', {\n\t\t\townerId: { $eq: user.id },\n\t\t})\n\t},\n\tBILLING(_, { can }) {\n\t\tcan('get', 'User')\n\t\tcan('get', 'Project')\n\t\tcan('manage', 'Billing')\n\t},\n}\n","import { z } from 'zod'\n\nexport const billingSubject = z.tuple([\n\tz.union([z.literal('manage'), z.literal('get'), z.literal('export')]),\n\tz.literal('Billing'),\n])\n\nexport type BillingSubject = z.infer<typeof billingSubject>\n","import { z } from 'zod'\n\nexport const inviteSubject = z.tuple([\n\tz.union([\n\t\tz.literal('manage'),\n\t\tz.literal('get'),\n\t\tz.literal('create'),\n\t\tz.literal('delete'),\n\t]),\n\tz.literal('Invite'),\n])\n\nexport type InviteSubject = z.infer<typeof inviteSubject>\n","import { z } from 'zod'\n\nimport { organizationSchema } from '../models/organization'\n\nexport const organizationSubject = z.tuple([\n\tz.union([\n\t\tz.literal('manage'),\n\t\tz.literal('update'),\n\t\tz.literal('delete'),\n\t\tz.literal('transfer_ownership'),\n\t]),\n\tz.union([z.literal('Organization'), organizationSchema]),\n])\n\nexport type OrganizationSubject = z.infer<typeof organizationSubject>\n","import { z } from 'zod'\n\nexport const organizationSchema = z.object({\n\t__typename: z.literal('Organization').default('Organization'),\n\tid: z.string(),\n\townerId: z.string(),\n})\n\nexport type Organization = z.infer<typeof organizationSchema>\n","import { z } from 'zod'\n\nimport { projectSchema } from '../models/project'\n\nexport const projectSubject = z.tuple([\n\tz.union([\n\t\tz.literal('manage'),\n\t\tz.literal('get'),\n\t\tz.literal('create'),\n\t\tz.literal('update'),\n\t\tz.literal('delete'),\n\t]),\n\tz.union([z.literal('Project'), projectSchema]),\n])\n\nexport type ProjectSubject = z.infer<typeof projectSubject>\n","import { z } from 'zod'\n\nexport const projectSchema = z.object({\n\t__typename: z.literal('Project').default('Project'),\n\tid: z.string(),\n\townerId: z.string(),\n})\n\nexport type Project = z.infer<typeof projectSchema>\n","import { z } from 'zod'\n\nexport const userSubject = z.tuple([\n\tz.union([\n\t\tz.literal('manage'),\n\t\tz.literal('get'),\n\t\tz.literal('create'),\n\t\tz.literal('update'),\n\t\tz.literal('delete'),\n\t]),\n\n\tz.literal('User'),\n])\n\nexport type UserSubject = z.infer<typeof userSubject>\n","import { z } from 'zod'\n\nimport { rolesSchema } from '../roles'\n\nexport const userSchema = z.object({\n\t// __typename: z.literal('User').default('User'),\n\tid: z.string(),\n\trole: rolesSchema,\n})\n\nexport type User = z.infer<typeof userSchema>\n","import { z } from 'zod'\n\nexport const rolesSchema = z.union([\n\tz.literal('ADMIN'),\n\tz.literal('MEMBER'),\n\tz.literal('BILLING'),\n])\n\nexport type Role = z.infer<typeof rolesSchema>\n","import { defineAbilityFor, Role, userSchema } from '@saas/auth'\n\nexport function getUserPermissions(userId: string, role: Role) {\n\tconst authUser = userSchema.parse({\n\t\tid: userId,\n\t\trole,\n\t})\n\n\tconst ability = defineAbilityFor(authUser)\n\n\treturn ability\n}\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function acceptInvite(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.post(\n\t\t\t'/invites/:inviteId/accept',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Invites'],\n\t\t\t\t\tsummary: 'Accept an invite.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tinviteId: z.string().uuid(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t204: z.null(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\t\t\t\tconst { inviteId } = request.params\n\n\t\t\t\tconst invite = await prisma.invite.findUnique({\n\t\t\t\t\twhere: { id: inviteId },\n\t\t\t\t})\n\n\t\t\t\tif (!invite) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.invites.NOT_FOUND)\n\t\t\t\t}\n\n\t\t\t\tconst user = await prisma.user.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: userId,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!user) {\n\t\t\t\t\tthrow new BadRequestError(errors.user.NOT_FOUND)\n\t\t\t\t}\n\n\t\t\t\tif (invite.email !== user.email) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.invites.NOT_ALLOWED)\n\t\t\t\t}\n\n\t\t\t\tawait prisma.$transaction([\n\t\t\t\t\tprisma.member.create({\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tuserId,\n\t\t\t\t\t\t\torganizationId: invite.organizationId,\n\t\t\t\t\t\t\trole: invite.role,\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t\tprisma.invite.delete({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\tid: invite.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t])\n\n\t\t\t\treturn reply.status(204).send()\n\t\t\t},\n\t\t)\n}\n","import { rolesSchema } from '@saas/auth'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { createInviteEmail } from '@/http/emails/create-invite-email-email'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { getUserPermissions } from '@/utils/get-user-permissions'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\nimport { UnauthorizedError } from '../_errors/unauthorized-error'\n\nexport async function createInvite(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.post(\n\t\t\t'/organization/:slug/invites',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Invites'],\n\t\t\t\t\tsummary: 'Create a new invite.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tbody: z.object({\n\t\t\t\t\t\temail: z.string().email(),\n\t\t\t\t\t\trole: rolesSchema,\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t201: z.object({\n\t\t\t\t\t\t\tinviteId: z.string().uuid(),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { slug } = request.params\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst { organization, membership } =\n\t\t\t\t\tawait request.getCurrentUserMembership(slug)\n\n\t\t\t\tconst { cannot } = getUserPermissions(userId, membership.role)\n\n\t\t\t\tif (cannot('create', 'Invite')) {\n\t\t\t\t\tthrow new UnauthorizedError(errors.organizations.invites.CANNOT_SEND)\n\t\t\t\t}\n\n\t\t\t\tconst { email, role } = request.body\n\n\t\t\t\tconst domain = email.split('@').at(1)\n\n\t\t\t\tif (\n\t\t\t\t\torganization.shouldAttachUsersByDomain &&\n\t\t\t\t\torganization.domain === domain\n\t\t\t\t) {\n\t\t\t\t\tthrow new BadRequestError(\n\t\t\t\t\t\terrors.organizations.invites.AUTOJOIN_DOMAIN.replace(\n\t\t\t\t\t\t\t'{domain}',\n\t\t\t\t\t\t\tdomain,\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tconst inviteWithSameEmail = await prisma.invite.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\temail_organizationId: {\n\t\t\t\t\t\t\temail,\n\t\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (inviteWithSameEmail) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.invites.ALREADY_EXISTS)\n\t\t\t\t}\n\n\t\t\t\tconst memberWithSameEmail = await prisma.member.findFirst({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t\tuser: {\n\t\t\t\t\t\t\temail,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (memberWithSameEmail) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.invites.ALREADY_MEMBER)\n\t\t\t\t}\n\n\t\t\t\tconst { id } = await prisma.invite.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t\tauthorId: userId,\n\t\t\t\t\t\temail,\n\t\t\t\t\t\trole,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tconst invite = await prisma.invite.findUnique({\n\t\t\t\t\twhere: { id },\n\t\t\t\t\tinclude: {\n\t\t\t\t\t\tauthor: true,\n\t\t\t\t\t\torganization: true,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!invite) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.invites.NOT_FOUND)\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait createInviteEmail({\n\t\t\t\t\t\tinviteId: invite.id,\n\t\t\t\t\t\tauthorName: invite.author?.name ?? '',\n\t\t\t\t\t\torganizationName: invite.organization.name,\n\t\t\t\t\t\trole: invite.role,\n\t\t\t\t\t\ttargetEmail: email,\n\t\t\t\t\t})\n\t\t\t\t} catch {\n\t\t\t\t\tthrow new BadRequestError(errors.services.SEND_EMAIL)\n\t\t\t\t}\n\n\t\t\t\treturn reply.status(201).send({\n\t\t\t\t\tinviteId: invite.id,\n\t\t\t\t})\n\t\t\t},\n\t\t)\n}\n","import { Role } from '@saas/auth'\n\ninterface CreateInviteEmailTemplateParams {\n\tauthorName: string\n\torganizationName: string\n\trole: Role\n\tacceptLink: string\n\trejectLink: string\n}\n\nexport function createInviteEmailTemplate({\n\tauthorName,\n\torganizationName,\n\trole,\n\tacceptLink,\n\trejectLink,\n}: CreateInviteEmailTemplateParams) {\n\tfunction renderRoleName() {\n\t\tswitch (role) {\n\t\t\tcase 'ADMIN':\n\t\t\t\treturn 'owner'\n\t\t\tcase 'MEMBER':\n\t\t\t\treturn 'member'\n\t\t\tcase 'BILLING':\n\t\t\t\treturn 'billing member'\n\t\t}\n\t}\n\n\treturn `\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tHi,\n\t\t</p>\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t${authorName} has invited you to join <strong>${organizationName}</strong> as ${renderRoleName()}. We would love to have you as part of our team!\n\t\t</p>\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tTo accept the invitation, click the link below:\n\t\t</p>\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t<a href=\"${acceptLink}\" style=\"text-decoration:underline;color:currentColor;font-weight:bold;\">Accept Invite</a>\n\t\t</p>\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t If you do not wish to join, you can decline the invitation using this link:\n\t\t</p>\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\t<a href=\"${rejectLink}\" style=\"text-decoration:underline;color:currentColor;font-weight:bold;\">Reject Invite</a>\n\t\t</p>\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tIf you have any questions or need further assistance, feel free to reach out to us.\n\t\t</p>\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tBest regards,\n\t\t\t<br />\n\t\t\t<strong>${organizationName} Team</strong>\n\t\t</p>\n\t`\n}\n","import { Role } from '@saas/auth'\nimport { env } from '@saas/env'\nimport Mail from 'nodemailer/lib/mailer'\n\nimport { emailService } from '@/lib/mail'\n\nimport { createInviteEmailTemplate } from './template/create-invite-email.template'\n\ninterface CreateEmailParams {\n\tinviteId: string\n\tauthorName: string\n\torganizationName: string\n\trole: Role\n\ttargetEmail: string\n}\n\nexport async function createInviteEmail({\n\tinviteId,\n\tauthorName,\n\torganizationName,\n\trole,\n\ttargetEmail,\n}: CreateEmailParams) {\n\tconst htmlTemplate = createInviteEmailTemplate({\n\t\tauthorName,\n\t\torganizationName,\n\t\trole,\n\t\tacceptLink: `${env.NEXT_PUBLIC_URL}/invite/${inviteId}`,\n\t\trejectLink: `${env.NEXT_PUBLIC_URL}/invite/${inviteId}/decline`,\n\t})\n\n\tconst emailOptions: Mail.Options = {\n\t\tfrom: env.MAIL_SMTP_EMAIL,\n\t\tto: targetEmail,\n\t\tsubject: `Invitation to Join ${organizationName}`,\n\t\thtml: htmlTemplate,\n\t}\n\n\tawait emailService.sendMail(emailOptions)\n}\n","import { rolesSchema } from '@saas/auth'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { prisma } from '@/lib/prisma'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function getInvite(app: FastifyInstance) {\n\tapp.withTypeProvider<ZodTypeProvider>().get(\n\t\t'/invites/:inviteId',\n\t\t{\n\t\t\tschema: {\n\t\t\t\ttags: ['Invites'],\n\t\t\t\tsummary: 'Get an invite details.',\n\t\t\t\tparams: z.object({\n\t\t\t\t\tinviteId: z.string().uuid(),\n\t\t\t\t}),\n\t\t\t\tresponse: {\n\t\t\t\t\t200: z.object({\n\t\t\t\t\t\tinvite: z.object({\n\t\t\t\t\t\t\tid: z.string().uuid(),\n\t\t\t\t\t\t\temail: z.string().email(),\n\t\t\t\t\t\t\trole: rolesSchema,\n\t\t\t\t\t\t\tcreatedAt: z.date(),\n\t\t\t\t\t\t\tauthor: z\n\t\t\t\t\t\t\t\t.object({\n\t\t\t\t\t\t\t\t\tid: z.string().uuid(),\n\t\t\t\t\t\t\t\t\tname: z.string().nullable(),\n\t\t\t\t\t\t\t\t\temail: z.string().email(),\n\t\t\t\t\t\t\t\t\tavatarUrl: z.string().nullable(),\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.nullable(),\n\t\t\t\t\t\t\torganization: z.object({\n\t\t\t\t\t\t\t\tname: z.string(),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}),\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tasync (request, reply) => {\n\t\t\tconst { inviteId } = request.params\n\n\t\t\tconst invite = await prisma.invite.findUnique({\n\t\t\t\twhere: { id: inviteId },\n\t\t\t\tselect: {\n\t\t\t\t\tid: true,\n\t\t\t\t\temail: true,\n\t\t\t\t\trole: true,\n\t\t\t\t\tcreatedAt: true,\n\t\t\t\t\tauthor: {\n\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\tid: true,\n\t\t\t\t\t\t\tname: true,\n\t\t\t\t\t\t\tavatarUrl: true,\n\t\t\t\t\t\t\temail: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\torganization: {\n\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\tname: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tif (!invite) {\n\t\t\t\tthrow new BadRequestError(errors.organizations.invites.NOT_FOUND)\n\t\t\t}\n\n\t\t\treturn reply.status(200).send({\n\t\t\t\tinvite,\n\t\t\t})\n\t\t},\n\t)\n}\n","import { rolesSchema } from '@saas/auth'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { getUserPermissions } from '@/utils/get-user-permissions'\n\nimport { UnauthorizedError } from '../_errors/unauthorized-error'\n\nexport async function getInvites(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.get(\n\t\t\t'/organization/:slug/invites',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Invites'],\n\t\t\t\t\tsummary: 'Get organization invites.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t200: z.object({\n\t\t\t\t\t\t\tinvites: z.array(\n\t\t\t\t\t\t\t\tz.object({\n\t\t\t\t\t\t\t\t\tid: z.string().uuid(),\n\t\t\t\t\t\t\t\t\temail: z.string().email(),\n\t\t\t\t\t\t\t\t\trole: rolesSchema,\n\t\t\t\t\t\t\t\t\tcreatedAt: z.date(),\n\t\t\t\t\t\t\t\t\tauthor: z\n\t\t\t\t\t\t\t\t\t\t.object({\n\t\t\t\t\t\t\t\t\t\t\tid: z.string().uuid(),\n\t\t\t\t\t\t\t\t\t\t\tname: z.string().nullable(),\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.nullable(),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { slug } = request.params\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst { organization, membership } =\n\t\t\t\t\tawait request.getCurrentUserMembership(slug)\n\n\t\t\t\tconst { cannot } = getUserPermissions(userId, membership.role)\n\n\t\t\t\tif (cannot('get', 'Invite')) {\n\t\t\t\t\tthrow new UnauthorizedError(errors.organizations.invites.CANNOT_LIST)\n\t\t\t\t}\n\n\t\t\t\tconst invites = await prisma.invite.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t},\n\t\t\t\t\torderBy: {\n\t\t\t\t\t\tcreatedAt: 'desc',\n\t\t\t\t\t},\n\t\t\t\t\tselect: {\n\t\t\t\t\t\tid: true,\n\t\t\t\t\t\temail: true,\n\t\t\t\t\t\trole: true,\n\t\t\t\t\t\tcreatedAt: true,\n\t\t\t\t\t\tauthor: {\n\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\tid: true,\n\t\t\t\t\t\t\t\tname: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treturn reply.status(201).send({\n\t\t\t\t\tinvites,\n\t\t\t\t})\n\t\t\t},\n\t\t)\n}\n","import { rolesSchema } from '@saas/auth'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function getPendingInvites(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.get(\n\t\t\t'/pending-invites',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Invites'],\n\t\t\t\t\tsummary: 'Get all user pending invites.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t200: z.object({\n\t\t\t\t\t\t\tinvites: z.array(\n\t\t\t\t\t\t\t\tz.object({\n\t\t\t\t\t\t\t\t\tid: z.string().uuid(),\n\t\t\t\t\t\t\t\t\temail: z.string().email(),\n\t\t\t\t\t\t\t\t\trole: rolesSchema,\n\t\t\t\t\t\t\t\t\tcreatedAt: z.date(),\n\t\t\t\t\t\t\t\t\tauthor: z\n\t\t\t\t\t\t\t\t\t\t.object({\n\t\t\t\t\t\t\t\t\t\t\tid: z.string().uuid(),\n\t\t\t\t\t\t\t\t\t\t\tname: z.string().nullable(),\n\t\t\t\t\t\t\t\t\t\t\tavatarUrl: z.string().nullable(),\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.nullable(),\n\t\t\t\t\t\t\t\t\torganization: z.object({\n\t\t\t\t\t\t\t\t\t\tname: z.string(),\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request) => {\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst user = await prisma.user.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: userId,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!user) {\n\t\t\t\t\tthrow new BadRequestError(errors.user.NOT_FOUND)\n\t\t\t\t}\n\n\t\t\t\tconst invites = await prisma.invite.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\temail: user.email,\n\t\t\t\t\t},\n\t\t\t\t\tselect: {\n\t\t\t\t\t\tid: true,\n\t\t\t\t\t\temail: true,\n\t\t\t\t\t\trole: true,\n\t\t\t\t\t\tcreatedAt: true,\n\t\t\t\t\t\tauthor: {\n\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\tid: true,\n\t\t\t\t\t\t\t\tname: true,\n\t\t\t\t\t\t\t\tavatarUrl: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\torganization: {\n\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\tname: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treturn { invites }\n\t\t\t},\n\t\t)\n}\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function rejectInvite(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.post(\n\t\t\t'/invites/:inviteId/reject',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Invites'],\n\t\t\t\t\tsummary: 'Reject an invite.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tinviteId: z.string().uuid(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t204: z.null(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\t\t\t\tconst { inviteId } = request.params\n\n\t\t\t\tconst invite = await prisma.invite.findUnique({\n\t\t\t\t\twhere: { id: inviteId },\n\t\t\t\t})\n\n\t\t\t\tif (!invite) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.invites.NOT_FOUND)\n\t\t\t\t}\n\n\t\t\t\tconst user = await prisma.user.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: userId,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!user) {\n\t\t\t\t\tthrow new BadRequestError(errors.user.NOT_FOUND)\n\t\t\t\t}\n\n\t\t\t\tif (invite.email !== user.email) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.invites.NOT_ALLOWED)\n\t\t\t\t}\n\n\t\t\t\tawait prisma.invite.delete({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: invite.id,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treturn reply.status(204).send()\n\t\t\t},\n\t\t)\n}\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { getUserPermissions } from '@/utils/get-user-permissions'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\nimport { UnauthorizedError } from '../_errors/unauthorized-error'\n\nexport async function revokeInvite(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.delete(\n\t\t\t'/organization/:slug/invites/:inviteId',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Invites'],\n\t\t\t\t\tsummary: 'Revoke an invite.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t\tinviteId: z.string().uuid(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t204: z.null(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { slug, inviteId } = request.params\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst { organization, membership } =\n\t\t\t\t\tawait request.getCurrentUserMembership(slug)\n\n\t\t\t\tconst { cannot } = getUserPermissions(userId, membership.role)\n\n\t\t\t\tif (cannot('delete', 'Invite')) {\n\t\t\t\t\tthrow new UnauthorizedError(\n\t\t\t\t\t\terrors.organizations.invites.CANNOT_REVOKE,\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tconst invite = await prisma.invite.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: inviteId,\n\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!invite) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.invites.NOT_FOUND)\n\t\t\t\t}\n\n\t\t\t\tawait prisma.invite.delete({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: inviteId,\n\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treturn reply.status(204).send()\n\t\t\t},\n\t\t)\n}\n","import { rolesSchema } from '@saas/auth'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { getUserPermissions } from '@/utils/get-user-permissions'\n\nimport { UnauthorizedError } from '../_errors/unauthorized-error'\n\nexport async function getMembers(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.get(\n\t\t\t'/organization/:slug/members',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Organization members'],\n\t\t\t\t\tsummary: 'Show organization members list.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t200: z.object({\n\t\t\t\t\t\t\tmembers: z.array(\n\t\t\t\t\t\t\t\tz.object({\n\t\t\t\t\t\t\t\t\tmemberId: z.string().uuid(),\n\t\t\t\t\t\t\t\t\tuserId: z.string().uuid(),\n\t\t\t\t\t\t\t\t\trole: rolesSchema,\n\t\t\t\t\t\t\t\t\tname: z.string().nullable(),\n\t\t\t\t\t\t\t\t\temail: z.string().email(),\n\t\t\t\t\t\t\t\t\tavatarUrl: z.string().nullable(),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { slug } = request.params\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst { organization, membership } =\n\t\t\t\t\tawait request.getCurrentUserMembership(slug)\n\n\t\t\t\tconst { cannot } = getUserPermissions(userId, membership.role)\n\n\t\t\t\tif (cannot('get', 'User')) {\n\t\t\t\t\tthrow new UnauthorizedError(errors.organizations.members.CANNOT_LIST)\n\t\t\t\t}\n\n\t\t\t\tconst members = await prisma.member.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t},\n\t\t\t\t\torderBy: {\n\t\t\t\t\t\trole: 'asc',\n\t\t\t\t\t},\n\t\t\t\t\tselect: {\n\t\t\t\t\t\tid: true,\n\t\t\t\t\t\trole: true,\n\t\t\t\t\t\tuser: {\n\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\tid: true,\n\t\t\t\t\t\t\t\tname: true,\n\t\t\t\t\t\t\t\temail: true,\n\t\t\t\t\t\t\t\tavatarUrl: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tconst membersFlatten = members.map((member) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmemberId: member.id,\n\t\t\t\t\t\tuserId: member.user.id,\n\t\t\t\t\t\trole: member.role,\n\t\t\t\t\t\tname: member.user.name,\n\t\t\t\t\t\temail: member.user.email,\n\t\t\t\t\t\tavatarUrl: member.user.avatarUrl,\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\treturn reply.status(200).send({\n\t\t\t\t\tmembers: membersFlatten,\n\t\t\t\t})\n\t\t\t},\n\t\t)\n}\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { getUserPermissions } from '@/utils/get-user-permissions'\n\nimport { UnauthorizedError } from '../_errors/unauthorized-error'\n\nexport async function removeMember(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.delete(\n\t\t\t'/organization/:slug/members/:memberId',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Organization members'],\n\t\t\t\t\tsummary: 'Remove a member from a organization.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t\tmemberId: z.string().uuid(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t204: z.null(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { slug, memberId } = request.params\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst { organization, membership } =\n\t\t\t\t\tawait request.getCurrentUserMembership(slug)\n\n\t\t\t\tconst { cannot } = getUserPermissions(userId, membership.role)\n\n\t\t\t\tif (cannot('delete', 'User')) {\n\t\t\t\t\tthrow new UnauthorizedError(\n\t\t\t\t\t\terrors.organizations.members.CANNOT_DELETE,\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tawait prisma.member.delete({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: memberId,\n\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treturn reply.status(204).send()\n\t\t\t},\n\t\t)\n}\n","import { rolesSchema } from '@saas/auth'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { getUserPermissions } from '@/utils/get-user-permissions'\n\nimport { UnauthorizedError } from '../_errors/unauthorized-error'\n\nexport async function updateMember(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.put(\n\t\t\t'/organization/:slug/members/:memberId',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Organization members'],\n\t\t\t\t\tsummary: 'Update a member from a organization.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t\tmemberId: z.string().uuid(),\n\t\t\t\t\t}),\n\t\t\t\t\tbody: z.object({\n\t\t\t\t\t\trole: rolesSchema,\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t204: z.null(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { slug, memberId } = request.params\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst { organization, membership } =\n\t\t\t\t\tawait request.getCurrentUserMembership(slug)\n\n\t\t\t\tconst { cannot } = getUserPermissions(userId, membership.role)\n\n\t\t\t\tif (cannot('update', 'User')) {\n\t\t\t\t\tthrow new UnauthorizedError(\n\t\t\t\t\t\terrors.organizations.members.CANNOT_UPDATE,\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tconst { role } = request.body\n\n\t\t\t\tawait prisma.member.update({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: memberId,\n\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t},\n\t\t\t\t\tdata: {\n\t\t\t\t\t\trole,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treturn reply.status(204).send()\n\t\t\t},\n\t\t)\n}\n","import dns from 'node:dns'\n\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { prisma } from '@/lib/prisma'\n\nimport { auth } from '../../middlewares/auth'\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nconst dnsPromisses = dns.promises\n\nexport async function authorizeDomain(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.post(\n\t\t\t'/organization/:slug/domain',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Organizations'],\n\t\t\t\t\tsummary: 'Check if a domain is verified and save information.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tbody: z.object({\n\t\t\t\t\t\tdomain: z.string(),\n\t\t\t\t\t\tshouldAttachUsersByDomain: z.boolean().optional(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t204: z.null(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { slug: organizationSlug } = request.params\n\t\t\t\tconst { domain, shouldAttachUsersByDomain } = request.body\n\n\t\t\t\tconst organization = await prisma.organization.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tslug: organizationSlug,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!organization) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.entity.NOT_FOUND)\n\t\t\t\t}\n\n\t\t\t\tconst formatedDomain = `_saas.${domain}`\n\n\t\t\t\tlet checkForDomainTxtRecords = null\n\n\t\t\t\ttry {\n\t\t\t\t\tcheckForDomainTxtRecords =\n\t\t\t\t\t\tawait dnsPromisses.resolveTxt(formatedDomain)\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.domain.CHECK_DNS)\n\t\t\t\t}\n\n\t\t\t\tconst checkForValidValue = checkForDomainTxtRecords\n\t\t\t\t\t.flat()\n\t\t\t\t\t.find(\n\t\t\t\t\t\t(item) =>\n\t\t\t\t\t\t\titem.includes('saas-domain-verification') && item.includes('='),\n\t\t\t\t\t)\n\n\t\t\t\tif (!checkForValidValue) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.domain.TXT_NOT_FOUND)\n\t\t\t\t}\n\n\t\t\t\tconst validationIdFromDomain = checkForValidValue.split('=').at(1)!\n\n\t\t\t\tif (organization.domainValidationId !== validationIdFromDomain) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.domain.TXT_INVALID)\n\t\t\t\t}\n\n\t\t\t\tif (domain) {\n\t\t\t\t\tconst organizationByDomain = await prisma.organization.findFirst({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\tdomain,\n\t\t\t\t\t\t\tid: {\n\t\t\t\t\t\t\t\tnot: organization.id,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\n\t\t\t\t\tif (organizationByDomain) {\n\t\t\t\t\t\tthrow new BadRequestError(\n\t\t\t\t\t\t\terrors.organizations.domain.ALREADY_EXISTS,\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait prisma.organization.update({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: organization.id,\n\t\t\t\t\t},\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tdomain,\n\t\t\t\t\t\tshouldAttachUsersByDomain,\n\t\t\t\t\t\tdomainValidatedAt: new Date(),\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treply.status(204).send()\n\t\t\t},\n\t\t)\n}\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { generateSlug } from '@/utils/generate-slug'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function creteOrganization(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.post(\n\t\t\t'/organizations',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Organizations'],\n\t\t\t\t\tsummary: 'Create a new organization.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tbody: z.object({\n\t\t\t\t\t\tname: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t201: z.object({\n\t\t\t\t\t\t\torganizationId: z.string().uuid(),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst { name } = request.body\n\n\t\t\t\tconst newSlug = generateSlug(name)\n\n\t\t\t\tconst organizationNameAlreadyExists =\n\t\t\t\t\tawait prisma.organization.findFirst({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\tslug: newSlug,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\n\t\t\t\tif (organizationNameAlreadyExists) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.entity.ALREADY_EXISTS)\n\t\t\t\t}\n\n\t\t\t\tconst organization = await prisma.organization.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tslug: newSlug,\n\t\t\t\t\t\townerId: userId,\n\t\t\t\t\t\tmembers: {\n\t\t\t\t\t\t\tcreate: {\n\t\t\t\t\t\t\t\tuserId,\n\t\t\t\t\t\t\t\trole: 'ADMIN',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treturn reply.status(201).send({\n\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t})\n\t\t\t},\n\t\t)\n}\n","export function generateSlug(text: string) {\n\treturn text\n\t\t.toString()\n\t\t.normalize('NFD')\n\t\t.replace(/[\\u0300-\\u036f]/g, '')\n\t\t.toLowerCase()\n\t\t.trim()\n\t\t.replace(/[^a-z0-9 -]/g, '')\n\t\t.replace(/\\s+/g, '-')\n\t\t.replace(/-+/g, '-')\n}\n","import { rolesSchema } from '@saas/auth'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { auth } from '@/http/middlewares/auth'\n\nexport async function getMemebership(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.get(\n\t\t\t'/organizations/:slug/membership',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Organizations'],\n\t\t\t\t\tsummary: 'Get user memebership on organization.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t200: z.object({\n\t\t\t\t\t\t\tmembership: z.object({\n\t\t\t\t\t\t\t\tid: z.string().uuid(),\n\t\t\t\t\t\t\t\trole: rolesSchema,\n\t\t\t\t\t\t\t\torganizationId: z.string().uuid(),\n\t\t\t\t\t\t\t\tuserId: z.string().uuid(),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request) => {\n\t\t\t\tconst { slug } = request.params\n\t\t\t\tconst { membership } = await request.getCurrentUserMembership(slug)\n\n\t\t\t\treturn {\n\t\t\t\t\tmembership: {\n\t\t\t\t\t\tid: membership.id,\n\t\t\t\t\t\trole: rolesSchema.parse(membership.role),\n\t\t\t\t\t\torganizationId: membership.organizationId,\n\t\t\t\t\t\tuserId: membership.userId,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t)\n}\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { auth } from '@/http/middlewares/auth'\n\nexport async function getOrganization(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.get(\n\t\t\t'/organizations/:slug',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Organizations'],\n\t\t\t\t\tsummary: 'Get details of an organization where user is a member.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t200: z.object({\n\t\t\t\t\t\t\torganization: z.object({\n\t\t\t\t\t\t\t\tid: z.string().uuid(),\n\t\t\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t\t\t\tname: z.string(),\n\t\t\t\t\t\t\t\tdomain: z.string().nullable(),\n\t\t\t\t\t\t\t\tdomainValidationId: z.string().uuid().nullable(),\n\t\t\t\t\t\t\t\tdomainValidatedAt: z.date().nullable(),\n\t\t\t\t\t\t\t\tshouldAttachUsersByDomain: z.boolean(),\n\t\t\t\t\t\t\t\tavatarUrl: z.string().nullable(),\n\t\t\t\t\t\t\t\tcreatedAt: z.date(),\n\t\t\t\t\t\t\t\tupdatedAt: z.date(),\n\t\t\t\t\t\t\t\townerId: z.string().uuid(),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request) => {\n\t\t\t\tconst { slug } = request.params\n\t\t\t\tconst { organization } = await request.getCurrentUserMembership(slug)\n\n\t\t\t\treturn {\n\t\t\t\t\torganization,\n\t\t\t\t}\n\t\t\t},\n\t\t)\n}\n","import { rolesSchema } from '@saas/auth'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\n\nexport async function getOrganizations(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.get(\n\t\t\t'/organizations',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Organizations'],\n\t\t\t\t\tsummary: 'Get organizations where user is a member.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t200: z.object({\n\t\t\t\t\t\t\torganizations: z.array(\n\t\t\t\t\t\t\t\tz.object({\n\t\t\t\t\t\t\t\t\tid: z.string().uuid(),\n\t\t\t\t\t\t\t\t\tname: z.string(),\n\t\t\t\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t\t\t\t\tavatarUrl: z.string().nullable(),\n\t\t\t\t\t\t\t\t\trole: rolesSchema,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request) => {\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst organizations = await prisma.organization.findMany({\n\t\t\t\t\tselect: {\n\t\t\t\t\t\tid: true,\n\t\t\t\t\t\tname: true,\n\t\t\t\t\t\tslug: true,\n\t\t\t\t\t\tavatarUrl: true,\n\t\t\t\t\t\tmembers: {\n\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\trole: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\t\tuserId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tmembers: {\n\t\t\t\t\t\t\tsome: {\n\t\t\t\t\t\t\t\tuserId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tconst formatOrganizationsObject = organizations.map(\n\t\t\t\t\t({ members, ...org }) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...org,\n\t\t\t\t\t\t\trole: members.at(0)!.role,\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t)\n\n\t\t\t\treturn {\n\t\t\t\t\torganizations: formatOrganizationsObject,\n\t\t\t\t}\n\t\t\t},\n\t\t)\n}\n","import { randomUUID } from 'node:crypto'\n\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { prisma } from '@/lib/prisma'\n\nimport { auth } from '../../middlewares/auth'\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function removeDomain(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.delete(\n\t\t\t'/organization/:slug/domain',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Organizations'],\n\t\t\t\t\tsummary: 'Delete a domain from a organization.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t204: z.null(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { slug: organizationSlug } = request.params\n\n\t\t\t\tconst organization = await prisma.organization.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tslug: organizationSlug,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!organization) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.entity.NOT_FOUND)\n\t\t\t\t}\n\n\t\t\t\tawait prisma.organization.update({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: organization.id,\n\t\t\t\t\t},\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tdomain: null,\n\t\t\t\t\t\tdomainValidatedAt: null,\n\t\t\t\t\t\tdomainValidationId: randomUUID(),\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treply.status(204).send()\n\t\t\t},\n\t\t)\n}\n","import { organizationSchema } from '@saas/auth'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { deleteMultipleObjectsR2 } from '@/lib/cloudflare-r2'\nimport { prisma } from '@/lib/prisma'\nimport { getUploadedAvatarNames } from '@/utils/get-uploaded-avatar-names'\nimport { getUserPermissions } from '@/utils/get-user-permissions'\n\nimport { UnauthorizedError } from '../_errors/unauthorized-error'\n\nexport async function shutdownOrganization(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.delete(\n\t\t\t'/organizations/:slug',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Organizations'],\n\t\t\t\t\tsummary: 'Shutdown organization.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t204: z.null(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { slug } = request.params\n\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\t\t\t\t// eslint-disable-next-line prettier/prettier\n\t\t\t\tconst { membership, organization } = await request.getCurrentUserMembership(slug)\t\t\t\t\n\n\t\t\t\tconst authOrganization = organizationSchema.parse({\n\t\t\t\t\tid: organization.id,\n\t\t\t\t\townerId: organization.ownerId,\n\t\t\t\t})\n\n\t\t\t\tconst { cannot } = getUserPermissions(userId, membership.role)\n\n\t\t\t\tif (cannot('delete', authOrganization)) {\n\t\t\t\t\tthrow new UnauthorizedError(\n\t\t\t\t\t\terrors.organizations.entity.CANNOT_SHUTDOWN,\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tconst organizationFromDatabse = await prisma.organization.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: organization.id,\n\t\t\t\t\t},\n\t\t\t\t\tinclude: {\n\t\t\t\t\t\tprojects: true,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\t// filter uploaded avatars\n\t\t\t\tconst avatars: string[] = []\n\n\t\t\t\tif (organizationFromDatabse?.avatarUrl) {\n\t\t\t\t\tavatars.push(organizationFromDatabse.avatarUrl)\n\t\t\t\t}\n\n\t\t\t\tif (organizationFromDatabse?.projects.length) {\n\t\t\t\t\torganizationFromDatabse.projects\n\t\t\t\t\t\t.filter((project) => !!project.avatarUrl)\n\t\t\t\t\t\t.map((project) => avatars.push(project.avatarUrl!))\n\t\t\t\t}\n\n\t\t\t\tconst uploadedAvatars = getUploadedAvatarNames(avatars)\n\n\t\t\t\t// delete user related avatars\n\t\t\t\tawait prisma.avatar.deleteMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\tin: uploadedAvatars,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\t// delete user related avatars files\n\t\t\t\tawait deleteMultipleObjectsR2(uploadedAvatars)\n\n\t\t\t\t// delete organization\n\t\t\t\tawait prisma.organization.delete({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: organization.id,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treturn reply.status(204).send()\n\t\t\t},\n\t\t)\n}\n","import { organizationSchema } from '@saas/auth'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { transferOrganizationOwnershipEmail } from '@/http/emails/transfer-organization-ownership-email'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { getUserPermissions } from '@/utils/get-user-permissions'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\nimport { UnauthorizedError } from '../_errors/unauthorized-error'\n\nexport async function transferOrganization(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.patch(\n\t\t\t'/organizations/:slug/owner',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Organizations'],\n\t\t\t\t\tsummary: 'Transfer organization ownership.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tbody: z.object({\n\t\t\t\t\t\ttransferToUserId: z.string().uuid(),\n\t\t\t\t\t\taction: z.enum(['UPDATE_ROLE', 'LEAVE']),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t204: z.null(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { slug } = request.params\n\t\t\t\tconst { transferToUserId, action } = request.body\n\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\t\t\t\t// eslint-disable-next-line prettier/prettier\n\t\t\t\tconst { membership, organization } = await request.getCurrentUserMembership(slug)\t\t\t\t\n\n\t\t\t\tconst authOrganization = organizationSchema.parse({\n\t\t\t\t\tid: organization.id,\n\t\t\t\t\townerId: organization.ownerId,\n\t\t\t\t})\n\n\t\t\t\tconst { cannot } = getUserPermissions(userId, membership.role)\n\n\t\t\t\tif (cannot('transfer_ownership', authOrganization)) {\n\t\t\t\t\tthrow new UnauthorizedError(\n\t\t\t\t\t\terrors.organizations.entity.CANNOT_TRANSFER,\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tconst transferToMembership = await prisma.member.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\torganizationId_userId: {\n\t\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t\t\tuserId: transferToUserId,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!transferToMembership) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.entity.NOT_MEMBER)\n\t\t\t\t}\n\n\t\t\t\tawait prisma.$transaction([\n\t\t\t\t\tprisma.member.update({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\torganizationId_userId: {\n\t\t\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t\t\t\tuserId: transferToUserId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\trole: 'ADMIN',\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t\tprisma.organization.update({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\tid: organization.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\townerId: transferToUserId,\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\n\t\t\t\t\taction === 'UPDATE_ROLE'\n\t\t\t\t\t\t? prisma.member.update({\n\t\t\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\t\t\torganizationId_userId: {\n\t\t\t\t\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t\t\t\t\t\tuserId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\trole: 'MEMBER',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t: prisma.member.delete({\n\t\t\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\t\t\torganizationId_userId: {\n\t\t\t\t\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t\t\t\t\t\tuserId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}),\n\t\t\t\t])\n\n\t\t\t\tconst newOwner = await prisma.user.findUniqueOrThrow({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: transferToUserId,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\ttry {\n\t\t\t\t\tawait transferOrganizationOwnershipEmail({\n\t\t\t\t\t\torganizationName: organization.name,\n\t\t\t\t\t\ttargetName: newOwner.name ?? '',\n\t\t\t\t\t\ttargetEmail: newOwner.email,\n\t\t\t\t\t})\n\t\t\t\t} catch {\n\t\t\t\t\tthrow new BadRequestError(errors.services.SEND_EMAIL)\n\t\t\t\t}\n\n\t\t\t\treturn reply.status(204).send()\n\t\t\t},\n\t\t)\n}\n","import { env } from '@saas/env'\n\ninterface TransferOrganizationEmailTemplateParams {\n\torganizationName: string\n\ttargetName: string | null\n}\n\nexport function transferOrganizationOwnershipEmailTemplate({\n\torganizationName,\n\ttargetName,\n}: TransferOrganizationEmailTemplateParams) {\n\treturn `\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tHi, ${targetName ? targetName.split(' ').at(0) + '!' : ''}\n\t\t</p>\n\t\t<p style=\"margin:0 0 1rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tYou have been designated as the new administrator of ${organizationName}. You now have full access to manage organization settings and projects.\n\t\t</p>\n\t\t<p style=\"margin:0 0 0.25rem;line-height:1.5;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:14px;\">\n\t\t\tWelcome, and congratulations on your new role!\n\t\t\t<br />\n\t\t\t<a href=\"${env.NEXT_PUBLIC_URL}\" style=\"text-decoration:underline;color:currentColor;\">Get it started</a>\n\t\t</p>\n\t`\n}\n","import { env } from '@saas/env'\nimport Mail from 'nodemailer/lib/mailer'\n\nimport { emailService } from '@/lib/mail'\n\nimport { transferOrganizationOwnershipEmailTemplate } from './template/transfer-organization-ownership-email.template'\n\ninterface TransferOrganizationOwnershipParams {\n\torganizationName: string\n\ttargetName: string\n\ttargetEmail: string\n}\n\nexport async function transferOrganizationOwnershipEmail({\n\torganizationName,\n\ttargetName,\n\ttargetEmail,\n}: TransferOrganizationOwnershipParams) {\n\tconst htmlTemplate = transferOrganizationOwnershipEmailTemplate({\n\t\ttargetName,\n\t\torganizationName,\n\t})\n\n\tconst emailOptions: Mail.Options = {\n\t\tfrom: env.MAIL_SMTP_EMAIL,\n\t\tto: targetEmail,\n\t\tsubject: `${organizationName} Ownership Transfer`,\n\t\thtml: htmlTemplate,\n\t}\n\n\tawait emailService.sendMail(emailOptions)\n}\n","import { organizationSchema } from '@saas/auth'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { generateSlug } from '@/utils/generate-slug'\nimport { getUserPermissions } from '@/utils/get-user-permissions'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\nimport { UnauthorizedError } from '../_errors/unauthorized-error'\n\nexport async function updateOrganization(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.put(\n\t\t\t'/organizations/:slug',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Organizations'],\n\t\t\t\t\tsummary: 'Update organization details.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tbody: z.object({\n\t\t\t\t\t\tname: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t204: z.null(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { slug } = request.params\n\t\t\t\tconst { name } = request.body\n\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\t\t\t\tconst { membership, organization } =\n\t\t\t\t\tawait request.getCurrentUserMembership(slug)\n\n\t\t\t\tconst authOrganization = organizationSchema.parse({\n\t\t\t\t\tid: organization.id,\n\t\t\t\t\townerId: organization.ownerId,\n\t\t\t\t})\n\n\t\t\t\tconst { cannot } = getUserPermissions(userId, membership.role)\n\n\t\t\t\tif (cannot('update', authOrganization)) {\n\t\t\t\t\tthrow new UnauthorizedError(errors.organizations.entity.CANNOT_UPDATE)\n\t\t\t\t}\n\n\t\t\t\tconst newSlug = generateSlug(name)\n\n\t\t\t\tconst organizationNameAlreadyExists =\n\t\t\t\t\tawait prisma.organization.findFirst({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\tslug: newSlug,\n\t\t\t\t\t\t\tid: {\n\t\t\t\t\t\t\t\tnot: organization.id,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\n\t\t\t\tif (organizationNameAlreadyExists) {\n\t\t\t\t\tthrow new BadRequestError(errors.organizations.entity.ALREADY_EXISTS)\n\t\t\t\t}\n\n\t\t\t\tawait prisma.organization.update({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: organization.id,\n\t\t\t\t\t},\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tslug: generateSlug(name),\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treturn reply.status(204).send()\n\t\t\t},\n\t\t)\n}\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { generateSlug } from '@/utils/generate-slug'\nimport { getUserPermissions } from '@/utils/get-user-permissions'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\nimport { UnauthorizedError } from '../_errors/unauthorized-error'\n\nexport async function createProject(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.post(\n\t\t\t'/organization/:slug/projects',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Projects'],\n\t\t\t\t\tsummary: 'Create a new project.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tbody: z.object({\n\t\t\t\t\t\tname: z.string(),\n\t\t\t\t\t\tdescription: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t201: z.object({\n\t\t\t\t\t\t\tprojectId: z.string().uuid(),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { slug } = request.params\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst { organization, membership } =\n\t\t\t\t\tawait request.getCurrentUserMembership(slug)\n\n\t\t\t\tconst { cannot } = getUserPermissions(userId, membership.role)\n\n\t\t\t\tif (cannot('create', 'Project')) {\n\t\t\t\t\tthrow new UnauthorizedError(errors.projects.CANNOT_CREATE)\n\t\t\t\t}\n\n\t\t\t\tconst { name, description } = request.body\n\n\t\t\t\tconst newSlug = generateSlug(name)\n\n\t\t\t\tconst existsAnotherProjectWithSameSlug =\n\t\t\t\t\tawait prisma.project.findUnique({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\torganizationId_slug: {\n\t\t\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t\t\t\tslug: newSlug,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\n\t\t\t\tif (existsAnotherProjectWithSameSlug) {\n\t\t\t\t\tthrow new BadRequestError(errors.projects.ALREADY_EXISTS)\n\t\t\t\t}\n\n\t\t\t\tconst project = await prisma.project.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tslug: newSlug,\n\t\t\t\t\t\tdescription,\n\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t\townerId: userId,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treturn reply.status(201).send({\n\t\t\t\t\tprojectId: project.id,\n\t\t\t\t})\n\t\t\t},\n\t\t)\n}\n","import { projectSchema } from '@saas/auth'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { deleteMultipleObjectsR2 } from '@/lib/cloudflare-r2'\nimport { prisma } from '@/lib/prisma'\nimport { getUploadedAvatarNames } from '@/utils/get-uploaded-avatar-names'\nimport { getUserPermissions } from '@/utils/get-user-permissions'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\nimport { UnauthorizedError } from '../_errors/unauthorized-error'\n\nexport async function deleteProject(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.delete(\n\t\t\t'/organization/:slug/projects/:projectId',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Projects'],\n\t\t\t\t\tsummary: 'Delete a project.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t\tprojectId: z.string().uuid(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t204: z.null(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { slug, projectId } = request.params\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst { organization, membership } =\n\t\t\t\t\tawait request.getCurrentUserMembership(slug)\n\n\t\t\t\tconsole.log(projectId, organization.id)\n\n\t\t\t\tconst project = await prisma.project.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: projectId,\n\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!project) {\n\t\t\t\t\tthrow new BadRequestError(errors.projects.NOT_FOUND)\n\t\t\t\t}\n\n\t\t\t\tconst authProject = projectSchema.parse(project)\n\n\t\t\t\tconst { cannot } = getUserPermissions(userId, membership.role)\n\n\t\t\t\tif (cannot('delete', authProject)) {\n\t\t\t\t\tthrow new UnauthorizedError(errors.projects.CANNOT_DELETE)\n\t\t\t\t}\n\n\t\t\t\t// filter uploaded avatars\n\t\t\t\tconst avatars: string[] = []\n\n\t\t\t\tif (project?.avatarUrl) {\n\t\t\t\t\tavatars.push(project.avatarUrl)\n\t\t\t\t}\n\n\t\t\t\tconst uploadedAvatars = getUploadedAvatarNames(avatars)\n\n\t\t\t\t// delete avatars\n\t\t\t\tawait prisma.avatar.deleteMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\tin: uploadedAvatars,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\t// delete avatars files\n\t\t\t\tawait deleteMultipleObjectsR2(uploadedAvatars)\n\n\t\t\t\t// delete project\n\t\t\t\tawait prisma.project.delete({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: projectId,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treturn reply.status(204).send()\n\t\t\t},\n\t\t)\n}\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { getUserPermissions } from '@/utils/get-user-permissions'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\nimport { UnauthorizedError } from '../_errors/unauthorized-error'\n\nexport async function getProject(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.get(\n\t\t\t'/organization/:organizationSlug/projects/:projectSlug',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Projects'],\n\t\t\t\t\tsummary: 'Show project details.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\torganizationSlug: z.string(),\n\t\t\t\t\t\tprojectSlug: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t200: z.object({\n\t\t\t\t\t\t\tproject: z.object({\n\t\t\t\t\t\t\t\tid: z.string().uuid(),\n\t\t\t\t\t\t\t\tname: z.string(),\n\t\t\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t\t\t\tdescription: z.string(),\n\t\t\t\t\t\t\t\tavatarUrl: z.string().nullable(),\n\t\t\t\t\t\t\t\torganizationId: z.string().uuid(),\n\t\t\t\t\t\t\t\tcreatedAt: z.date(),\n\t\t\t\t\t\t\t\tupdatedAt: z.date(),\n\t\t\t\t\t\t\t\townerId: z.string().uuid().nullable(),\n\t\t\t\t\t\t\t\towner: z\n\t\t\t\t\t\t\t\t\t.object({\n\t\t\t\t\t\t\t\t\t\tid: z.string().uuid(),\n\t\t\t\t\t\t\t\t\t\tname: z.string().nullable(),\n\t\t\t\t\t\t\t\t\t\tavatarUrl: z.string().nullable(),\n\t\t\t\t\t\t\t\t\t\temail: z.string().email(),\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t.nullable(),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { organizationSlug, projectSlug } = request.params\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst { organization, membership } =\n\t\t\t\t\tawait request.getCurrentUserMembership(organizationSlug)\n\n\t\t\t\tconst { cannot } = getUserPermissions(userId, membership.role)\n\n\t\t\t\tif (cannot('get', 'Project')) {\n\t\t\t\t\tthrow new UnauthorizedError(errors.projects.CANNOT_GET)\n\t\t\t\t}\n\n\t\t\t\tconst project = await prisma.project.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\torganizationId_slug: {\n\t\t\t\t\t\t\tslug: projectSlug,\n\t\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tselect: {\n\t\t\t\t\t\tid: true,\n\t\t\t\t\t\tname: true,\n\t\t\t\t\t\tslug: true,\n\t\t\t\t\t\tdescription: true,\n\t\t\t\t\t\tavatarUrl: true,\n\t\t\t\t\t\torganizationId: true,\n\t\t\t\t\t\tcreatedAt: true,\n\t\t\t\t\t\tupdatedAt: true,\n\t\t\t\t\t\townerId: true,\n\t\t\t\t\t\towner: {\n\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\tid: true,\n\t\t\t\t\t\t\t\tname: true,\n\t\t\t\t\t\t\t\tavatarUrl: true,\n\t\t\t\t\t\t\t\temail: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!project) {\n\t\t\t\t\tthrow new BadRequestError(errors.projects.NOT_FOUND)\n\t\t\t\t}\n\n\t\t\t\treturn reply.status(200).send({\n\t\t\t\t\tproject,\n\t\t\t\t})\n\t\t\t},\n\t\t)\n}\n","import { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { getUserPermissions } from '@/utils/get-user-permissions'\n\nimport { UnauthorizedError } from '../_errors/unauthorized-error'\n\nexport async function getProjects(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.get(\n\t\t\t'/organization/:slug/projects',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Projects'],\n\t\t\t\t\tsummary: 'Show projects list.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t200: z.object({\n\t\t\t\t\t\t\tprojects: z.array(\n\t\t\t\t\t\t\t\tz.object({\n\t\t\t\t\t\t\t\t\tid: z.string().uuid(),\n\t\t\t\t\t\t\t\t\tname: z.string(),\n\t\t\t\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t\t\t\t\tdescription: z.string(),\n\t\t\t\t\t\t\t\t\tavatarUrl: z.string().nullable(),\n\t\t\t\t\t\t\t\t\torganizationId: z.string().uuid(),\n\t\t\t\t\t\t\t\t\tcreatedAt: z.date(),\n\t\t\t\t\t\t\t\t\tupdatedAt: z.date(),\n\t\t\t\t\t\t\t\t\towner: z\n\t\t\t\t\t\t\t\t\t\t.object({\n\t\t\t\t\t\t\t\t\t\t\tid: z.string().uuid(),\n\t\t\t\t\t\t\t\t\t\t\tname: z.string().nullable(),\n\t\t\t\t\t\t\t\t\t\t\tavatarUrl: z.string().nullable(),\n\t\t\t\t\t\t\t\t\t\t\temail: z.string().email(),\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.nullable(),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { slug } = request.params\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst { organization, membership } =\n\t\t\t\t\tawait request.getCurrentUserMembership(slug)\n\n\t\t\t\tconst { cannot } = getUserPermissions(userId, membership.role)\n\n\t\t\t\tif (cannot('get', 'Project')) {\n\t\t\t\t\tthrow new UnauthorizedError(errors.projects.CANNOT_LIST)\n\t\t\t\t}\n\n\t\t\t\tconst projects = await prisma.project.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t},\n\t\t\t\t\torderBy: {\n\t\t\t\t\t\tcreatedAt: 'desc',\n\t\t\t\t\t},\n\t\t\t\t\tselect: {\n\t\t\t\t\t\tid: true,\n\t\t\t\t\t\tname: true,\n\t\t\t\t\t\tslug: true,\n\t\t\t\t\t\tdescription: true,\n\t\t\t\t\t\tavatarUrl: true,\n\t\t\t\t\t\torganizationId: true,\n\t\t\t\t\t\tcreatedAt: true,\n\t\t\t\t\t\tupdatedAt: true,\n\t\t\t\t\t\towner: {\n\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\tid: true,\n\t\t\t\t\t\t\t\tname: true,\n\t\t\t\t\t\t\t\tavatarUrl: true,\n\t\t\t\t\t\t\t\temail: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treturn reply.status(200).send({\n\t\t\t\t\tprojects,\n\t\t\t\t})\n\t\t\t},\n\t\t)\n}\n","import { projectSchema } from '@saas/auth'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { generateSlug } from '@/utils/generate-slug'\nimport { getUserPermissions } from '@/utils/get-user-permissions'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\nimport { UnauthorizedError } from '../_errors/unauthorized-error'\n\nexport async function updateProject(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.put(\n\t\t\t'/organization/:slug/projects/:projectId',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Projects'],\n\t\t\t\t\tsummary: 'Update a project.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\tslug: z.string(),\n\t\t\t\t\t\tprojectId: z.string().uuid(),\n\t\t\t\t\t}),\n\t\t\t\t\tbody: z.object({\n\t\t\t\t\t\tname: z.string(),\n\t\t\t\t\t\tdescription: z.string(),\n\t\t\t\t\t}),\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\t204: z.null(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { slug, projectId } = request.params\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\t\tconst { organization, membership } =\n\t\t\t\t\tawait request.getCurrentUserMembership(slug)\n\n\t\t\t\tconst project = await prisma.project.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: projectId,\n\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!project) {\n\t\t\t\t\tthrow new BadRequestError(errors.projects.NOT_FOUND)\n\t\t\t\t}\n\n\t\t\t\tconst authProject = projectSchema.parse(project)\n\n\t\t\t\tconst { cannot } = getUserPermissions(userId, membership.role)\n\n\t\t\t\tif (cannot('update', authProject)) {\n\t\t\t\t\tthrow new UnauthorizedError(errors.projects.CANNOT_UPDATE)\n\t\t\t\t}\n\n\t\t\t\tconst { name, description } = request.body\n\n\t\t\t\tconst newSlug = generateSlug(name)\n\n\t\t\t\tconst existsAnotherProjectWithSameSlug =\n\t\t\t\t\tawait prisma.project.findUnique({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\torganizationId_slug: {\n\t\t\t\t\t\t\t\torganizationId: organization.id,\n\t\t\t\t\t\t\t\tslug: newSlug,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\n\t\t\t\tif (\n\t\t\t\t\texistsAnotherProjectWithSameSlug &&\n\t\t\t\t\texistsAnotherProjectWithSameSlug.id !== project.id\n\t\t\t\t) {\n\t\t\t\t\tthrow new BadRequestError(errors.projects.ALREADY_EXISTS)\n\t\t\t\t}\n\n\t\t\t\tawait prisma.project.update({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: projectId,\n\t\t\t\t\t},\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tdescription,\n\t\t\t\t\t\tslug: newSlug,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treturn reply.status(204).send()\n\t\t\t},\n\t\t)\n}\n","/* eslint-disable prettier/prettier */\n\nimport fastifyMultipart from '@fastify/multipart'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport z from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { deleteObjectR2, putObjectR2 } from '@/lib/cloudflare-r2'\nimport { prisma } from '@/lib/prisma'\nimport { generateAvatar } from '@/utils/generate-avatar'\n\nimport { BadRequestError } from './_errors/bad-request-error'\n\nexport async function uploadAvatar(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.register(fastifyMultipart)\n\t\t.post(\n\t\t\t'/upload/:receipient/:receipientId',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Upload'],\n\t\t\t\t\tsummary: 'Upload avatar image to entity.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tparams: z.object({\n\t\t\t\t\t\treceipientId: z.string().uuid(),\n\t\t\t\t\t\treceipient: z\n\t\t\t\t\t\t\t.enum(['user', 'organization', 'project'])\n\t\t\t\t\t\t\t.transform((value) => {\n\t\t\t\t\t\t\t\tswitch (value) {\n\t\t\t\t\t\t\t\t\tcase 'user':\n\t\t\t\t\t\t\t\t\t\treturn 'USER'\n\t\t\t\t\t\t\t\t\tcase 'organization':\n\t\t\t\t\t\t\t\t\t\treturn 'ORGANIZATION'\n\t\t\t\t\t\t\t\t\tcase 'project':\n\t\t\t\t\t\t\t\t\t\treturn 'PROJECT'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst { receipient, receipientId } = request.params\n\n\t\t\t\tconst file = await request.file({\n\t\t\t\t\tlimits: {\n\t\t\t\t\t\tfileSize: 1000 * 100 * 10 * 2, // ~2mb\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tconst { fileName, mimeType, fileBuffer } = await generateAvatar(\n\t\t\t\t\tapp,\n\t\t\t\t\tfile,\n\t\t\t\t)\n\n\t\t\t\ttry {\n\t\t\t\t\tawait putObjectR2(fileName, mimeType, fileBuffer)\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(error)\n\t\t\t\t\tthrow new BadRequestError(errors.files.UPLOAD)\n\t\t\t\t}\n\n\t\t\t\tconst entityHasAnAvatar = await prisma.avatar.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\treceipient_receipientId: {\n\t\t\t\t\t\t\treceipient,\n\t\t\t\t\t\t\treceipientId,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (entityHasAnAvatar) {\n\t\t\t\t\tawait prisma.avatar.delete({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\treceipient_receipientId: {\n\t\t\t\t\t\t\t\treceipient,\n\t\t\t\t\t\t\t\treceipientId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst fileNameToDelete = entityHasAnAvatar.name\n\t\t\t\t\t\tawait deleteObjectR2(fileNameToDelete)\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error(error)\n\t\t\t\t\t\tthrow new BadRequestError(errors.files.DELETE)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst { name: newAvatar } = await prisma.avatar.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tname: fileName,\n\t\t\t\t\t\treceipient,\n\t\t\t\t\t\treceipientId,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (receipient === 'USER') {\n\t\t\t\t\tawait prisma.user.update({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\tid: receipientId,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tavatarUrl: `{AWS}/${newAvatar}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tif (receipient === 'ORGANIZATION') {\n\t\t\t\t\tawait prisma.organization.update({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\tid: receipientId,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tavatarUrl: `{AWS}/${newAvatar}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tif (receipient === 'PROJECT') {\n\t\t\t\t\tawait prisma.project.update({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\tid: receipientId,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tavatarUrl: `{AWS}/${newAvatar}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\treturn reply.status(201).send()\n\t\t\t},\n\t\t)\n}\n","/* eslint-disable prettier/prettier */\nimport { randomUUID } from 'node:crypto'\n\nimport { MultipartFile } from '@fastify/multipart'\nimport { FastifyInstance } from 'fastify'\nimport sharp from 'sharp'\n\nimport { errors } from '@/errors/messages'\nimport { BadRequestError } from '@/http/routes/_errors/bad-request-error'\n\nimport { generateFilename } from './generate-filename'\n\nexport async function generateAvatar(\n\tapp: FastifyInstance,\n\tfile?: MultipartFile,\n) {\n\tif (!file) {\n\t\tthrow new BadRequestError(errors.files.NOT_FOUND)\n\t}\n\n\tlet fileBuffer: Buffer\n\n\ttry {\n\t\tfileBuffer = await file.toBuffer()\n\t} catch (error) {\n\t\tif (error instanceof app.multipartErrors.RequestFileTooLargeError) {\n\t\t\tthrow new BadRequestError(errors.files.MAX_SIZE)\n\t\t}\n\n\t\tconsole.log(error)\n\n\t\tthrow new BadRequestError(errors.files.PROCESSING)\n\t}\n\n\tconst fileName = file.filename\n\tconst fileMimeType = file.mimetype\n\n\tif (!/^image\\/(jpeg|png)$/.test(fileMimeType)) {\n\t\tthrow new BadRequestError(errors.files.FORMAT)\n\t}\n\n\tconst fileNamePrefix = randomUUID()\n\tconst uniqueFileName = generateFilename(`${fileNamePrefix}-${fileName}`)\n\n\tlet transformedBuffer: Buffer\n\n\ttry {\n\t\ttransformedBuffer = await sharp(fileBuffer)\n\t\t\t.resize(600, 600)\n\t\t\t.jpeg()\n\t\t\t.toBuffer()\n\t} catch (error) {\n\t\tconsole.log(error)\n\n\t\tthrow new BadRequestError(errors.files.PROCESSING)\n\t}\n\n\treturn {\n\t\tfileName: uniqueFileName,\n\t\tmimeType: 'image/jpeg', // fileMimeType fixed since its converted\n\t\tfileBuffer: transformedBuffer,\n\t}\n}\n","export function generateFilename(filename: string) {\n\tconst parts = filename.split('.')\n\tconst extension = parts.pop()?.toLocaleLowerCase()\n\tconst name = parts.join('.')\n\n\tconst slug = name\n\t\t.toLowerCase()\n\t\t.trim()\n\t\t.replace(/[^a-z0-9]+/g, '-')\n\t\t.replace(/^-+|-+$/g, '')\n\n\treturn extension ? `${slug}.${extension}` : slug\n}\n"],"mappings":"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","names":["env","createEnv","import_zod","createEnv","import_fastify_type_provider_zod","_","fastifyPlugin","app","app","import_zod","import_zod","z","app","import_zod","app","z","dayjs","app","import_dayjs","import_zod","import_zod","z","app","dayjs","import_zod","app","z","import_zod","app","import_zod","app","import_zod","app","import_zod","nodemailer","app","import_zod","i","errors","app","import_zod","app","import_zod","app","import_bcryptjs","import_zod","app","import_bcryptjs","import_zod","app","import_zod","app","import_zod","app","import_bcryptjs","import_dayjs","import_zod","app","dayjs","import_bcryptjs","import_dayjs","import_zod","app","dayjs","import_zod","Condition","constructor","operator","value","Object","defineProperty","this","writable","_notes","addNote","note","push","DocumentCondition","CompoundCondition","conditions","Array","isArray","Error","ITSELF","FieldCondition","field","NULL_CONDITION","hasOwnProperty","prototype","call","bind","isCompound","condition","optimizedCompoundCondition","length","flattenConditions","aggregatedResult","flatConditions","i","currentNode","identity","x","object","create","ignoreValue","hasOperators","instructions","skipIgnore","prop","objectKeysSkipIgnore","anyObject","keys","key","pushIfNonNullCondition","buildAnd","condition","defaultInstructionParsers","compound","instruction","value","context","conditions","Array","isArray","map","query","parse","CompoundCondition","name","field","FieldCondition","document","DocumentCondition","ObjectQueryParser","constructor","instructions","options","object","_instructions","_fieldInstructionContext","_documentInstructionContext","_options","_objectKeys","this","bind","operatorToConditionName","identity","defaultOperatorName","mergeFinalConditions","buildAnd","Object","keys","reduce","all","fieldContext","hasOperators","useIgnoreValue","documentContext","objectKeysSkipIgnore","setParse","parseField","operator","parentQuery","Error","type","parseInstruction","validate","parseFieldOperators","i","length","op","pushIfNonNullCondition","key","push","getInterpreter","interpreters","interpret","defaultInterpreterName","createInterpreter","rawOptions","getInterpreterName","numberOfArguments","interpreterName","defaultContext","params","createTranslatorFactory","args","ast","translate","prototype","ensureIsArray","instruction","value","Array","isArray","Error","name","ensureIsNonEmptyArray","length","ensureIs","type","$and","validate","parse","queries","conditions","map","query","optimizedCompoundCondition","$or","$nor","$not","RegExp","constructor","Object","context","condition","FieldCondition","field","CompoundCondition","$elemMatch","hasOperators","ITSELF","$size","$in","$nin","$all","$mod","$exists","$gte","Date","$gt","$lt","$lte","$eq","$ne","$regex","rawValue","$options","NULL_CONDITION","$where","c","f","d","u","w","y","x","v","h","m","j","O","_","MongoQueryParser","ObjectQueryParser","instructions","defaultOperatorName","operatorToConditionName","slice","options","and","this","parseFieldOperators","super","allParsingInstructions","includes","items","value","compare","i","length","isArrayAndNotNumericField","object","field","Array","isArray","Number","isNaN","getField","get","result","concat","testValueOrArray","test","node","context","some","v","defaultGet","getObjectFieldCursor","path","dotIndex","lastIndexOf","slice","getObjectField","ITSELF","Error","String","indexOf","paths","split","compare","a","b","createJsInterpreter","operators","options","createInterpreter","get","getObjectField","or","node","object","interpret","value","some","condition","nor","context","and","every","not","eq","field","Array","isArray","includes","ne","lte","testValueOrArray","result","lt","gt","gte","exists","ITSELF","item","getObjectFieldCursor","test","Boolean","hasOwnProperty","isArrayAndNotNumericField","mod","size","items","length","regex","within","nin","all","v","elemMatch","where","call","allInterpreters","interpreters","in","toPrimitive","value","Date","getTime","toJSON","comparePrimitives","a","b","compare","createFactory","instructions","interpreters","options","parser","MongoQueryParser","interpret","createJsInterpreter","forPrimitives","params","field","ITSELF","parse","setParse","query","createTranslatorFactory","guard","allParsingInstructions","allInterpreters","squire","reduce","name","type","$nor","defaultParsers","compound","wrapArray","value","Array","isArray","TYPE_FIELD","isSubjectType","value","type","getSubjectClassName","modelName","name","getSubjectTypeName","detectSubjectType","object","Object","hasOwn","TYPE_FIELD","constructor","DETECT_SUBJECT_TYPE_STRATEGY","function","string","copyArrayTo","dest","target","start","i","length","push","mergePrioritized","array","anotherArray","j","merged","priority","getOrDefault","map","key","defaultValue","value","get","set","identity","x","validate","rule","options","Array","isArray","fields","Error","fieldMatcher","conditions","conditionsMatcher","Rule","constructor","this","action","resolveAction","subject","inverted","reason","origin","wrapArray","_options","_conditionsMatcher","_matchConditions","ast","matches","matchesConditions","object","isSubjectType","matchesField","field","_matchField","linkedItem","prev","item","next","unlinkItem","cloneLinkedItem","defaultActionEntry","rules","defaultSubjectEntry","Map","RuleIndex","_hasPerFieldRules","_indexedRules","_ruleOptions","_anyAction","anyAction","_anySubjectType","anySubjectType","_rules","_hasCustomSubjectTypeDetection","detectSubjectType","_detectSubjectType","_indexAndAnalyzeRules","update","event","ability","_emit","rawRules","indexedRules","typeOfSubjectType","actions","subjects","k","subjectRules","DETECT_SUBJECT_TYPE_STRATEGY","string","possibleRulesFor","subjectType","actionRules","anyActionRules","has","rulesFor","filter","actionsFor","Set","from","keys","forEach","add","anySubjectTypeRules","on","handler","_events","events","tail","currentTail","delete","name","payload","current","PureAbility","can","relevantRuleFor","cannot","defaultInstructions","$eq","$ne","$lt","$lte","$gt","$gte","$in","$nin","$all","$size","$regex","$options","$elemMatch","$exists","defaultInterpreters","eq","ne","lt","lte","gt","gte","in","within","nin","all","size","regex","elemMatch","exists","and","mongoQueryMatcher","createFactory","defaultInstructions","defaultInterpreters","REGEXP_SPECIAL_CHARS","REGEXP_ANY","REGEXP_STARS","REGEXP_DOT","detectRegexpPattern","match","index","string","quantifier","length","matcher","indexOf","pattern","replace","escapeRegexp","createPattern","fields","patterns","map","field","join","RegExp","fieldPatternMatcher","every","f","test","createMongoAbility","rules","options","PureAbility","Object","assign","conditionsMatcher","mongoQueryMatcher","fieldMatcher","fieldPatternMatcher","isAbilityClass","factory","prototype","undefined","possibleRulesFor","RuleBuilder","constructor","rule","this","_rule","because","reason","AbilityBuilder","AbilityType","_createAbility","can","action","subject","conditionsOrFields","conditions","_addRule","cannot","build","inverted","Array","isArray","fields","push","getDefaultErrorMessage","error","action","subjectType","NativeError","NError","message","this","prototype","Object","create","Error","ForbiddenError","messageOrFn","_defaultErrorMessage","ability","constructor","super","captureStackTrace","name","setMessage","throwUnlessCan","subject","field","unlessCan","rule","relevantRuleFor","inverted","getSubjectTypeName","detectSubjectType","reason","import_zod","errors","_","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","errors","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","dns","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","import_node_crypto","app","sharp","app","fastifyMultipart","z","fastifySwagger","fastifySwaggerUi","fastifyCors","fastifyJwt"]}