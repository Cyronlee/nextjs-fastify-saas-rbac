{"version":3,"sources":["../../../../src/http/routes/account/update-password.ts","../../../../src/errors/messages.ts","../../../../src/http/middlewares/auth.ts","../../../../src/lib/prisma.ts","../../../../src/http/routes/_errors/unauthorized-error.ts","../../../../src/schemas/validate-strong-password-schema.ts","../../../../src/http/routes/_errors/bad-request-error.ts"],"sourcesContent":["import { compare, hash } from 'bcryptjs'\nimport { FastifyInstance } from 'fastify'\nimport { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { z } from 'zod'\n\nimport { errors } from '@/errors/messages'\nimport { auth } from '@/http/middlewares/auth'\nimport { prisma } from '@/lib/prisma'\nimport { validateStrongPasswordSchema } from '@/schemas/validate-strong-password-schema'\n\nimport { BadRequestError } from '../_errors/bad-request-error'\n\nexport async function updatePassword(app: FastifyInstance) {\n\tapp\n\t\t.withTypeProvider<ZodTypeProvider>()\n\t\t.register(auth)\n\t\t.patch(\n\t\t\t'/users/passwords',\n\t\t\t{\n\t\t\t\tschema: {\n\t\t\t\t\ttags: ['Account'],\n\t\t\t\t\tsummary: 'Update or create account password.',\n\t\t\t\t\tsecurity: [{ bearerAuth: [] }],\n\t\t\t\t\tbody: z\n\t\t\t\t\t\t.object({\n\t\t\t\t\t\t\tcurrentPassword: z.string().nullish(),\n\t\t\t\t\t\t\tpassword: z.string(),\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.superRefine(validateStrongPasswordSchema),\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync (request, reply) => {\n\t\t\t\tconst userId = await request.getCurrentUserId()\n\t\t\t\tconst { currentPassword, password: newPassword } = request.body\n\n\t\t\t\tconst user = await prisma.user.findUnique({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: userId,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (!user) {\n\t\t\t\t\tthrow new BadRequestError(errors.auth.INVALID_CREDENTIALS)\n\t\t\t\t}\n\n\t\t\t\tif (user.passwordHash) {\n\t\t\t\t\tif (!currentPassword) {\n\t\t\t\t\t\tthrow new BadRequestError(errors.auth.INVALID_CREDENTIALS)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst isPasswordValid = await compare(\n\t\t\t\t\t\tcurrentPassword,\n\t\t\t\t\t\tuser.passwordHash,\n\t\t\t\t\t)\n\n\t\t\t\t\tif (!isPasswordValid) {\n\t\t\t\t\t\tthrow new BadRequestError(errors.auth.INVALID_CREDENTIALS)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst hashedPassword = await hash(newPassword, 8)\n\n\t\t\t\tawait prisma.user.update({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tid: user.id,\n\t\t\t\t\t},\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tpasswordHash: hashedPassword,\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\treply.status(204).send()\n\t\t\t},\n\t\t)\n}\n","/* eslint-disable prettier/prettier */\nexport const errors = {\n\tapi: {\n\t\tVALIDATION_ERROR: 'Validation error',\n\t\tSERVER_ERROR: 'Internal server error',\n\t},\n\tservices: {\n\t\tSEND_EMAIL: 'An error occurred while trying to send the e-mail',\n\t\tGITHUB_ALREADY_CONNECTED: 'You already have a GitHub account connected',\n\t\tGITHUB_ALREADY_CONNECTED_SOMEONE_ELSE: 'This Github account is already connected with another account',\n\t\tGOOGLE_ALREADY_CONNECTED: 'You already have a Google account connected',\n\t\tGOOGLE_ALREADY_CONNECTED_SOMEONE_ELSE: 'This Google account is already connected with another account',\n\t},\n\tuser: {\n\t\tALREADY_EXISTS: 'An user with same e-mail already exists',\n\t\tNOT_FOUND: 'User not found',\n\t\tACCOUNT_NOT_FOUND: 'Account not found',\n\t\tEMAIL_VALIDATION_NOT_FOUND: 'E-mail change validation not found',\n\t\tEMAIL_VALIDATION_EXPIRED: 'E-mail change validation does not exists or already expired',\n\t\tEMAIL_VALIDATION_INVALID: 'Invalid validation code'\n\t},\n\tauth: {\n\t\tNOT_PASSWORD_FOUND: 'User does not have a password, use social sign-in',\n\t\tINVALID_CREDENTIALS: 'Invalid credentials',\n\t\tINVALID_TOKEN: 'Invalid authentication token',\n\t\tINVALID_EMAIL_TOKEN: 'The token provied is not valid. Note: The code is valid for 5 minutes',\n\t\tINVALID_PASSWORD_TOKEN: 'Unable to reset password. Ensure your recovery code is valid and try again. Note: The code is valid for 5 minutes',\n\t\tLAST_METHOD_AVAILABLE: 'This service is the only access method available. Set a password or connect with another provider first',\n\t\tGITHUB_EMAIL_NOT_FOUND: 'Your GitHub account does not have an e-mail to authenticate',\n\t\tPASSWORD_NUMBER: 'Enter one number.',\n\t\tPASSWORD_UPPER: 'Enter one upper case letter.',\n\t\tPASSWORD_LOWER: 'Enter one lower case letter.',\n\t\tPASSWORD_SPECIAL: 'Enter one special character.',\n\t\tPASSWORD_LENGTH: 'Enter at least 6 characters.',\n\t},\n\torganizations: {\n\t\tentity: {\n\t\t\tNOT_FOUND: 'Organization not found',\n\t\t\tNOT_MEMBER: 'The user is not a member of this organization',\n\t\t\tALREADY_EXISTS: 'There is another organization using the same name. Choose a different one',\n\t\t\tCANNOT_SHUTDOWN: 'You are not allowed to shutdown this organization',\n\t\t\tCANNOT_TRANSFER: 'You are not allowed to transfer ownership of this organization',\n\t\t\tCANNOT_UPDATE: 'You are not allowed to update this organization',\n\t\t\tCANNOT_LEAVE: 'You are the owner of this organization, to leave it you must transfer the ownership first',\n\t\t},\n\t\tbilling: {\n\t\t\tCANNOT_LIST: 'You are not allowed to get billing details from this organization',\n\t\t},\n\t\tdomain: {\n\t\t\tALREADY_EXISTS: 'Another organization with same domain already exists',\n\t\t\tCHECK_DNS: 'Error checking DNS information',\n\t\t\tTXT_NOT_FOUND: 'A valid TXT record was not found in the DNS records',\n\t\t\tTXT_INVALID: 'A valid TXT record was found, but does not match in the DNS records. Check your DNS values.',\n\t\t},\n\t\tmembers: {\n\t\t\tCANNOT_ACCESS: 'You are not a member of this organization',\n\t\t\tCANNOT_LIST: 'You are not allowed to list organization members',\n\t\t\tCANNOT_DELETE: 'You are not allowed to remove this organization member',\n\t\t\tCANNOT_UPDATE: 'You are not allowed to update this organization member',\n\t\t},\n\t\tinvites: {\n\t\t\tNOT_FOUND: 'Invite not found or expired',\n\t\t\tNOT_ALLOWED: 'This invite belongs to another user',\n\t\t\tAUTOJOIN_DOMAIN: 'Users with {domain} domain will join your organization automatically on sign in',\n\t\t\tALREADY_EXISTS: 'Another invite with same e-mail already exists',\n\t\t\tALREADY_MEMBER: 'A member with this e-mail already belongs to your organization',\n\t\t\tCANNOT_SEND: 'You are not allowed to create a new invite',\n\t\t\tCANNOT_LIST: 'You are not allowed to get organization invites',\n\t\t\tCANNOT_REVOKE: 'You are not allowed to revoke an invite',\n\t\t},\n\t},\n\tprojects: {\n\t\tNOT_FOUND: 'Project not found',\n\t\tALREADY_EXISTS: 'There is another project in this organization using the same project name. Choose a different one',\n\t\tCANNOT_LIST: 'You are not allowed to list projects',\n\t\tCANNOT_GET: 'You are not allowed to get a project',\n\t\tCANNOT_CREATE: 'You are not allowed to create a new project',\n\t\tCANNOT_UPDATE: 'You are not allowed to update this project',\n\t\tCANNOT_DELETE: 'You are not allowed to remove this project',\n\t},\n\tfiles: {\n\t\tNOT_FOUND: 'Select a file to update',\n\t\tMAX_SIZE: 'Your avatar must have less than 2mb',\n\t\tPROCESSING: 'An unexpected error occurred while processing your file', \n\t\tFORMAT: 'The file selected is not a valid image',\n\t\tUPLOAD: 'An unexpected error occurred during file upload',\n\t\tDELETE: 'An unexpected error occurred during file removal',\n\t}\n}\n","import { FastifyInstance } from 'fastify'\nimport fastifyPlugin from 'fastify-plugin'\n\nimport { errors } from '@/errors/messages'\nimport { prisma } from '@/lib/prisma'\n\nimport { UnauthorizedError } from '../routes/_errors/unauthorized-error'\n\nexport const auth = fastifyPlugin(async (app: FastifyInstance) => {\n\tapp.addHook('preHandler', async (request) => {\n\t\trequest.getCurrentUserId = async () => {\n\t\t\ttry {\n\t\t\t\tconst { sub } = await request.jwtVerify<{ sub: string }>()\n\n\t\t\t\treturn sub\n\t\t\t} catch (error) {\n\t\t\t\tthrow new UnauthorizedError(errors.auth.INVALID_TOKEN)\n\t\t\t}\n\t\t}\n\n\t\trequest.getCurrentUserMembership = async (slug: string) => {\n\t\t\tconst userId = await request.getCurrentUserId()\n\n\t\t\tconst member = await prisma.member.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\tuserId,\n\t\t\t\t\torganization: {\n\t\t\t\t\t\tslug,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tinclude: {\n\t\t\t\t\torganization: true,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tif (!member) {\n\t\t\t\tthrow new UnauthorizedError(errors.organizations.members.CANNOT_ACCESS)\n\t\t\t}\n\n\t\t\tconst { organization, ...membership } = member\n\n\t\t\treturn {\n\t\t\t\torganization,\n\t\t\t\tmembership,\n\t\t\t}\n\t\t}\n\t})\n})\n","import { PrismaClient } from '@prisma/client'\n\nexport const prisma = new PrismaClient()\n","export class UnauthorizedError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message ?? 'Unauthorized.')\n\t}\n}\n","import { z } from 'zod'\n\nimport { errors as messages } from '@/errors/messages'\n\nexport const validateStrongPasswordSchema = (\n\t{ password }: Record<'password', string>,\n\tcheckPassComplexity: z.RefinementCtx,\n) => {\n\tif (!password.length) {\n\t\tcheckPassComplexity.addIssue({\n\t\t\tcode: 'custom',\n\t\t\tpath: ['password'],\n\t\t\tmessage: JSON.stringify({\n\t\t\t\tminLength: {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: messages.auth.PASSWORD_LENGTH,\n\t\t\t\t},\n\t\t\t}),\n\t\t})\n\t}\n\n\tconst hasUppercase = (ch: string) => /[A-Z]/.test(ch)\n\tconst hasLowercase = (ch: string) => /[a-z]/.test(ch)\n\t// eslint-disable-next-line prettier/prettier\n\tconst hasSpecial = (ch: string) => /[`!@#$%^&*()_\\-+=[\\]{};':\"\\\\|,.<>/?~ ]/.test(ch)\n\n\tlet countUppercase = 0\n\tlet countLowercase = 0\n\tlet countNumbers = 0\n\tlet countSpecial = 0\n\n\tfor (let i = 0; i < password.length; i++) {\n\t\tconst ch = password.charAt(i)\n\t\tif (!isNaN(+ch)) countNumbers++\n\t\telse if (hasUppercase(ch)) countUppercase++\n\t\telse if (hasLowercase(ch)) countLowercase++\n\t\telse if (hasSpecial(ch)) countSpecial++\n\t}\n\n\tlet errors = {\n\t\ttotalNumber: {\n\t\t\tvalid: true,\n\t\t\tmessage: messages.auth.PASSWORD_NUMBER,\n\t\t},\n\t\tupperCase: {\n\t\t\tvalid: true,\n\t\t\tmessage: messages.auth.PASSWORD_UPPER,\n\t\t},\n\t\tlowerCase: {\n\t\t\tvalid: true,\n\t\t\tmessage: messages.auth.PASSWORD_LOWER,\n\t\t},\n\t\tspecialCh: {\n\t\t\tvalid: true,\n\t\t\tmessage: messages.auth.PASSWORD_SPECIAL,\n\t\t},\n\t\tminLength: {\n\t\t\tvalid: true,\n\t\t\tmessage: messages.auth.PASSWORD_LENGTH,\n\t\t},\n\t}\n\n\tif (countNumbers < 1) {\n\t\terrors = {\n\t\t\t...errors,\n\t\t\ttotalNumber: { ...errors.totalNumber, valid: false },\n\t\t}\n\t}\n\n\tif (countUppercase < 1) {\n\t\terrors = {\n\t\t\t...errors,\n\t\t\tupperCase: {\n\t\t\t\t...errors.upperCase,\n\t\t\t\tvalid: false,\n\t\t\t},\n\t\t}\n\t}\n\n\tif (countLowercase < 1) {\n\t\terrors = {\n\t\t\t...errors,\n\t\t\tlowerCase: {\n\t\t\t\t...errors.lowerCase,\n\t\t\t\tvalid: false,\n\t\t\t},\n\t\t}\n\t}\n\n\tif (countSpecial < 1) {\n\t\terrors = {\n\t\t\t...errors,\n\t\t\tspecialCh: {\n\t\t\t\t...errors.specialCh,\n\t\t\t\tvalid: false,\n\t\t\t},\n\t\t}\n\t}\n\n\tif (password.length < 6) {\n\t\terrors = {\n\t\t\t...errors,\n\t\t\tminLength: {\n\t\t\t\t...errors.minLength,\n\t\t\t\tvalid: false,\n\t\t\t},\n\t\t}\n\t}\n\n\tif (\n\t\tcountNumbers < 1 ||\n\t\tcountUppercase < 1 ||\n\t\tcountLowercase < 1 ||\n\t\tcountSpecial < 1 ||\n\t\tpassword.length < 6\n\t) {\n\t\tcheckPassComplexity.addIssue({\n\t\t\tcode: 'custom',\n\t\t\tpath: ['password'],\n\t\t\tmessage: JSON.stringify(errors),\n\t\t})\n\t}\n}\n","export class BadRequestError extends Error {}\n"],"mappings":"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","names":["fastifyPlugin","errors"]}